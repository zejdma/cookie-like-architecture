declare const PermissionList: {
    readonly CreateIssueTag: "create:issueTag";
    readonly DeleteIssueTag: "delete:issueTag";
    readonly UpdateIssueTag: "update:issueTag";
    readonly ReadApiToken: "read:apiToken";
    readonly CreateApiToken: "create:apiToken";
    readonly UpdateApiToken: "update:apiToken";
    readonly DeleteApiToken: "delete:apiToken";
    readonly UpdateCommentAny: "update:comment:any";
    readonly UpdateCommentOwn: "update:comment:own";
    readonly DeleteCommentAny: "delete:comment:any";
    readonly DeleteCommentOwn: "delete:comment:own";
    readonly BlockCommentAny: "block:comment";
    readonly CreateComment: "create:comment";
    readonly ReadFormAny: "read:form:any";
    readonly ReadFormOwn: "read:form:own";
    readonly UpdateForm: "update:form";
    readonly DeleteForm: "delete:form";
    readonly CreateForm: "create:form";
    readonly ReadRoleOwn: "read:role:own";
    readonly ReadRoleAny: "read:role:any";
    readonly UpdateRole: "update:role";
    readonly DeleteRole: "delete:role";
    readonly CreateRole: "create:role";
    readonly ReadFileAny: "read:file:any";
    readonly ReadFileOwn: "read:file:own";
    readonly CreateFileOwn: "create:file:own";
    readonly CreateFileAny: "create:file:any";
    readonly UpdateFileOwn: "update:file:own";
    readonly UpdateFileAny: "update:file:any";
    readonly DeleteFileOwn: "delete:file:own";
    readonly DeleteFileAny: "delete:file:any";
    readonly CreateConfidenceAny: "create:confidence:any";
    readonly CreateConfidenceOwn: "create:confidence:own";
    readonly ReadConfidenceAny: "read:confidence:any";
    readonly ReadConfidenceOwn: "read:confidence:own";
    readonly UpdateConfidenceAny: "update:confidence:any";
    readonly UpdateConfidenceOwn: "update:confidence:own";
    readonly DeleteConfidenceAny: "delete:confidence:any";
    readonly DeleteConfidenceOwn: "delete:confidence:own";
    readonly ReadUserAny: "read:user:any";
    readonly ReadUserOwn: "read:user:own";
    readonly UpdateUserAny: "update:user:any";
    readonly UpdateUserOwn: "update:user:own";
    readonly DeleteUserAny: "delete:user:any";
    readonly DeleteUserOwn: "delete:user:own";
    readonly ReadMemberConfidentialAny: "read:memberConfidential:any";
    readonly ReadMemberConfidentialOwn: "read:memberConfidential:own";
    readonly UpdateMemberAny: "update:member:any";
    readonly UpdateMemberOwn: "update:member:own";
    readonly DeleteMemberAny: "delete:member:any";
    readonly DeleteMemberOwn: "delete:member:own";
    readonly CreateProjectGroup: "create:projectGroup";
    readonly ReadProjectGroupDetails: "read:projectGroup:details";
    readonly UpdateProjectGroup: "update:projectGroup";
    readonly DeleteProjectGroup: "delete:projectGroup";
    readonly CreateIssue: "create:issue";
    readonly ReadIssueAny: "read:issue:any";
    readonly ReadIssueConfident: "read:issue:confident";
    readonly ReadIssueOwn: "read:issue:own";
    readonly UpdateIssueAny: "update:issue:any";
    readonly UpdateIssueOwn: "update:issue:own";
    readonly DeleteIssueAny: "delete:issue:any";
    readonly DeleteIssueOwn: "delete:issue:own";
    readonly VoteIssue: "vote:issue";
    readonly SubscribeIssue: "subscribe:issue";
    readonly CreateProject: "create:project";
    readonly UpdateProjectAny: "update:project:any";
    readonly UpdateProjectOwn: "update:project:own";
    readonly ManageProjectAsModerator: "manage:project:asModerator";
    readonly DeleteProjectAny: "delete:project:any";
    readonly DeleteProjectOwn: "delete:project:own";
    readonly ReadProjectConfident: "read:project:confident";
    readonly ReadProjectOwn: "read:project:own";
    readonly ReadProjectAny: "read:project:any";
};

type TPermission = (typeof PermissionList)[keyof typeof PermissionList];
type TRolePermissions = {
    role: string;
    permissions: TPermission[];
};

export { PermissionList, type TPermission, type TRolePermissions };
