import * as _ts_rest_core from '@ts-rest/core';
import * as zod from 'zod';
import { z } from 'zod';

type ErrorObject = {
    field: string;
    message: string;
    errors?: ErrorObject[];
};

declare const apiContract: {
    roles: {
        createRole: {
            metadata: {
                permissions: {
                    middleware: "create:role"[];
                };
            };
            summary: "Create role";
            method: "POST";
            body: zod.ZodObject<{
                name: zod.ZodString;
                displayName: zod.ZodString;
                permissions: zod.ZodArray<zod.ZodString, "many">;
            }, "strip", zod.ZodTypeAny, {
                name: string;
                permissions: string[];
                displayName: string;
            }, {
                name: string;
                permissions: string[];
                displayName: string;
            }>;
            path: "/api/roles";
            headers: zod.ZodObject<{
                authorization: zod.ZodString;
            }, "strip", zod.ZodTypeAny, {
                authorization: string;
            }, {
                authorization: string;
            }>;
            responses: {
                200: zod.ZodObject<{
                    data: zod.ZodType<{
                        id: string;
                        name: string;
                        displayName: string;
                    }, zod.ZodTypeDef, {
                        id: string;
                        name: string;
                        displayName: string;
                    }> | zod.ZodObject<{}, "strip", zod.ZodTypeAny, {}, {}>;
                }, "strip", zod.ZodTypeAny, {
                    data: {
                        id: string;
                        name: string;
                        displayName: string;
                    } | {};
                }, {
                    data: {
                        id: string;
                        name: string;
                        displayName: string;
                    } | {};
                }>;
                409: zod.ZodObject<{
                    title: zod.ZodString;
                    status: zod.ZodNumber;
                    detail: zod.ZodOptional<zod.ZodString>;
                }, "strip", zod.ZodTypeAny, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }>;
                403: zod.ZodObject<{
                    title: zod.ZodString;
                    status: zod.ZodNumber;
                    detail: zod.ZodOptional<zod.ZodString>;
                    errors: zod.ZodOptional<zod.ZodArray<zod.ZodType<ErrorObject, zod.ZodTypeDef, ErrorObject>, "many">>;
                }, "strip", zod.ZodTypeAny, {
                    status: number;
                    title: string;
                    errors?: ErrorObject[] | undefined;
                    detail?: string | undefined;
                }, {
                    status: number;
                    title: string;
                    errors?: ErrorObject[] | undefined;
                    detail?: string | undefined;
                }>;
                500: zod.ZodObject<{
                    title: zod.ZodString;
                    status: zod.ZodNumber;
                    detail: zod.ZodOptional<zod.ZodString>;
                }, "strip", zod.ZodTypeAny, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }>;
            };
        };
        getRoleById: {
            metadata: {
                permissions: {};
            };
            summary: "Get a role by id";
            method: "GET";
            path: "/api/roles/by/id/:roleId";
            headers: zod.ZodOptional<zod.ZodObject<{
                authorization: zod.ZodString;
            }, "strip", zod.ZodTypeAny, {
                authorization: string;
            }, {
                authorization: string;
            }>>;
            responses: {
                200: zod.ZodObject<{
                    data: zod.ZodType<{
                        id: string;
                        name: string;
                        displayName: string;
                    } | {
                        id: string;
                        createdAt: string;
                        updatedAt: string;
                        name: string;
                        permissions: string[];
                        displayName: string;
                    }, zod.ZodTypeDef, {
                        id: string;
                        name: string;
                        displayName: string;
                    } | {
                        id: string;
                        createdAt: string;
                        updatedAt: string;
                        name: string;
                        permissions: string[];
                        displayName: string;
                    }> | zod.ZodObject<{}, "strip", zod.ZodTypeAny, {}, {}>;
                }, "strip", zod.ZodTypeAny, {
                    data: {
                        id: string;
                        name: string;
                        displayName: string;
                    } | {
                        id: string;
                        createdAt: string;
                        updatedAt: string;
                        name: string;
                        permissions: string[];
                        displayName: string;
                    } | {};
                }, {
                    data: {
                        id: string;
                        name: string;
                        displayName: string;
                    } | {
                        id: string;
                        createdAt: string;
                        updatedAt: string;
                        name: string;
                        permissions: string[];
                        displayName: string;
                    } | {};
                }>;
                404: zod.ZodObject<{
                    title: zod.ZodString;
                    status: zod.ZodNumber;
                    detail: zod.ZodOptional<zod.ZodString>;
                }, "strip", zod.ZodTypeAny, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }>;
                500: zod.ZodObject<{
                    title: zod.ZodString;
                    status: zod.ZodNumber;
                    detail: zod.ZodOptional<zod.ZodString>;
                }, "strip", zod.ZodTypeAny, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }>;
            };
        };
        getRoleByName: {
            metadata: {
                permissions: {};
            };
            summary: "Get a role by name";
            method: "GET";
            path: "/api/roles/by/name/:name";
            headers: zod.ZodOptional<zod.ZodObject<{
                authorization: zod.ZodString;
            }, "strip", zod.ZodTypeAny, {
                authorization: string;
            }, {
                authorization: string;
            }>>;
            responses: {
                200: zod.ZodObject<{
                    data: zod.ZodType<{
                        id: string;
                        name: string;
                        displayName: string;
                    } | {
                        id: string;
                        createdAt: string;
                        updatedAt: string;
                        name: string;
                        permissions: string[];
                        displayName: string;
                    }, zod.ZodTypeDef, {
                        id: string;
                        name: string;
                        displayName: string;
                    } | {
                        id: string;
                        createdAt: string;
                        updatedAt: string;
                        name: string;
                        permissions: string[];
                        displayName: string;
                    }> | zod.ZodObject<{}, "strip", zod.ZodTypeAny, {}, {}>;
                }, "strip", zod.ZodTypeAny, {
                    data: {
                        id: string;
                        name: string;
                        displayName: string;
                    } | {
                        id: string;
                        createdAt: string;
                        updatedAt: string;
                        name: string;
                        permissions: string[];
                        displayName: string;
                    } | {};
                }, {
                    data: {
                        id: string;
                        name: string;
                        displayName: string;
                    } | {
                        id: string;
                        createdAt: string;
                        updatedAt: string;
                        name: string;
                        permissions: string[];
                        displayName: string;
                    } | {};
                }>;
                404: zod.ZodObject<{
                    title: zod.ZodString;
                    status: zod.ZodNumber;
                    detail: zod.ZodOptional<zod.ZodString>;
                }, "strip", zod.ZodTypeAny, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }>;
                500: zod.ZodObject<{
                    title: zod.ZodString;
                    status: zod.ZodNumber;
                    detail: zod.ZodOptional<zod.ZodString>;
                }, "strip", zod.ZodTypeAny, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }>;
            };
        };
        deleteRoleById: {
            metadata: {
                permissions: "delete:role";
            };
            summary: "Delete role by id";
            method: "DELETE";
            body: zod.ZodObject<{
                replaceWithRoleId: zod.ZodOptional<zod.ZodString>;
            }, "strip", zod.ZodTypeAny, {
                replaceWithRoleId?: string | undefined;
            }, {
                replaceWithRoleId?: string | undefined;
            }>;
            path: "/api/roles/by/id/:roleId";
            headers: zod.ZodObject<{
                authorization: zod.ZodString;
            }, "strip", zod.ZodTypeAny, {
                authorization: string;
            }, {
                authorization: string;
            }>;
            responses: {
                204: zod.ZodObject<{}, "strip", zod.ZodTypeAny, {}, {}>;
                400: zod.ZodObject<{
                    title: zod.ZodString;
                    status: zod.ZodNumber;
                    detail: zod.ZodOptional<zod.ZodString>;
                    errors: zod.ZodOptional<zod.ZodArray<zod.ZodType<ErrorObject, zod.ZodTypeDef, ErrorObject>, "many">>;
                }, "strip", zod.ZodTypeAny, {
                    status: number;
                    title: string;
                    errors?: ErrorObject[] | undefined;
                    detail?: string | undefined;
                }, {
                    status: number;
                    title: string;
                    errors?: ErrorObject[] | undefined;
                    detail?: string | undefined;
                }>;
                403: zod.ZodObject<{
                    title: zod.ZodString;
                    status: zod.ZodNumber;
                    detail: zod.ZodOptional<zod.ZodString>;
                    errors: zod.ZodOptional<zod.ZodArray<zod.ZodType<ErrorObject, zod.ZodTypeDef, ErrorObject>, "many">>;
                }, "strip", zod.ZodTypeAny, {
                    status: number;
                    title: string;
                    errors?: ErrorObject[] | undefined;
                    detail?: string | undefined;
                }, {
                    status: number;
                    title: string;
                    errors?: ErrorObject[] | undefined;
                    detail?: string | undefined;
                }>;
                409: zod.ZodObject<{
                    title: zod.ZodString;
                    status: zod.ZodNumber;
                    detail: zod.ZodOptional<zod.ZodString>;
                }, "strip", zod.ZodTypeAny, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }>;
                500: zod.ZodObject<{
                    title: zod.ZodString;
                    status: zod.ZodNumber;
                    detail: zod.ZodOptional<zod.ZodString>;
                }, "strip", zod.ZodTypeAny, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }>;
            };
        };
        editRoleById: {
            metadata: {
                permissions: "update:role";
            };
            summary: "Edit role by id";
            method: "POST";
            body: zod.ZodObject<{
                name: zod.ZodOptional<zod.ZodString>;
                displayName: zod.ZodOptional<zod.ZodString>;
                permissions: zod.ZodOptional<zod.ZodArray<zod.ZodString, "many">>;
            }, "strip", zod.ZodTypeAny, {
                name?: string | undefined;
                permissions?: string[] | undefined;
                displayName?: string | undefined;
            }, {
                name?: string | undefined;
                permissions?: string[] | undefined;
                displayName?: string | undefined;
            }>;
            path: "/api/roles/by/id/:roleId/edit";
            headers: zod.ZodObject<{
                authorization: zod.ZodString;
            }, "strip", zod.ZodTypeAny, {
                authorization: string;
            }, {
                authorization: string;
            }>;
            responses: {
                200: zod.ZodObject<{
                    data: zod.ZodType<{
                        id: string;
                        name: string;
                        displayName: string;
                    }, zod.ZodTypeDef, {
                        id: string;
                        name: string;
                        displayName: string;
                    }> | zod.ZodObject<{}, "strip", zod.ZodTypeAny, {}, {}>;
                }, "strip", zod.ZodTypeAny, {
                    data: {
                        id: string;
                        name: string;
                        displayName: string;
                    } | {};
                }, {
                    data: {
                        id: string;
                        name: string;
                        displayName: string;
                    } | {};
                }>;
                404: zod.ZodObject<{
                    title: zod.ZodString;
                    status: zod.ZodNumber;
                    detail: zod.ZodOptional<zod.ZodString>;
                }, "strip", zod.ZodTypeAny, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }>;
                409: zod.ZodObject<{
                    title: zod.ZodString;
                    status: zod.ZodNumber;
                    detail: zod.ZodOptional<zod.ZodString>;
                }, "strip", zod.ZodTypeAny, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }>;
                403: zod.ZodObject<{
                    title: zod.ZodString;
                    status: zod.ZodNumber;
                    detail: zod.ZodOptional<zod.ZodString>;
                    errors: zod.ZodOptional<zod.ZodArray<zod.ZodType<ErrorObject, zod.ZodTypeDef, ErrorObject>, "many">>;
                }, "strip", zod.ZodTypeAny, {
                    status: number;
                    title: string;
                    errors?: ErrorObject[] | undefined;
                    detail?: string | undefined;
                }, {
                    status: number;
                    title: string;
                    errors?: ErrorObject[] | undefined;
                    detail?: string | undefined;
                }>;
                500: zod.ZodObject<{
                    title: zod.ZodString;
                    status: zod.ZodNumber;
                    detail: zod.ZodOptional<zod.ZodString>;
                }, "strip", zod.ZodTypeAny, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }>;
            };
        };
        getRoles: {
            metadata: {
                permissions: {};
            };
            query: zod.ZodObject<{
                page: zod.ZodOptional<zod.ZodString>;
                limit: zod.ZodOptional<zod.ZodString>;
                search: zod.ZodOptional<zod.ZodString>;
            }, "strip", zod.ZodTypeAny, {
                search?: string | undefined;
                limit?: string | undefined;
                page?: string | undefined;
            }, {
                search?: string | undefined;
                limit?: string | undefined;
                page?: string | undefined;
            }>;
            summary: "Get roles";
            method: "GET";
            path: "/api/roles";
            headers: zod.ZodObject<{
                authorization: zod.ZodString;
            }, "strip", zod.ZodTypeAny, {
                authorization: string;
            }, {
                authorization: string;
            }>;
            responses: {
                200: zod.ZodObject<{
                    data: zod.ZodType<{
                        id: string;
                        name: string;
                        displayName: string;
                    }[], zod.ZodTypeDef, {
                        id: string;
                        name: string;
                        displayName: string;
                    }[]> | zod.ZodObject<{}, "strip", zod.ZodTypeAny, {}, {}>;
                }, "strip", zod.ZodTypeAny, {
                    data: {
                        id: string;
                        name: string;
                        displayName: string;
                    }[] | {};
                }, {
                    data: {
                        id: string;
                        name: string;
                        displayName: string;
                    }[] | {};
                }>;
                403: zod.ZodObject<{
                    title: zod.ZodString;
                    status: zod.ZodNumber;
                    detail: zod.ZodOptional<zod.ZodString>;
                    errors: zod.ZodOptional<zod.ZodArray<zod.ZodType<ErrorObject, zod.ZodTypeDef, ErrorObject>, "many">>;
                }, "strip", zod.ZodTypeAny, {
                    status: number;
                    title: string;
                    errors?: ErrorObject[] | undefined;
                    detail?: string | undefined;
                }, {
                    status: number;
                    title: string;
                    errors?: ErrorObject[] | undefined;
                    detail?: string | undefined;
                }>;
                500: zod.ZodObject<{
                    title: zod.ZodString;
                    status: zod.ZodNumber;
                    detail: zod.ZodOptional<zod.ZodString>;
                }, "strip", zod.ZodTypeAny, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }>;
            };
        };
    };
    users: {
        login: {
            metadata: {
                isPublic: boolean;
                permissions: {};
            };
            summary: "Login a user";
            method: "POST";
            body: zod.ZodObject<{
                email: zod.ZodString;
                password: zod.ZodString;
            }, "strict", zod.ZodTypeAny, {
                email: string;
                password: string;
            }, {
                email: string;
                password: string;
            }>;
            path: "/api/users/login";
            responses: {
                200: zod.ZodObject<{
                    data: zod.ZodType<{
                        accessToken: string;
                        refreshToken: string;
                        expiresIn: number;
                    }, zod.ZodTypeDef, {
                        accessToken: string;
                        refreshToken: string;
                        expiresIn: number;
                    }> | zod.ZodObject<{}, "strip", zod.ZodTypeAny, {}, {}>;
                }, "strip", zod.ZodTypeAny, {
                    data: {
                        accessToken: string;
                        refreshToken: string;
                        expiresIn: number;
                    } | {};
                }, {
                    data: {
                        accessToken: string;
                        refreshToken: string;
                        expiresIn: number;
                    } | {};
                }>;
                401: zod.ZodObject<{
                    title: zod.ZodString;
                    status: zod.ZodNumber;
                    detail: zod.ZodOptional<zod.ZodString>;
                }, "strip", zod.ZodTypeAny, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }>;
                409: zod.ZodObject<{
                    title: zod.ZodString;
                    status: zod.ZodNumber;
                    detail: zod.ZodOptional<zod.ZodString>;
                }, "strip", zod.ZodTypeAny, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }>;
                403: zod.ZodObject<{
                    title: zod.ZodString;
                    status: zod.ZodNumber;
                    detail: zod.ZodOptional<zod.ZodString>;
                    errors: zod.ZodOptional<zod.ZodArray<zod.ZodType<ErrorObject, zod.ZodTypeDef, ErrorObject>, "many">>;
                }, "strip", zod.ZodTypeAny, {
                    status: number;
                    title: string;
                    errors?: ErrorObject[] | undefined;
                    detail?: string | undefined;
                }, {
                    status: number;
                    title: string;
                    errors?: ErrorObject[] | undefined;
                    detail?: string | undefined;
                }>;
                500: zod.ZodObject<{
                    title: zod.ZodString;
                    status: zod.ZodNumber;
                    detail: zod.ZodOptional<zod.ZodString>;
                }, "strip", zod.ZodTypeAny, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }>;
            };
        };
        logout: {
            metadata: {
                permissions: {};
            };
            summary: "Logout the current user";
            method: "POST";
            body: zod.ZodNullable<zod.ZodObject<{}, "strip", zod.ZodTypeAny, {}, {}>>;
            path: "/api/users/logout";
            headers: zod.ZodObject<{
                authorization: zod.ZodString;
            }, "strip", zod.ZodTypeAny, {
                authorization: string;
            }, {
                authorization: string;
            }>;
            responses: {
                200: zod.ZodObject<{
                    data: zod.ZodType<null, zod.ZodTypeDef, null> | zod.ZodObject<{}, "strip", zod.ZodTypeAny, {}, {}>;
                }, "strip", zod.ZodTypeAny, {
                    data: {} | null;
                }, {
                    data: {} | null;
                }>;
                500: zod.ZodObject<{
                    title: zod.ZodString;
                    status: zod.ZodNumber;
                    detail: zod.ZodOptional<zod.ZodString>;
                }, "strip", zod.ZodTypeAny, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }>;
            };
        };
        refreshAccessToken: {
            metadata: {
                isPublic: boolean;
                permissions: {};
            };
            summary: "Refresh the access token";
            method: "POST";
            body: zod.ZodObject<{
                refreshToken: zod.ZodString;
            }, "strip", zod.ZodTypeAny, {
                refreshToken: string;
            }, {
                refreshToken: string;
            }>;
            path: "/api/users/token/refresh";
            responses: {
                200: zod.ZodObject<{
                    data: zod.ZodType<{
                        accessToken: string;
                        refreshToken: string;
                        expiresIn: number;
                    }, zod.ZodTypeDef, {
                        accessToken: string;
                        refreshToken: string;
                        expiresIn: number;
                    }> | zod.ZodObject<{}, "strip", zod.ZodTypeAny, {}, {}>;
                }, "strip", zod.ZodTypeAny, {
                    data: {
                        accessToken: string;
                        refreshToken: string;
                        expiresIn: number;
                    } | {};
                }, {
                    data: {
                        accessToken: string;
                        refreshToken: string;
                        expiresIn: number;
                    } | {};
                }>;
                404: zod.ZodObject<{
                    title: zod.ZodString;
                    status: zod.ZodNumber;
                    detail: zod.ZodOptional<zod.ZodString>;
                }, "strip", zod.ZodTypeAny, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }>;
                500: zod.ZodObject<{
                    title: zod.ZodString;
                    status: zod.ZodNumber;
                    detail: zod.ZodOptional<zod.ZodString>;
                }, "strip", zod.ZodTypeAny, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }>;
            };
        };
        createUser: {
            metadata: {
                isPublic: boolean;
                permissions: {};
            };
            summary: "Create a new user, registration";
            method: "POST";
            body: zod.ZodObject<{
                username: zod.ZodString;
                password: zod.ZodString;
                email: zod.ZodString;
            }, "strict", zod.ZodTypeAny, {
                username: string;
                email: string;
                password: string;
            }, {
                username: string;
                email: string;
                password: string;
            }>;
            path: "/api/users";
            responses: {
                200: zod.ZodObject<{
                    data: zod.ZodType<{
                        username: string;
                        roleId: string;
                        isVerified: boolean;
                        isDeleted: boolean;
                        isSuspended: boolean;
                        userId: string;
                        email: string;
                        storageId: string;
                        createdAt?: Date | undefined;
                        updatedAt?: Date | undefined;
                        avatarId?: string | undefined;
                        newEmail?: string | undefined;
                        passwordChangedAt?: Date | undefined;
                    }, zod.ZodTypeDef, {
                        username: string;
                        roleId: string;
                        isVerified: boolean;
                        isDeleted: boolean;
                        isSuspended: boolean;
                        userId: string;
                        email: string;
                        storageId: string;
                        createdAt?: Date | undefined;
                        updatedAt?: Date | undefined;
                        avatarId?: string | undefined;
                        newEmail?: string | undefined;
                        passwordChangedAt?: Date | undefined;
                    }> | zod.ZodObject<{}, "strip", zod.ZodTypeAny, {}, {}>;
                }, "strip", zod.ZodTypeAny, {
                    data: {
                        username: string;
                        roleId: string;
                        isVerified: boolean;
                        isDeleted: boolean;
                        isSuspended: boolean;
                        userId: string;
                        email: string;
                        storageId: string;
                        createdAt?: Date | undefined;
                        updatedAt?: Date | undefined;
                        avatarId?: string | undefined;
                        newEmail?: string | undefined;
                        passwordChangedAt?: Date | undefined;
                    } | {};
                }, {
                    data: {
                        username: string;
                        roleId: string;
                        isVerified: boolean;
                        isDeleted: boolean;
                        isSuspended: boolean;
                        userId: string;
                        email: string;
                        storageId: string;
                        createdAt?: Date | undefined;
                        updatedAt?: Date | undefined;
                        avatarId?: string | undefined;
                        newEmail?: string | undefined;
                        passwordChangedAt?: Date | undefined;
                    } | {};
                }>;
                409: zod.ZodObject<{
                    title: zod.ZodString;
                    status: zod.ZodNumber;
                    detail: zod.ZodOptional<zod.ZodString>;
                }, "strip", zod.ZodTypeAny, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }>;
                403: zod.ZodObject<{
                    title: zod.ZodString;
                    status: zod.ZodNumber;
                    detail: zod.ZodOptional<zod.ZodString>;
                    errors: zod.ZodOptional<zod.ZodArray<zod.ZodType<ErrorObject, zod.ZodTypeDef, ErrorObject>, "many">>;
                }, "strip", zod.ZodTypeAny, {
                    status: number;
                    title: string;
                    errors?: ErrorObject[] | undefined;
                    detail?: string | undefined;
                }, {
                    status: number;
                    title: string;
                    errors?: ErrorObject[] | undefined;
                    detail?: string | undefined;
                }>;
                500: zod.ZodObject<{
                    title: zod.ZodString;
                    status: zod.ZodNumber;
                    detail: zod.ZodOptional<zod.ZodString>;
                }, "strip", zod.ZodTypeAny, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }>;
            };
        };
        editCurrentUser: {
            metadata: {
                permissions: "update:user:own";
            };
            summary: "Edit a current user";
            method: "POST";
            body: zod.ZodObject<{
                username: zod.ZodOptional<zod.ZodString>;
                newEmail: zod.ZodOptional<zod.ZodString>;
            }, "strip", zod.ZodTypeAny, {
                username?: string | undefined;
                newEmail?: string | undefined;
            }, {
                username?: string | undefined;
                newEmail?: string | undefined;
            }>;
            path: "/api/users/me/edit";
            headers: zod.ZodObject<{
                authorization: zod.ZodString;
            }, "strip", zod.ZodTypeAny, {
                authorization: string;
            }, {
                authorization: string;
            }>;
            responses: {
                200: zod.ZodObject<{
                    data: zod.ZodType<{
                        username: string;
                        roleId: string;
                        isVerified: boolean;
                        isDeleted: boolean;
                        isSuspended: boolean;
                        userId: string;
                        email: string;
                        storageId: string;
                        createdAt?: Date | undefined;
                        updatedAt?: Date | undefined;
                        avatarId?: string | undefined;
                        newEmail?: string | undefined;
                        passwordChangedAt?: Date | undefined;
                    }, zod.ZodTypeDef, {
                        username: string;
                        roleId: string;
                        isVerified: boolean;
                        isDeleted: boolean;
                        isSuspended: boolean;
                        userId: string;
                        email: string;
                        storageId: string;
                        createdAt?: Date | undefined;
                        updatedAt?: Date | undefined;
                        avatarId?: string | undefined;
                        newEmail?: string | undefined;
                        passwordChangedAt?: Date | undefined;
                    }> | zod.ZodObject<{}, "strip", zod.ZodTypeAny, {}, {}>;
                }, "strip", zod.ZodTypeAny, {
                    data: {
                        username: string;
                        roleId: string;
                        isVerified: boolean;
                        isDeleted: boolean;
                        isSuspended: boolean;
                        userId: string;
                        email: string;
                        storageId: string;
                        createdAt?: Date | undefined;
                        updatedAt?: Date | undefined;
                        avatarId?: string | undefined;
                        newEmail?: string | undefined;
                        passwordChangedAt?: Date | undefined;
                    } | {};
                }, {
                    data: {
                        username: string;
                        roleId: string;
                        isVerified: boolean;
                        isDeleted: boolean;
                        isSuspended: boolean;
                        userId: string;
                        email: string;
                        storageId: string;
                        createdAt?: Date | undefined;
                        updatedAt?: Date | undefined;
                        avatarId?: string | undefined;
                        newEmail?: string | undefined;
                        passwordChangedAt?: Date | undefined;
                    } | {};
                }>;
                404: zod.ZodObject<{
                    title: zod.ZodString;
                    status: zod.ZodNumber;
                    detail: zod.ZodOptional<zod.ZodString>;
                }, "strip", zod.ZodTypeAny, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }>;
                403: zod.ZodObject<{
                    title: zod.ZodString;
                    status: zod.ZodNumber;
                    detail: zod.ZodOptional<zod.ZodString>;
                    errors: zod.ZodOptional<zod.ZodArray<zod.ZodType<ErrorObject, zod.ZodTypeDef, ErrorObject>, "many">>;
                }, "strip", zod.ZodTypeAny, {
                    status: number;
                    title: string;
                    errors?: ErrorObject[] | undefined;
                    detail?: string | undefined;
                }, {
                    status: number;
                    title: string;
                    errors?: ErrorObject[] | undefined;
                    detail?: string | undefined;
                }>;
                409: zod.ZodObject<{
                    title: zod.ZodString;
                    status: zod.ZodNumber;
                    detail: zod.ZodOptional<zod.ZodString>;
                }, "strip", zod.ZodTypeAny, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }>;
                500: zod.ZodObject<{
                    title: zod.ZodString;
                    status: zod.ZodNumber;
                    detail: zod.ZodOptional<zod.ZodString>;
                }, "strip", zod.ZodTypeAny, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }>;
            };
        };
        editUserById: {
            metadata: {
                permissions: "update:user:any";
            };
            summary: "Edit any user";
            method: "POST";
            body: zod.ZodObject<{
                username: zod.ZodOptional<zod.ZodString>;
                email: zod.ZodOptional<zod.ZodString>;
                roleId: zod.ZodOptional<zod.ZodString>;
            }, "strip", zod.ZodTypeAny, {
                username?: string | undefined;
                roleId?: string | undefined;
                email?: string | undefined;
            }, {
                username?: string | undefined;
                roleId?: string | undefined;
                email?: string | undefined;
            }>;
            path: "/api/users/by/id/:userId/edit";
            headers: zod.ZodObject<{
                authorization: zod.ZodString;
            }, "strip", zod.ZodTypeAny, {
                authorization: string;
            }, {
                authorization: string;
            }>;
            responses: {
                200: zod.ZodObject<{
                    data: zod.ZodType<{
                        username: string;
                        roleId: string;
                        isVerified: boolean;
                        isDeleted: boolean;
                        isSuspended: boolean;
                        userId: string;
                        email: string;
                        storageId: string;
                        createdAt?: Date | undefined;
                        updatedAt?: Date | undefined;
                        avatarId?: string | undefined;
                        newEmail?: string | undefined;
                        passwordChangedAt?: Date | undefined;
                    }, zod.ZodTypeDef, {
                        username: string;
                        roleId: string;
                        isVerified: boolean;
                        isDeleted: boolean;
                        isSuspended: boolean;
                        userId: string;
                        email: string;
                        storageId: string;
                        createdAt?: Date | undefined;
                        updatedAt?: Date | undefined;
                        avatarId?: string | undefined;
                        newEmail?: string | undefined;
                        passwordChangedAt?: Date | undefined;
                    }> | zod.ZodObject<{}, "strip", zod.ZodTypeAny, {}, {}>;
                }, "strip", zod.ZodTypeAny, {
                    data: {
                        username: string;
                        roleId: string;
                        isVerified: boolean;
                        isDeleted: boolean;
                        isSuspended: boolean;
                        userId: string;
                        email: string;
                        storageId: string;
                        createdAt?: Date | undefined;
                        updatedAt?: Date | undefined;
                        avatarId?: string | undefined;
                        newEmail?: string | undefined;
                        passwordChangedAt?: Date | undefined;
                    } | {};
                }, {
                    data: {
                        username: string;
                        roleId: string;
                        isVerified: boolean;
                        isDeleted: boolean;
                        isSuspended: boolean;
                        userId: string;
                        email: string;
                        storageId: string;
                        createdAt?: Date | undefined;
                        updatedAt?: Date | undefined;
                        avatarId?: string | undefined;
                        newEmail?: string | undefined;
                        passwordChangedAt?: Date | undefined;
                    } | {};
                }>;
                403: zod.ZodObject<{
                    title: zod.ZodString;
                    status: zod.ZodNumber;
                    detail: zod.ZodOptional<zod.ZodString>;
                    errors: zod.ZodOptional<zod.ZodArray<zod.ZodType<ErrorObject, zod.ZodTypeDef, ErrorObject>, "many">>;
                }, "strip", zod.ZodTypeAny, {
                    status: number;
                    title: string;
                    errors?: ErrorObject[] | undefined;
                    detail?: string | undefined;
                }, {
                    status: number;
                    title: string;
                    errors?: ErrorObject[] | undefined;
                    detail?: string | undefined;
                }>;
                404: zod.ZodObject<{
                    title: zod.ZodString;
                    status: zod.ZodNumber;
                    detail: zod.ZodOptional<zod.ZodString>;
                }, "strip", zod.ZodTypeAny, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }>;
                409: zod.ZodObject<{
                    title: zod.ZodString;
                    status: zod.ZodNumber;
                    detail: zod.ZodOptional<zod.ZodString>;
                }, "strip", zod.ZodTypeAny, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }>;
                500: zod.ZodObject<{
                    title: zod.ZodString;
                    status: zod.ZodNumber;
                    detail: zod.ZodOptional<zod.ZodString>;
                }, "strip", zod.ZodTypeAny, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }>;
            };
        };
        getCurrentUser: {
            metadata: {
                permissions: "read:user:own";
            };
            summary: "Get the current user";
            method: "GET";
            path: "/api/users/me";
            headers: zod.ZodObject<{
                authorization: zod.ZodString;
            }, "strip", zod.ZodTypeAny, {
                authorization: string;
            }, {
                authorization: string;
            }>;
            responses: {
                200: zod.ZodObject<{
                    data: zod.ZodType<{
                        username: string;
                        roleId: string;
                        isVerified: boolean;
                        isDeleted: boolean;
                        isSuspended: boolean;
                        userId: string;
                        email: string;
                        storageId: string;
                        createdAt?: Date | undefined;
                        updatedAt?: Date | undefined;
                        avatarId?: string | undefined;
                        newEmail?: string | undefined;
                        passwordChangedAt?: Date | undefined;
                    }, zod.ZodTypeDef, {
                        username: string;
                        roleId: string;
                        isVerified: boolean;
                        isDeleted: boolean;
                        isSuspended: boolean;
                        userId: string;
                        email: string;
                        storageId: string;
                        createdAt?: Date | undefined;
                        updatedAt?: Date | undefined;
                        avatarId?: string | undefined;
                        newEmail?: string | undefined;
                        passwordChangedAt?: Date | undefined;
                    }> | zod.ZodObject<{}, "strip", zod.ZodTypeAny, {}, {}>;
                }, "strip", zod.ZodTypeAny, {
                    data: {
                        username: string;
                        roleId: string;
                        isVerified: boolean;
                        isDeleted: boolean;
                        isSuspended: boolean;
                        userId: string;
                        email: string;
                        storageId: string;
                        createdAt?: Date | undefined;
                        updatedAt?: Date | undefined;
                        avatarId?: string | undefined;
                        newEmail?: string | undefined;
                        passwordChangedAt?: Date | undefined;
                    } | {};
                }, {
                    data: {
                        username: string;
                        roleId: string;
                        isVerified: boolean;
                        isDeleted: boolean;
                        isSuspended: boolean;
                        userId: string;
                        email: string;
                        storageId: string;
                        createdAt?: Date | undefined;
                        updatedAt?: Date | undefined;
                        avatarId?: string | undefined;
                        newEmail?: string | undefined;
                        passwordChangedAt?: Date | undefined;
                    } | {};
                }>;
                500: zod.ZodObject<{
                    title: zod.ZodString;
                    status: zod.ZodNumber;
                    detail: zod.ZodOptional<zod.ZodString>;
                }, "strip", zod.ZodTypeAny, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }>;
            };
        };
        getUserByUsername: {
            metadata: {
                permissions: {};
            };
            summary: "Get a user by username";
            method: "GET";
            path: "/api/users/by/username/:username";
            headers: zod.ZodObject<{
                authorization: zod.ZodString;
            }, "strip", zod.ZodTypeAny, {
                authorization: string;
            }, {
                authorization: string;
            }>;
            responses: {
                200: zod.ZodObject<{
                    data: zod.ZodType<{
                        username: string;
                        roleId: string;
                        isVerified: boolean;
                        isDeleted: boolean;
                        isSuspended: boolean;
                        createdAt?: Date | undefined;
                        avatarId?: string | undefined;
                    } | {
                        username: string;
                        roleId: string;
                        isVerified: boolean;
                        isDeleted: boolean;
                        isSuspended: boolean;
                        userId: string;
                        email: string;
                        storageId: string;
                        createdAt?: Date | undefined;
                        updatedAt?: Date | undefined;
                        avatarId?: string | undefined;
                        newEmail?: string | undefined;
                        passwordChangedAt?: Date | undefined;
                    }, zod.ZodTypeDef, {
                        username: string;
                        roleId: string;
                        isVerified: boolean;
                        isDeleted: boolean;
                        isSuspended: boolean;
                        createdAt?: Date | undefined;
                        avatarId?: string | undefined;
                    } | {
                        username: string;
                        roleId: string;
                        isVerified: boolean;
                        isDeleted: boolean;
                        isSuspended: boolean;
                        userId: string;
                        email: string;
                        storageId: string;
                        createdAt?: Date | undefined;
                        updatedAt?: Date | undefined;
                        avatarId?: string | undefined;
                        newEmail?: string | undefined;
                        passwordChangedAt?: Date | undefined;
                    }> | zod.ZodObject<{}, "strip", zod.ZodTypeAny, {}, {}>;
                }, "strip", zod.ZodTypeAny, {
                    data: {
                        username: string;
                        roleId: string;
                        isVerified: boolean;
                        isDeleted: boolean;
                        isSuspended: boolean;
                        createdAt?: Date | undefined;
                        avatarId?: string | undefined;
                    } | {
                        username: string;
                        roleId: string;
                        isVerified: boolean;
                        isDeleted: boolean;
                        isSuspended: boolean;
                        userId: string;
                        email: string;
                        storageId: string;
                        createdAt?: Date | undefined;
                        updatedAt?: Date | undefined;
                        avatarId?: string | undefined;
                        newEmail?: string | undefined;
                        passwordChangedAt?: Date | undefined;
                    } | {};
                }, {
                    data: {
                        username: string;
                        roleId: string;
                        isVerified: boolean;
                        isDeleted: boolean;
                        isSuspended: boolean;
                        createdAt?: Date | undefined;
                        avatarId?: string | undefined;
                    } | {
                        username: string;
                        roleId: string;
                        isVerified: boolean;
                        isDeleted: boolean;
                        isSuspended: boolean;
                        userId: string;
                        email: string;
                        storageId: string;
                        createdAt?: Date | undefined;
                        updatedAt?: Date | undefined;
                        avatarId?: string | undefined;
                        newEmail?: string | undefined;
                        passwordChangedAt?: Date | undefined;
                    } | {};
                }>;
                404: zod.ZodObject<{
                    title: zod.ZodString;
                    status: zod.ZodNumber;
                    detail: zod.ZodOptional<zod.ZodString>;
                }, "strip", zod.ZodTypeAny, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }>;
                500: zod.ZodObject<{
                    title: zod.ZodString;
                    status: zod.ZodNumber;
                    detail: zod.ZodOptional<zod.ZodString>;
                }, "strip", zod.ZodTypeAny, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }>;
            };
        };
        getUserById: {
            metadata: {
                permissions: {};
            };
            summary: "Get a post by id";
            method: "GET";
            path: "/api/users/by/id/:userId";
            headers: zod.ZodObject<{
                authorization: zod.ZodString;
            }, "strip", zod.ZodTypeAny, {
                authorization: string;
            }, {
                authorization: string;
            }>;
            responses: {
                200: zod.ZodObject<{
                    data: zod.ZodType<{
                        username: string;
                        roleId: string;
                        isVerified: boolean;
                        isDeleted: boolean;
                        isSuspended: boolean;
                        createdAt?: Date | undefined;
                        avatarId?: string | undefined;
                    } | {
                        username: string;
                        roleId: string;
                        isVerified: boolean;
                        isDeleted: boolean;
                        isSuspended: boolean;
                        userId: string;
                        email: string;
                        storageId: string;
                        createdAt?: Date | undefined;
                        updatedAt?: Date | undefined;
                        avatarId?: string | undefined;
                        newEmail?: string | undefined;
                        passwordChangedAt?: Date | undefined;
                    }, zod.ZodTypeDef, {
                        username: string;
                        roleId: string;
                        isVerified: boolean;
                        isDeleted: boolean;
                        isSuspended: boolean;
                        createdAt?: Date | undefined;
                        avatarId?: string | undefined;
                    } | {
                        username: string;
                        roleId: string;
                        isVerified: boolean;
                        isDeleted: boolean;
                        isSuspended: boolean;
                        userId: string;
                        email: string;
                        storageId: string;
                        createdAt?: Date | undefined;
                        updatedAt?: Date | undefined;
                        avatarId?: string | undefined;
                        newEmail?: string | undefined;
                        passwordChangedAt?: Date | undefined;
                    }> | zod.ZodObject<{}, "strip", zod.ZodTypeAny, {}, {}>;
                }, "strip", zod.ZodTypeAny, {
                    data: {
                        username: string;
                        roleId: string;
                        isVerified: boolean;
                        isDeleted: boolean;
                        isSuspended: boolean;
                        createdAt?: Date | undefined;
                        avatarId?: string | undefined;
                    } | {
                        username: string;
                        roleId: string;
                        isVerified: boolean;
                        isDeleted: boolean;
                        isSuspended: boolean;
                        userId: string;
                        email: string;
                        storageId: string;
                        createdAt?: Date | undefined;
                        updatedAt?: Date | undefined;
                        avatarId?: string | undefined;
                        newEmail?: string | undefined;
                        passwordChangedAt?: Date | undefined;
                    } | {};
                }, {
                    data: {
                        username: string;
                        roleId: string;
                        isVerified: boolean;
                        isDeleted: boolean;
                        isSuspended: boolean;
                        createdAt?: Date | undefined;
                        avatarId?: string | undefined;
                    } | {
                        username: string;
                        roleId: string;
                        isVerified: boolean;
                        isDeleted: boolean;
                        isSuspended: boolean;
                        userId: string;
                        email: string;
                        storageId: string;
                        createdAt?: Date | undefined;
                        updatedAt?: Date | undefined;
                        avatarId?: string | undefined;
                        newEmail?: string | undefined;
                        passwordChangedAt?: Date | undefined;
                    } | {};
                }>;
                404: zod.ZodObject<{
                    title: zod.ZodString;
                    status: zod.ZodNumber;
                    detail: zod.ZodOptional<zod.ZodString>;
                }, "strip", zod.ZodTypeAny, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }>;
                500: zod.ZodObject<{
                    title: zod.ZodString;
                    status: zod.ZodNumber;
                    detail: zod.ZodOptional<zod.ZodString>;
                }, "strip", zod.ZodTypeAny, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }>;
            };
        };
        verifyNewEmail: {
            metadata: {
                permissions: {};
            };
            summary: "Verify a new email";
            method: "PATCH";
            body: zod.ZodNullable<zod.ZodObject<{}, "strip", zod.ZodTypeAny, {}, {}>>;
            path: "/api/users/verify-email/:token";
            responses: {
                204: zod.ZodObject<{
                    data: zod.ZodType<null, zod.ZodTypeDef, null> | zod.ZodObject<{}, "strip", zod.ZodTypeAny, {}, {}>;
                }, "strip", zod.ZodTypeAny, {
                    data: {} | null;
                }, {
                    data: {} | null;
                }>;
                404: zod.ZodObject<{
                    title: zod.ZodString;
                    status: zod.ZodNumber;
                    detail: zod.ZodOptional<zod.ZodString>;
                }, "strip", zod.ZodTypeAny, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }>;
                409: zod.ZodObject<{
                    title: zod.ZodString;
                    status: zod.ZodNumber;
                    detail: zod.ZodOptional<zod.ZodString>;
                }, "strip", zod.ZodTypeAny, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }>;
                500: zod.ZodObject<{
                    title: zod.ZodString;
                    status: zod.ZodNumber;
                    detail: zod.ZodOptional<zod.ZodString>;
                }, "strip", zod.ZodTypeAny, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }>;
            };
        };
    };
    members: {
        getCurrentMember: {
            metadata: {
                permissions: "read:memberConfidential:own";
            };
            summary: "Get the current member";
            method: "GET";
            path: "/api/members/me";
            headers: zod.ZodObject<{
                authorization: zod.ZodString;
            }, "strip", zod.ZodTypeAny, {
                authorization: string;
            }, {
                authorization: string;
            }>;
            responses: {
                200: zod.ZodObject<{
                    data: zod.ZodType<{
                        id: string;
                        createdAt: Date;
                        updatedAt: Date;
                        userId: string;
                        reputation: number;
                        issuesCount: number;
                        repliesCount: number;
                        likesGiven: number;
                        solvedCount: number;
                        reportsCount: number;
                        reportedOwnIssuesCount: number;
                        reportedOwnRepliesCount: number;
                    }, zod.ZodTypeDef, {
                        id: string;
                        createdAt: Date;
                        updatedAt: Date;
                        userId: string;
                        reputation: number;
                        issuesCount: number;
                        repliesCount: number;
                        likesGiven: number;
                        solvedCount: number;
                        reportsCount: number;
                        reportedOwnIssuesCount: number;
                        reportedOwnRepliesCount: number;
                    }> | zod.ZodObject<{}, "strip", zod.ZodTypeAny, {}, {}>;
                }, "strip", zod.ZodTypeAny, {
                    data: {
                        id: string;
                        createdAt: Date;
                        updatedAt: Date;
                        userId: string;
                        reputation: number;
                        issuesCount: number;
                        repliesCount: number;
                        likesGiven: number;
                        solvedCount: number;
                        reportsCount: number;
                        reportedOwnIssuesCount: number;
                        reportedOwnRepliesCount: number;
                    } | {};
                }, {
                    data: {
                        id: string;
                        createdAt: Date;
                        updatedAt: Date;
                        userId: string;
                        reputation: number;
                        issuesCount: number;
                        repliesCount: number;
                        likesGiven: number;
                        solvedCount: number;
                        reportsCount: number;
                        reportedOwnIssuesCount: number;
                        reportedOwnRepliesCount: number;
                    } | {};
                }>;
                500: zod.ZodObject<{
                    title: zod.ZodString;
                    status: zod.ZodNumber;
                    detail: zod.ZodOptional<zod.ZodString>;
                }, "strip", zod.ZodTypeAny, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }>;
            };
        };
        geMemberByUsername: {
            metadata: {
                isPublic: boolean;
                permissions: {};
            };
            summary: "Get a member by username";
            method: "GET";
            path: "/api/members/by/username/:username";
            headers: zod.ZodOptional<zod.ZodObject<{
                authorization: zod.ZodString;
            }, "strip", zod.ZodTypeAny, {
                authorization: string;
            }, {
                authorization: string;
            }>>;
            responses: {
                200: zod.ZodObject<{
                    data: zod.ZodType<{
                        id: string;
                        createdAt: Date;
                        reputation: number;
                        issuesCount: number;
                        repliesCount: number;
                        likesGiven: number;
                        solvedCount: number;
                    } | {
                        id: string;
                        createdAt: Date;
                        updatedAt: Date;
                        userId: string;
                        reputation: number;
                        issuesCount: number;
                        repliesCount: number;
                        likesGiven: number;
                        solvedCount: number;
                        reportsCount: number;
                        reportedOwnIssuesCount: number;
                        reportedOwnRepliesCount: number;
                    }, zod.ZodTypeDef, {
                        id: string;
                        createdAt: Date;
                        reputation: number;
                        issuesCount: number;
                        repliesCount: number;
                        likesGiven: number;
                        solvedCount: number;
                    } | {
                        id: string;
                        createdAt: Date;
                        updatedAt: Date;
                        userId: string;
                        reputation: number;
                        issuesCount: number;
                        repliesCount: number;
                        likesGiven: number;
                        solvedCount: number;
                        reportsCount: number;
                        reportedOwnIssuesCount: number;
                        reportedOwnRepliesCount: number;
                    }> | zod.ZodObject<{}, "strip", zod.ZodTypeAny, {}, {}>;
                }, "strip", zod.ZodTypeAny, {
                    data: {
                        id: string;
                        createdAt: Date;
                        reputation: number;
                        issuesCount: number;
                        repliesCount: number;
                        likesGiven: number;
                        solvedCount: number;
                    } | {
                        id: string;
                        createdAt: Date;
                        updatedAt: Date;
                        userId: string;
                        reputation: number;
                        issuesCount: number;
                        repliesCount: number;
                        likesGiven: number;
                        solvedCount: number;
                        reportsCount: number;
                        reportedOwnIssuesCount: number;
                        reportedOwnRepliesCount: number;
                    } | {};
                }, {
                    data: {
                        id: string;
                        createdAt: Date;
                        reputation: number;
                        issuesCount: number;
                        repliesCount: number;
                        likesGiven: number;
                        solvedCount: number;
                    } | {
                        id: string;
                        createdAt: Date;
                        updatedAt: Date;
                        userId: string;
                        reputation: number;
                        issuesCount: number;
                        repliesCount: number;
                        likesGiven: number;
                        solvedCount: number;
                        reportsCount: number;
                        reportedOwnIssuesCount: number;
                        reportedOwnRepliesCount: number;
                    } | {};
                }>;
                404: zod.ZodObject<{
                    title: zod.ZodString;
                    status: zod.ZodNumber;
                    detail: zod.ZodOptional<zod.ZodString>;
                }, "strip", zod.ZodTypeAny, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }>;
                500: zod.ZodObject<{
                    title: zod.ZodString;
                    status: zod.ZodNumber;
                    detail: zod.ZodOptional<zod.ZodString>;
                }, "strip", zod.ZodTypeAny, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }>;
            };
        };
        getMemberById: {
            metadata: {
                isPublic: boolean;
                permissions: {};
            };
            summary: "Get a member by id";
            method: "GET";
            path: "/api/members/by/id/:memberId";
            headers: zod.ZodOptional<zod.ZodObject<{
                authorization: zod.ZodString;
            }, "strip", zod.ZodTypeAny, {
                authorization: string;
            }, {
                authorization: string;
            }>>;
            responses: {
                200: zod.ZodObject<{
                    data: zod.ZodType<{
                        id: string;
                        createdAt: Date;
                        reputation: number;
                        issuesCount: number;
                        repliesCount: number;
                        likesGiven: number;
                        solvedCount: number;
                    } | {
                        id: string;
                        createdAt: Date;
                        updatedAt: Date;
                        userId: string;
                        reputation: number;
                        issuesCount: number;
                        repliesCount: number;
                        likesGiven: number;
                        solvedCount: number;
                        reportsCount: number;
                        reportedOwnIssuesCount: number;
                        reportedOwnRepliesCount: number;
                    }, zod.ZodTypeDef, {
                        id: string;
                        createdAt: Date;
                        reputation: number;
                        issuesCount: number;
                        repliesCount: number;
                        likesGiven: number;
                        solvedCount: number;
                    } | {
                        id: string;
                        createdAt: Date;
                        updatedAt: Date;
                        userId: string;
                        reputation: number;
                        issuesCount: number;
                        repliesCount: number;
                        likesGiven: number;
                        solvedCount: number;
                        reportsCount: number;
                        reportedOwnIssuesCount: number;
                        reportedOwnRepliesCount: number;
                    }> | zod.ZodObject<{}, "strip", zod.ZodTypeAny, {}, {}>;
                }, "strip", zod.ZodTypeAny, {
                    data: {
                        id: string;
                        createdAt: Date;
                        reputation: number;
                        issuesCount: number;
                        repliesCount: number;
                        likesGiven: number;
                        solvedCount: number;
                    } | {
                        id: string;
                        createdAt: Date;
                        updatedAt: Date;
                        userId: string;
                        reputation: number;
                        issuesCount: number;
                        repliesCount: number;
                        likesGiven: number;
                        solvedCount: number;
                        reportsCount: number;
                        reportedOwnIssuesCount: number;
                        reportedOwnRepliesCount: number;
                    } | {};
                }, {
                    data: {
                        id: string;
                        createdAt: Date;
                        reputation: number;
                        issuesCount: number;
                        repliesCount: number;
                        likesGiven: number;
                        solvedCount: number;
                    } | {
                        id: string;
                        createdAt: Date;
                        updatedAt: Date;
                        userId: string;
                        reputation: number;
                        issuesCount: number;
                        repliesCount: number;
                        likesGiven: number;
                        solvedCount: number;
                        reportsCount: number;
                        reportedOwnIssuesCount: number;
                        reportedOwnRepliesCount: number;
                    } | {};
                }>;
                404: zod.ZodObject<{
                    title: zod.ZodString;
                    status: zod.ZodNumber;
                    detail: zod.ZodOptional<zod.ZodString>;
                }, "strip", zod.ZodTypeAny, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }>;
                500: zod.ZodObject<{
                    title: zod.ZodString;
                    status: zod.ZodNumber;
                    detail: zod.ZodOptional<zod.ZodString>;
                }, "strip", zod.ZodTypeAny, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }>;
            };
        };
        getMembers: {
            metadata: {
                isPublic: boolean;
            };
            query: zod.ZodObject<{
                page: zod.ZodOptional<zod.ZodString>;
                limit: zod.ZodOptional<zod.ZodString>;
                search: zod.ZodOptional<zod.ZodString>;
            }, "strip", zod.ZodTypeAny, {
                search?: string | undefined;
                limit?: string | undefined;
                page?: string | undefined;
            }, {
                search?: string | undefined;
                limit?: string | undefined;
                page?: string | undefined;
            }>;
            summary: "Get all members";
            method: "GET";
            path: "/api/members";
            headers: zod.ZodOptional<zod.ZodObject<{
                authorization: zod.ZodString;
            }, "strip", zod.ZodTypeAny, {
                authorization: string;
            }, {
                authorization: string;
            }>>;
            responses: {
                200: zod.ZodObject<{
                    data: zod.ZodType<{
                        id: string;
                        createdAt: Date;
                        reputation: number;
                        issuesCount: number;
                        repliesCount: number;
                        likesGiven: number;
                        solvedCount: number;
                    }[], zod.ZodTypeDef, {
                        id: string;
                        createdAt: Date;
                        reputation: number;
                        issuesCount: number;
                        repliesCount: number;
                        likesGiven: number;
                        solvedCount: number;
                    }[]> | zod.ZodObject<{}, "strip", zod.ZodTypeAny, {}, {}>;
                }, "strip", zod.ZodTypeAny, {
                    data: {
                        id: string;
                        createdAt: Date;
                        reputation: number;
                        issuesCount: number;
                        repliesCount: number;
                        likesGiven: number;
                        solvedCount: number;
                    }[] | {};
                }, {
                    data: {
                        id: string;
                        createdAt: Date;
                        reputation: number;
                        issuesCount: number;
                        repliesCount: number;
                        likesGiven: number;
                        solvedCount: number;
                    }[] | {};
                }>;
                500: zod.ZodObject<{
                    title: zod.ZodString;
                    status: zod.ZodNumber;
                    detail: zod.ZodOptional<zod.ZodString>;
                }, "strip", zod.ZodTypeAny, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }>;
            };
        };
    };
    projectGroups: {
        getProjectGroups: {
            metadata: {
                isPublic: boolean;
                permissions: {};
            };
            query: zod.ZodObject<{
                limit: zod.ZodOptional<zod.ZodString>;
                page: zod.ZodOptional<zod.ZodString>;
                search: zod.ZodOptional<zod.ZodString>;
            }, "strip", zod.ZodTypeAny, {
                search?: string | undefined;
                limit?: string | undefined;
                page?: string | undefined;
            }, {
                search?: string | undefined;
                limit?: string | undefined;
                page?: string | undefined;
            }>;
            summary: "Get all project group list";
            method: "GET";
            path: "/api/project-groups";
            headers: zod.ZodOptional<zod.ZodObject<{
                authorization: zod.ZodString;
            }, "strip", zod.ZodTypeAny, {
                authorization: string;
            }, {
                authorization: string;
            }>>;
            responses: {
                200: zod.ZodObject<{
                    data: zod.ZodType<{
                        id: string;
                        name: string;
                        slug: string;
                        description: string;
                        displayName: string;
                        bannerId: string | null;
                    }[], zod.ZodTypeDef, {
                        id: string;
                        name: string;
                        slug: string;
                        description: string;
                        displayName: string;
                        bannerId: string | null;
                    }[]> | zod.ZodObject<{}, "strip", zod.ZodTypeAny, {}, {}>;
                }, "strip", zod.ZodTypeAny, {
                    data: {
                        id: string;
                        name: string;
                        slug: string;
                        description: string;
                        displayName: string;
                        bannerId: string | null;
                    }[] | {};
                }, {
                    data: {
                        id: string;
                        name: string;
                        slug: string;
                        description: string;
                        displayName: string;
                        bannerId: string | null;
                    }[] | {};
                }>;
                500: zod.ZodObject<{
                    title: zod.ZodString;
                    status: zod.ZodNumber;
                    detail: zod.ZodOptional<zod.ZodString>;
                }, "strip", zod.ZodTypeAny, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }>;
            };
        };
        getProjectGroupById: {
            metadata: {
                isPublic: boolean;
                permissions: {};
            };
            summary: "Get project group by id";
            method: "GET";
            path: "/api/project-groups/by/id/:projectGroupId";
            headers: zod.ZodOptional<zod.ZodObject<{
                authorization: zod.ZodString;
            }, "strip", zod.ZodTypeAny, {
                authorization: string;
            }, {
                authorization: string;
            }>>;
            responses: {
                200: zod.ZodObject<{
                    data: zod.ZodType<{
                        id: string;
                        name: string;
                        slug: string;
                        description: string;
                        displayName: string;
                        bannerId: string | null;
                        banner: string | null;
                    } | {
                        id: string;
                        authorId: string;
                        createdAt: Date;
                        updatedAt: Date;
                        storageId: string;
                        name: string;
                        slug: string;
                        author: string | null;
                        description: string;
                        displayName: string;
                        bannerId: string | null;
                        banner: string | null;
                    }, zod.ZodTypeDef, {
                        id: string;
                        name: string;
                        slug: string;
                        description: string;
                        displayName: string;
                        bannerId: string | null;
                        banner: string | null;
                    } | {
                        id: string;
                        authorId: string;
                        createdAt: Date;
                        updatedAt: Date;
                        storageId: string;
                        name: string;
                        slug: string;
                        author: string | null;
                        description: string;
                        displayName: string;
                        bannerId: string | null;
                        banner: string | null;
                    }> | zod.ZodObject<{}, "strip", zod.ZodTypeAny, {}, {}>;
                }, "strip", zod.ZodTypeAny, {
                    data: {
                        id: string;
                        name: string;
                        slug: string;
                        description: string;
                        displayName: string;
                        bannerId: string | null;
                        banner: string | null;
                    } | {
                        id: string;
                        authorId: string;
                        createdAt: Date;
                        updatedAt: Date;
                        storageId: string;
                        name: string;
                        slug: string;
                        author: string | null;
                        description: string;
                        displayName: string;
                        bannerId: string | null;
                        banner: string | null;
                    } | {};
                }, {
                    data: {
                        id: string;
                        name: string;
                        slug: string;
                        description: string;
                        displayName: string;
                        bannerId: string | null;
                        banner: string | null;
                    } | {
                        id: string;
                        authorId: string;
                        createdAt: Date;
                        updatedAt: Date;
                        storageId: string;
                        name: string;
                        slug: string;
                        author: string | null;
                        description: string;
                        displayName: string;
                        bannerId: string | null;
                        banner: string | null;
                    } | {};
                }>;
                403: zod.ZodObject<{
                    title: zod.ZodString;
                    status: zod.ZodNumber;
                    detail: zod.ZodOptional<zod.ZodString>;
                    errors: zod.ZodOptional<zod.ZodArray<zod.ZodType<ErrorObject, zod.ZodTypeDef, ErrorObject>, "many">>;
                }, "strip", zod.ZodTypeAny, {
                    status: number;
                    title: string;
                    errors?: ErrorObject[] | undefined;
                    detail?: string | undefined;
                }, {
                    status: number;
                    title: string;
                    errors?: ErrorObject[] | undefined;
                    detail?: string | undefined;
                }>;
                404: zod.ZodObject<{
                    title: zod.ZodString;
                    status: zod.ZodNumber;
                    detail: zod.ZodOptional<zod.ZodString>;
                }, "strip", zod.ZodTypeAny, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }>;
                500: zod.ZodObject<{
                    title: zod.ZodString;
                    status: zod.ZodNumber;
                    detail: zod.ZodOptional<zod.ZodString>;
                }, "strip", zod.ZodTypeAny, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }>;
            };
        };
        getProjectGroupBySlug: {
            metadata: {
                isPublic: boolean;
                permissions: {};
            };
            summary: "Get project group by slug";
            method: "GET";
            path: "/api/project-groups/by/slug/:slug";
            headers: zod.ZodOptional<zod.ZodObject<{
                authorization: zod.ZodString;
            }, "strip", zod.ZodTypeAny, {
                authorization: string;
            }, {
                authorization: string;
            }>>;
            responses: {
                200: zod.ZodObject<{
                    data: zod.ZodType<{
                        id: string;
                        name: string;
                        slug: string;
                        description: string;
                        displayName: string;
                        bannerId: string | null;
                        banner: string | null;
                    } | {
                        id: string;
                        authorId: string;
                        createdAt: Date;
                        updatedAt: Date;
                        storageId: string;
                        name: string;
                        slug: string;
                        author: string | null;
                        description: string;
                        displayName: string;
                        bannerId: string | null;
                        banner: string | null;
                    }, zod.ZodTypeDef, {
                        id: string;
                        name: string;
                        slug: string;
                        description: string;
                        displayName: string;
                        bannerId: string | null;
                        banner: string | null;
                    } | {
                        id: string;
                        authorId: string;
                        createdAt: Date;
                        updatedAt: Date;
                        storageId: string;
                        name: string;
                        slug: string;
                        author: string | null;
                        description: string;
                        displayName: string;
                        bannerId: string | null;
                        banner: string | null;
                    }> | zod.ZodObject<{}, "strip", zod.ZodTypeAny, {}, {}>;
                }, "strip", zod.ZodTypeAny, {
                    data: {
                        id: string;
                        name: string;
                        slug: string;
                        description: string;
                        displayName: string;
                        bannerId: string | null;
                        banner: string | null;
                    } | {
                        id: string;
                        authorId: string;
                        createdAt: Date;
                        updatedAt: Date;
                        storageId: string;
                        name: string;
                        slug: string;
                        author: string | null;
                        description: string;
                        displayName: string;
                        bannerId: string | null;
                        banner: string | null;
                    } | {};
                }, {
                    data: {
                        id: string;
                        name: string;
                        slug: string;
                        description: string;
                        displayName: string;
                        bannerId: string | null;
                        banner: string | null;
                    } | {
                        id: string;
                        authorId: string;
                        createdAt: Date;
                        updatedAt: Date;
                        storageId: string;
                        name: string;
                        slug: string;
                        author: string | null;
                        description: string;
                        displayName: string;
                        bannerId: string | null;
                        banner: string | null;
                    } | {};
                }>;
                403: zod.ZodObject<{
                    title: zod.ZodString;
                    status: zod.ZodNumber;
                    detail: zod.ZodOptional<zod.ZodString>;
                    errors: zod.ZodOptional<zod.ZodArray<zod.ZodType<ErrorObject, zod.ZodTypeDef, ErrorObject>, "many">>;
                }, "strip", zod.ZodTypeAny, {
                    status: number;
                    title: string;
                    errors?: ErrorObject[] | undefined;
                    detail?: string | undefined;
                }, {
                    status: number;
                    title: string;
                    errors?: ErrorObject[] | undefined;
                    detail?: string | undefined;
                }>;
                404: zod.ZodObject<{
                    title: zod.ZodString;
                    status: zod.ZodNumber;
                    detail: zod.ZodOptional<zod.ZodString>;
                }, "strip", zod.ZodTypeAny, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }>;
                500: zod.ZodObject<{
                    title: zod.ZodString;
                    status: zod.ZodNumber;
                    detail: zod.ZodOptional<zod.ZodString>;
                }, "strip", zod.ZodTypeAny, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }>;
            };
        };
        editProjectGroupGeneralSettingsById: {
            metadata: {
                readonly permissions: {
                    readonly OR: readonly ["update:projectGroup"];
                };
            };
            summary: "Edit project group";
            method: "POST";
            body: zod.ZodObject<{
                displayName: zod.ZodOptional<zod.ZodString>;
                slug: zod.ZodOptional<zod.ZodString>;
                bannerId: zod.ZodOptional<zod.ZodNullable<zod.ZodString>>;
                description: zod.ZodOptional<zod.ZodString>;
            }, "strip", zod.ZodTypeAny, {
                slug?: string | undefined;
                description?: string | undefined;
                displayName?: string | undefined;
                bannerId?: string | null | undefined;
            }, {
                slug?: string | undefined;
                description?: string | undefined;
                displayName?: string | undefined;
                bannerId?: string | null | undefined;
            }>;
            path: "/api/project-groups/by/id/:groupId/edit";
            headers: zod.ZodObject<{
                authorization: zod.ZodString;
            }, "strip", zod.ZodTypeAny, {
                authorization: string;
            }, {
                authorization: string;
            }>;
            responses: {
                200: zod.ZodObject<{
                    data: zod.ZodType<{
                        id: string;
                        authorId: string;
                        createdAt: Date;
                        updatedAt: Date;
                        storageId: string;
                        name: string;
                        slug: string;
                        description: string;
                        displayName: string;
                        bannerId: string | null;
                    }, zod.ZodTypeDef, {
                        id: string;
                        authorId: string;
                        createdAt: Date;
                        updatedAt: Date;
                        storageId: string;
                        name: string;
                        slug: string;
                        description: string;
                        displayName: string;
                        bannerId: string | null;
                    }> | zod.ZodObject<{}, "strip", zod.ZodTypeAny, {}, {}>;
                }, "strip", zod.ZodTypeAny, {
                    data: {
                        id: string;
                        authorId: string;
                        createdAt: Date;
                        updatedAt: Date;
                        storageId: string;
                        name: string;
                        slug: string;
                        description: string;
                        displayName: string;
                        bannerId: string | null;
                    } | {};
                }, {
                    data: {
                        id: string;
                        authorId: string;
                        createdAt: Date;
                        updatedAt: Date;
                        storageId: string;
                        name: string;
                        slug: string;
                        description: string;
                        displayName: string;
                        bannerId: string | null;
                    } | {};
                }>;
                409: zod.ZodObject<{
                    title: zod.ZodString;
                    status: zod.ZodNumber;
                    detail: zod.ZodOptional<zod.ZodString>;
                }, "strip", zod.ZodTypeAny, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }>;
                403: zod.ZodObject<{
                    title: zod.ZodString;
                    status: zod.ZodNumber;
                    detail: zod.ZodOptional<zod.ZodString>;
                    errors: zod.ZodOptional<zod.ZodArray<zod.ZodType<ErrorObject, zod.ZodTypeDef, ErrorObject>, "many">>;
                }, "strip", zod.ZodTypeAny, {
                    status: number;
                    title: string;
                    errors?: ErrorObject[] | undefined;
                    detail?: string | undefined;
                }, {
                    status: number;
                    title: string;
                    errors?: ErrorObject[] | undefined;
                    detail?: string | undefined;
                }>;
                500: zod.ZodObject<{
                    title: zod.ZodString;
                    status: zod.ZodNumber;
                    detail: zod.ZodOptional<zod.ZodString>;
                }, "strip", zod.ZodTypeAny, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }>;
            };
        };
        createProjectGroup: {
            metadata: {
                permissions: "create:projectGroup";
            };
            summary: "Create project group";
            method: "POST";
            body: zod.ZodObject<{
                bannerId: zod.ZodOptional<zod.ZodString>;
                displayName: zod.ZodString;
                description: zod.ZodString;
                slug: zod.ZodString;
            }, "strip", zod.ZodTypeAny, {
                slug: string;
                description: string;
                displayName: string;
                bannerId?: string | undefined;
            }, {
                slug: string;
                description: string;
                displayName: string;
                bannerId?: string | undefined;
            }>;
            path: "/api/project-groups";
            headers: zod.ZodObject<{
                authorization: zod.ZodString;
            }, "strip", zod.ZodTypeAny, {
                authorization: string;
            }, {
                authorization: string;
            }>;
            responses: {
                200: zod.ZodObject<{
                    data: zod.ZodType<{
                        id: string;
                        name: string;
                        slug: string;
                        description: string;
                        displayName: string;
                        bannerId: string | null;
                    }, zod.ZodTypeDef, {
                        id: string;
                        name: string;
                        slug: string;
                        description: string;
                        displayName: string;
                        bannerId: string | null;
                    }> | zod.ZodObject<{}, "strip", zod.ZodTypeAny, {}, {}>;
                }, "strip", zod.ZodTypeAny, {
                    data: {
                        id: string;
                        name: string;
                        slug: string;
                        description: string;
                        displayName: string;
                        bannerId: string | null;
                    } | {};
                }, {
                    data: {
                        id: string;
                        name: string;
                        slug: string;
                        description: string;
                        displayName: string;
                        bannerId: string | null;
                    } | {};
                }>;
                409: zod.ZodObject<{
                    title: zod.ZodString;
                    status: zod.ZodNumber;
                    detail: zod.ZodOptional<zod.ZodString>;
                }, "strip", zod.ZodTypeAny, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }>;
                403: zod.ZodObject<{
                    title: zod.ZodString;
                    status: zod.ZodNumber;
                    detail: zod.ZodOptional<zod.ZodString>;
                    errors: zod.ZodOptional<zod.ZodArray<zod.ZodType<ErrorObject, zod.ZodTypeDef, ErrorObject>, "many">>;
                }, "strip", zod.ZodTypeAny, {
                    status: number;
                    title: string;
                    errors?: ErrorObject[] | undefined;
                    detail?: string | undefined;
                }, {
                    status: number;
                    title: string;
                    errors?: ErrorObject[] | undefined;
                    detail?: string | undefined;
                }>;
                500: zod.ZodObject<{
                    title: zod.ZodString;
                    status: zod.ZodNumber;
                    detail: zod.ZodOptional<zod.ZodString>;
                }, "strip", zod.ZodTypeAny, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }>;
            };
        };
    };
    projects: {
        getProjects: {
            metadata: {
                readonly isPublic: true;
                readonly permissions: {};
            };
            query: zod.ZodObject<{
                page: zod.ZodOptional<zod.ZodString>;
                limit: zod.ZodOptional<zod.ZodString>;
                groupIds: zod.ZodOptional<zod.ZodString>;
                search: zod.ZodOptional<zod.ZodString>;
                authorId: zod.ZodOptional<zod.ZodString>;
            }, "strip", zod.ZodTypeAny, {
                authorId?: string | undefined;
                search?: string | undefined;
                limit?: string | undefined;
                page?: string | undefined;
                groupIds?: string | undefined;
            }, {
                authorId?: string | undefined;
                search?: string | undefined;
                limit?: string | undefined;
                page?: string | undefined;
                groupIds?: string | undefined;
            }>;
            summary: "Get all projects";
            method: "GET";
            path: "/api/projects";
            headers: zod.ZodOptional<zod.ZodObject<{
                authorization: zod.ZodString;
            }, "strip", zod.ZodTypeAny, {
                authorization: string;
            }, {
                authorization: string;
            }>>;
            responses: {
                200: zod.ZodObject<{
                    data: zod.ZodType<{
                        data: ({
                            id: string;
                            name: string;
                            slug: string;
                            key: string;
                            issuesCount: number;
                            description: string;
                            visibility: "PUBLIC" | "PRIVATE";
                            displayName: string;
                            state: "ACTIVE" | "DRAFT" | "ARCHIVED";
                            group: {
                                id: string;
                                name: string;
                                slug: string;
                                description: string;
                                displayName: string;
                                bannerId: string | null;
                            };
                            banner: {
                                id: string;
                                name: string;
                                mimeType: "video/mp4', 'image/png" | "image/jpeg" | "image/gif" | "image/tiff" | "video/ogg" | "video/webm";
                                size: number;
                                slug: string;
                                url: string;
                                key: string;
                                isConfirmed: boolean;
                                alt: string;
                                tags: string[];
                            };
                            formId: string | null;
                        } | {
                            id: string;
                            createdAt: Date;
                            updatedAt: Date;
                            storageId: string;
                            name: string;
                            slug: string;
                            key: string;
                            issuesCount: number;
                            author: {
                                id: string;
                                createdAt: Date;
                                reputation: number;
                                issuesCount: number;
                                repliesCount: number;
                                likesGiven: number;
                                solvedCount: number;
                            };
                            description: string;
                            visibility: "PUBLIC" | "PRIVATE";
                            displayName: string;
                            state: "ACTIVE" | "DRAFT" | "ARCHIVED";
                            group: {
                                id: string;
                                name: string;
                                slug: string;
                                description: string;
                                displayName: string;
                                bannerId: string | null;
                            };
                            banner: {
                                id: string;
                                authorId: string;
                                createdAt: Date;
                                updatedAt: Date;
                                isDeleted: boolean;
                                name: string;
                                mimeType: "video/mp4', 'image/png" | "image/jpeg" | "image/gif" | "image/tiff" | "video/ogg" | "video/webm";
                                size: number;
                                slug: string;
                                url: string;
                                key: string;
                                isConfirmed: boolean;
                                alt: string;
                                tags: string[];
                                unassociatedAt?: Date | null | undefined;
                            };
                            formId: string | null;
                            keyArt: {
                                id: string;
                                authorId: string;
                                createdAt: Date;
                                updatedAt: Date;
                                isDeleted: boolean;
                                name: string;
                                mimeType: "video/mp4', 'image/png" | "image/jpeg" | "image/gif" | "image/tiff" | "video/ogg" | "video/webm";
                                size: number;
                                slug: string;
                                url: string;
                                key: string;
                                isConfirmed: boolean;
                                alt: string;
                                tags: string[];
                                unassociatedAt?: Date | null | undefined;
                            };
                            moderatorsList: {
                                id: string;
                                username: string;
                                reputation: number;
                                avatar: string | null;
                                roleDisplayName: string;
                            }[];
                        })[];
                        count: number;
                    }, zod.ZodTypeDef, {
                        data: ({
                            id: string;
                            name: string;
                            slug: string;
                            key: string;
                            issuesCount: number;
                            description: string;
                            visibility: "PUBLIC" | "PRIVATE";
                            displayName: string;
                            state: "ACTIVE" | "DRAFT" | "ARCHIVED";
                            group: {
                                id: string;
                                name: string;
                                slug: string;
                                description: string;
                                displayName: string;
                                bannerId: string | null;
                            };
                            banner: {
                                id: string;
                                name: string;
                                mimeType: "video/mp4', 'image/png" | "image/jpeg" | "image/gif" | "image/tiff" | "video/ogg" | "video/webm";
                                size: number;
                                slug: string;
                                url: string;
                                key: string;
                                isConfirmed: boolean;
                                alt: string;
                                tags: string[];
                            };
                            formId: string | null;
                        } | {
                            id: string;
                            createdAt: Date;
                            updatedAt: Date;
                            storageId: string;
                            name: string;
                            slug: string;
                            key: string;
                            issuesCount: number;
                            author: {
                                id: string;
                                createdAt: Date;
                                reputation: number;
                                issuesCount: number;
                                repliesCount: number;
                                likesGiven: number;
                                solvedCount: number;
                            };
                            description: string;
                            visibility: "PUBLIC" | "PRIVATE";
                            displayName: string;
                            state: "ACTIVE" | "DRAFT" | "ARCHIVED";
                            group: {
                                id: string;
                                name: string;
                                slug: string;
                                description: string;
                                displayName: string;
                                bannerId: string | null;
                            };
                            banner: {
                                id: string;
                                authorId: string;
                                createdAt: Date;
                                updatedAt: Date;
                                isDeleted: boolean;
                                name: string;
                                mimeType: "video/mp4', 'image/png" | "image/jpeg" | "image/gif" | "image/tiff" | "video/ogg" | "video/webm";
                                size: number;
                                slug: string;
                                url: string;
                                key: string;
                                isConfirmed: boolean;
                                alt: string;
                                tags: string[];
                                unassociatedAt?: Date | null | undefined;
                            };
                            formId: string | null;
                            keyArt: {
                                id: string;
                                authorId: string;
                                createdAt: Date;
                                updatedAt: Date;
                                isDeleted: boolean;
                                name: string;
                                mimeType: "video/mp4', 'image/png" | "image/jpeg" | "image/gif" | "image/tiff" | "video/ogg" | "video/webm";
                                size: number;
                                slug: string;
                                url: string;
                                key: string;
                                isConfirmed: boolean;
                                alt: string;
                                tags: string[];
                                unassociatedAt?: Date | null | undefined;
                            };
                            moderatorsList: {
                                id: string;
                                username: string;
                                reputation: number;
                                avatar: string | null;
                                roleDisplayName: string;
                            }[];
                        })[];
                        count: number;
                    }> | zod.ZodObject<{}, "strip", zod.ZodTypeAny, {}, {}>;
                }, "strip", zod.ZodTypeAny, {
                    data: {
                        data: ({
                            id: string;
                            name: string;
                            slug: string;
                            key: string;
                            issuesCount: number;
                            description: string;
                            visibility: "PUBLIC" | "PRIVATE";
                            displayName: string;
                            state: "ACTIVE" | "DRAFT" | "ARCHIVED";
                            group: {
                                id: string;
                                name: string;
                                slug: string;
                                description: string;
                                displayName: string;
                                bannerId: string | null;
                            };
                            banner: {
                                id: string;
                                name: string;
                                mimeType: "video/mp4', 'image/png" | "image/jpeg" | "image/gif" | "image/tiff" | "video/ogg" | "video/webm";
                                size: number;
                                slug: string;
                                url: string;
                                key: string;
                                isConfirmed: boolean;
                                alt: string;
                                tags: string[];
                            };
                            formId: string | null;
                        } | {
                            id: string;
                            createdAt: Date;
                            updatedAt: Date;
                            storageId: string;
                            name: string;
                            slug: string;
                            key: string;
                            issuesCount: number;
                            author: {
                                id: string;
                                createdAt: Date;
                                reputation: number;
                                issuesCount: number;
                                repliesCount: number;
                                likesGiven: number;
                                solvedCount: number;
                            };
                            description: string;
                            visibility: "PUBLIC" | "PRIVATE";
                            displayName: string;
                            state: "ACTIVE" | "DRAFT" | "ARCHIVED";
                            group: {
                                id: string;
                                name: string;
                                slug: string;
                                description: string;
                                displayName: string;
                                bannerId: string | null;
                            };
                            banner: {
                                id: string;
                                authorId: string;
                                createdAt: Date;
                                updatedAt: Date;
                                isDeleted: boolean;
                                name: string;
                                mimeType: "video/mp4', 'image/png" | "image/jpeg" | "image/gif" | "image/tiff" | "video/ogg" | "video/webm";
                                size: number;
                                slug: string;
                                url: string;
                                key: string;
                                isConfirmed: boolean;
                                alt: string;
                                tags: string[];
                                unassociatedAt?: Date | null | undefined;
                            };
                            formId: string | null;
                            keyArt: {
                                id: string;
                                authorId: string;
                                createdAt: Date;
                                updatedAt: Date;
                                isDeleted: boolean;
                                name: string;
                                mimeType: "video/mp4', 'image/png" | "image/jpeg" | "image/gif" | "image/tiff" | "video/ogg" | "video/webm";
                                size: number;
                                slug: string;
                                url: string;
                                key: string;
                                isConfirmed: boolean;
                                alt: string;
                                tags: string[];
                                unassociatedAt?: Date | null | undefined;
                            };
                            moderatorsList: {
                                id: string;
                                username: string;
                                reputation: number;
                                avatar: string | null;
                                roleDisplayName: string;
                            }[];
                        })[];
                        count: number;
                    } | {};
                }, {
                    data: {
                        data: ({
                            id: string;
                            name: string;
                            slug: string;
                            key: string;
                            issuesCount: number;
                            description: string;
                            visibility: "PUBLIC" | "PRIVATE";
                            displayName: string;
                            state: "ACTIVE" | "DRAFT" | "ARCHIVED";
                            group: {
                                id: string;
                                name: string;
                                slug: string;
                                description: string;
                                displayName: string;
                                bannerId: string | null;
                            };
                            banner: {
                                id: string;
                                name: string;
                                mimeType: "video/mp4', 'image/png" | "image/jpeg" | "image/gif" | "image/tiff" | "video/ogg" | "video/webm";
                                size: number;
                                slug: string;
                                url: string;
                                key: string;
                                isConfirmed: boolean;
                                alt: string;
                                tags: string[];
                            };
                            formId: string | null;
                        } | {
                            id: string;
                            createdAt: Date;
                            updatedAt: Date;
                            storageId: string;
                            name: string;
                            slug: string;
                            key: string;
                            issuesCount: number;
                            author: {
                                id: string;
                                createdAt: Date;
                                reputation: number;
                                issuesCount: number;
                                repliesCount: number;
                                likesGiven: number;
                                solvedCount: number;
                            };
                            description: string;
                            visibility: "PUBLIC" | "PRIVATE";
                            displayName: string;
                            state: "ACTIVE" | "DRAFT" | "ARCHIVED";
                            group: {
                                id: string;
                                name: string;
                                slug: string;
                                description: string;
                                displayName: string;
                                bannerId: string | null;
                            };
                            banner: {
                                id: string;
                                authorId: string;
                                createdAt: Date;
                                updatedAt: Date;
                                isDeleted: boolean;
                                name: string;
                                mimeType: "video/mp4', 'image/png" | "image/jpeg" | "image/gif" | "image/tiff" | "video/ogg" | "video/webm";
                                size: number;
                                slug: string;
                                url: string;
                                key: string;
                                isConfirmed: boolean;
                                alt: string;
                                tags: string[];
                                unassociatedAt?: Date | null | undefined;
                            };
                            formId: string | null;
                            keyArt: {
                                id: string;
                                authorId: string;
                                createdAt: Date;
                                updatedAt: Date;
                                isDeleted: boolean;
                                name: string;
                                mimeType: "video/mp4', 'image/png" | "image/jpeg" | "image/gif" | "image/tiff" | "video/ogg" | "video/webm";
                                size: number;
                                slug: string;
                                url: string;
                                key: string;
                                isConfirmed: boolean;
                                alt: string;
                                tags: string[];
                                unassociatedAt?: Date | null | undefined;
                            };
                            moderatorsList: {
                                id: string;
                                username: string;
                                reputation: number;
                                avatar: string | null;
                                roleDisplayName: string;
                            }[];
                        })[];
                        count: number;
                    } | {};
                }>;
            };
        };
        getProjectById: {
            metadata: {
                readonly isPublic: true;
                readonly permissions: {};
            };
            summary: "Get project by id";
            method: "GET";
            path: "/api/projects/by/id/:projectId";
            headers: zod.ZodOptional<zod.ZodObject<{
                authorization: zod.ZodString;
            }, "strip", zod.ZodTypeAny, {
                authorization: string;
            }, {
                authorization: string;
            }>>;
            responses: {
                200: zod.ZodObject<{
                    data: zod.ZodType<{
                        id: string;
                        name: string;
                        slug: string;
                        key: string;
                        issuesCount: number;
                        description: string;
                        visibility: "PUBLIC" | "PRIVATE";
                        displayName: string;
                        state: "ACTIVE" | "DRAFT" | "ARCHIVED";
                        group: {
                            id: string;
                            name: string;
                            slug: string;
                            description: string;
                            displayName: string;
                            bannerId: string | null;
                        };
                        banner: {
                            id: string;
                            name: string;
                            mimeType: "video/mp4', 'image/png" | "image/jpeg" | "image/gif" | "image/tiff" | "video/ogg" | "video/webm";
                            size: number;
                            slug: string;
                            url: string;
                            key: string;
                            isConfirmed: boolean;
                            alt: string;
                            tags: string[];
                        };
                        formId: string | null;
                    } | {
                        id: string;
                        createdAt: Date;
                        updatedAt: Date;
                        storageId: string;
                        name: string;
                        slug: string;
                        key: string;
                        issuesCount: number;
                        author: {
                            id: string;
                            createdAt: Date;
                            reputation: number;
                            issuesCount: number;
                            repliesCount: number;
                            likesGiven: number;
                            solvedCount: number;
                        };
                        description: string;
                        visibility: "PUBLIC" | "PRIVATE";
                        displayName: string;
                        state: "ACTIVE" | "DRAFT" | "ARCHIVED";
                        group: {
                            id: string;
                            name: string;
                            slug: string;
                            description: string;
                            displayName: string;
                            bannerId: string | null;
                        };
                        banner: {
                            id: string;
                            authorId: string;
                            createdAt: Date;
                            updatedAt: Date;
                            isDeleted: boolean;
                            name: string;
                            mimeType: "video/mp4', 'image/png" | "image/jpeg" | "image/gif" | "image/tiff" | "video/ogg" | "video/webm";
                            size: number;
                            slug: string;
                            url: string;
                            key: string;
                            isConfirmed: boolean;
                            alt: string;
                            tags: string[];
                            unassociatedAt?: Date | null | undefined;
                        };
                        formId: string | null;
                        keyArt: {
                            id: string;
                            authorId: string;
                            createdAt: Date;
                            updatedAt: Date;
                            isDeleted: boolean;
                            name: string;
                            mimeType: "video/mp4', 'image/png" | "image/jpeg" | "image/gif" | "image/tiff" | "video/ogg" | "video/webm";
                            size: number;
                            slug: string;
                            url: string;
                            key: string;
                            isConfirmed: boolean;
                            alt: string;
                            tags: string[];
                            unassociatedAt?: Date | null | undefined;
                        };
                        moderatorsList: {
                            id: string;
                            username: string;
                            reputation: number;
                            avatar: string | null;
                            roleDisplayName: string;
                        }[];
                    }, zod.ZodTypeDef, {
                        id: string;
                        name: string;
                        slug: string;
                        key: string;
                        issuesCount: number;
                        description: string;
                        visibility: "PUBLIC" | "PRIVATE";
                        displayName: string;
                        state: "ACTIVE" | "DRAFT" | "ARCHIVED";
                        group: {
                            id: string;
                            name: string;
                            slug: string;
                            description: string;
                            displayName: string;
                            bannerId: string | null;
                        };
                        banner: {
                            id: string;
                            name: string;
                            mimeType: "video/mp4', 'image/png" | "image/jpeg" | "image/gif" | "image/tiff" | "video/ogg" | "video/webm";
                            size: number;
                            slug: string;
                            url: string;
                            key: string;
                            isConfirmed: boolean;
                            alt: string;
                            tags: string[];
                        };
                        formId: string | null;
                    } | {
                        id: string;
                        createdAt: Date;
                        updatedAt: Date;
                        storageId: string;
                        name: string;
                        slug: string;
                        key: string;
                        issuesCount: number;
                        author: {
                            id: string;
                            createdAt: Date;
                            reputation: number;
                            issuesCount: number;
                            repliesCount: number;
                            likesGiven: number;
                            solvedCount: number;
                        };
                        description: string;
                        visibility: "PUBLIC" | "PRIVATE";
                        displayName: string;
                        state: "ACTIVE" | "DRAFT" | "ARCHIVED";
                        group: {
                            id: string;
                            name: string;
                            slug: string;
                            description: string;
                            displayName: string;
                            bannerId: string | null;
                        };
                        banner: {
                            id: string;
                            authorId: string;
                            createdAt: Date;
                            updatedAt: Date;
                            isDeleted: boolean;
                            name: string;
                            mimeType: "video/mp4', 'image/png" | "image/jpeg" | "image/gif" | "image/tiff" | "video/ogg" | "video/webm";
                            size: number;
                            slug: string;
                            url: string;
                            key: string;
                            isConfirmed: boolean;
                            alt: string;
                            tags: string[];
                            unassociatedAt?: Date | null | undefined;
                        };
                        formId: string | null;
                        keyArt: {
                            id: string;
                            authorId: string;
                            createdAt: Date;
                            updatedAt: Date;
                            isDeleted: boolean;
                            name: string;
                            mimeType: "video/mp4', 'image/png" | "image/jpeg" | "image/gif" | "image/tiff" | "video/ogg" | "video/webm";
                            size: number;
                            slug: string;
                            url: string;
                            key: string;
                            isConfirmed: boolean;
                            alt: string;
                            tags: string[];
                            unassociatedAt?: Date | null | undefined;
                        };
                        moderatorsList: {
                            id: string;
                            username: string;
                            reputation: number;
                            avatar: string | null;
                            roleDisplayName: string;
                        }[];
                    }> | zod.ZodObject<{}, "strip", zod.ZodTypeAny, {}, {}>;
                }, "strip", zod.ZodTypeAny, {
                    data: {
                        id: string;
                        name: string;
                        slug: string;
                        key: string;
                        issuesCount: number;
                        description: string;
                        visibility: "PUBLIC" | "PRIVATE";
                        displayName: string;
                        state: "ACTIVE" | "DRAFT" | "ARCHIVED";
                        group: {
                            id: string;
                            name: string;
                            slug: string;
                            description: string;
                            displayName: string;
                            bannerId: string | null;
                        };
                        banner: {
                            id: string;
                            name: string;
                            mimeType: "video/mp4', 'image/png" | "image/jpeg" | "image/gif" | "image/tiff" | "video/ogg" | "video/webm";
                            size: number;
                            slug: string;
                            url: string;
                            key: string;
                            isConfirmed: boolean;
                            alt: string;
                            tags: string[];
                        };
                        formId: string | null;
                    } | {
                        id: string;
                        createdAt: Date;
                        updatedAt: Date;
                        storageId: string;
                        name: string;
                        slug: string;
                        key: string;
                        issuesCount: number;
                        author: {
                            id: string;
                            createdAt: Date;
                            reputation: number;
                            issuesCount: number;
                            repliesCount: number;
                            likesGiven: number;
                            solvedCount: number;
                        };
                        description: string;
                        visibility: "PUBLIC" | "PRIVATE";
                        displayName: string;
                        state: "ACTIVE" | "DRAFT" | "ARCHIVED";
                        group: {
                            id: string;
                            name: string;
                            slug: string;
                            description: string;
                            displayName: string;
                            bannerId: string | null;
                        };
                        banner: {
                            id: string;
                            authorId: string;
                            createdAt: Date;
                            updatedAt: Date;
                            isDeleted: boolean;
                            name: string;
                            mimeType: "video/mp4', 'image/png" | "image/jpeg" | "image/gif" | "image/tiff" | "video/ogg" | "video/webm";
                            size: number;
                            slug: string;
                            url: string;
                            key: string;
                            isConfirmed: boolean;
                            alt: string;
                            tags: string[];
                            unassociatedAt?: Date | null | undefined;
                        };
                        formId: string | null;
                        keyArt: {
                            id: string;
                            authorId: string;
                            createdAt: Date;
                            updatedAt: Date;
                            isDeleted: boolean;
                            name: string;
                            mimeType: "video/mp4', 'image/png" | "image/jpeg" | "image/gif" | "image/tiff" | "video/ogg" | "video/webm";
                            size: number;
                            slug: string;
                            url: string;
                            key: string;
                            isConfirmed: boolean;
                            alt: string;
                            tags: string[];
                            unassociatedAt?: Date | null | undefined;
                        };
                        moderatorsList: {
                            id: string;
                            username: string;
                            reputation: number;
                            avatar: string | null;
                            roleDisplayName: string;
                        }[];
                    } | {};
                }, {
                    data: {
                        id: string;
                        name: string;
                        slug: string;
                        key: string;
                        issuesCount: number;
                        description: string;
                        visibility: "PUBLIC" | "PRIVATE";
                        displayName: string;
                        state: "ACTIVE" | "DRAFT" | "ARCHIVED";
                        group: {
                            id: string;
                            name: string;
                            slug: string;
                            description: string;
                            displayName: string;
                            bannerId: string | null;
                        };
                        banner: {
                            id: string;
                            name: string;
                            mimeType: "video/mp4', 'image/png" | "image/jpeg" | "image/gif" | "image/tiff" | "video/ogg" | "video/webm";
                            size: number;
                            slug: string;
                            url: string;
                            key: string;
                            isConfirmed: boolean;
                            alt: string;
                            tags: string[];
                        };
                        formId: string | null;
                    } | {
                        id: string;
                        createdAt: Date;
                        updatedAt: Date;
                        storageId: string;
                        name: string;
                        slug: string;
                        key: string;
                        issuesCount: number;
                        author: {
                            id: string;
                            createdAt: Date;
                            reputation: number;
                            issuesCount: number;
                            repliesCount: number;
                            likesGiven: number;
                            solvedCount: number;
                        };
                        description: string;
                        visibility: "PUBLIC" | "PRIVATE";
                        displayName: string;
                        state: "ACTIVE" | "DRAFT" | "ARCHIVED";
                        group: {
                            id: string;
                            name: string;
                            slug: string;
                            description: string;
                            displayName: string;
                            bannerId: string | null;
                        };
                        banner: {
                            id: string;
                            authorId: string;
                            createdAt: Date;
                            updatedAt: Date;
                            isDeleted: boolean;
                            name: string;
                            mimeType: "video/mp4', 'image/png" | "image/jpeg" | "image/gif" | "image/tiff" | "video/ogg" | "video/webm";
                            size: number;
                            slug: string;
                            url: string;
                            key: string;
                            isConfirmed: boolean;
                            alt: string;
                            tags: string[];
                            unassociatedAt?: Date | null | undefined;
                        };
                        formId: string | null;
                        keyArt: {
                            id: string;
                            authorId: string;
                            createdAt: Date;
                            updatedAt: Date;
                            isDeleted: boolean;
                            name: string;
                            mimeType: "video/mp4', 'image/png" | "image/jpeg" | "image/gif" | "image/tiff" | "video/ogg" | "video/webm";
                            size: number;
                            slug: string;
                            url: string;
                            key: string;
                            isConfirmed: boolean;
                            alt: string;
                            tags: string[];
                            unassociatedAt?: Date | null | undefined;
                        };
                        moderatorsList: {
                            id: string;
                            username: string;
                            reputation: number;
                            avatar: string | null;
                            roleDisplayName: string;
                        }[];
                    } | {};
                }>;
                404: zod.ZodObject<{
                    title: zod.ZodString;
                    status: zod.ZodNumber;
                    detail: zod.ZodOptional<zod.ZodString>;
                }, "strip", zod.ZodTypeAny, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }>;
                500: zod.ZodObject<{
                    title: zod.ZodString;
                    status: zod.ZodNumber;
                    detail: zod.ZodOptional<zod.ZodString>;
                }, "strip", zod.ZodTypeAny, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }>;
            };
        };
        getProjectBySlug: {
            metadata: {
                readonly isPublic: true;
                readonly permissions: {};
            };
            summary: "Get project by slug";
            method: "GET";
            path: "/api/projects/by/slug/:slug";
            headers: zod.ZodOptional<zod.ZodObject<{
                authorization: zod.ZodString;
            }, "strip", zod.ZodTypeAny, {
                authorization: string;
            }, {
                authorization: string;
            }>>;
            responses: {
                200: zod.ZodObject<{
                    data: zod.ZodType<{
                        id: string;
                        name: string;
                        slug: string;
                        key: string;
                        issuesCount: number;
                        description: string;
                        visibility: "PUBLIC" | "PRIVATE";
                        displayName: string;
                        state: "ACTIVE" | "DRAFT" | "ARCHIVED";
                        group: {
                            id: string;
                            name: string;
                            slug: string;
                            description: string;
                            displayName: string;
                            bannerId: string | null;
                        };
                        banner: {
                            id: string;
                            name: string;
                            mimeType: "video/mp4', 'image/png" | "image/jpeg" | "image/gif" | "image/tiff" | "video/ogg" | "video/webm";
                            size: number;
                            slug: string;
                            url: string;
                            key: string;
                            isConfirmed: boolean;
                            alt: string;
                            tags: string[];
                        };
                        formId: string | null;
                    } | {
                        id: string;
                        createdAt: Date;
                        updatedAt: Date;
                        storageId: string;
                        name: string;
                        slug: string;
                        key: string;
                        issuesCount: number;
                        author: {
                            id: string;
                            createdAt: Date;
                            reputation: number;
                            issuesCount: number;
                            repliesCount: number;
                            likesGiven: number;
                            solvedCount: number;
                        };
                        description: string;
                        visibility: "PUBLIC" | "PRIVATE";
                        displayName: string;
                        state: "ACTIVE" | "DRAFT" | "ARCHIVED";
                        group: {
                            id: string;
                            name: string;
                            slug: string;
                            description: string;
                            displayName: string;
                            bannerId: string | null;
                        };
                        banner: {
                            id: string;
                            authorId: string;
                            createdAt: Date;
                            updatedAt: Date;
                            isDeleted: boolean;
                            name: string;
                            mimeType: "video/mp4', 'image/png" | "image/jpeg" | "image/gif" | "image/tiff" | "video/ogg" | "video/webm";
                            size: number;
                            slug: string;
                            url: string;
                            key: string;
                            isConfirmed: boolean;
                            alt: string;
                            tags: string[];
                            unassociatedAt?: Date | null | undefined;
                        };
                        formId: string | null;
                        keyArt: {
                            id: string;
                            authorId: string;
                            createdAt: Date;
                            updatedAt: Date;
                            isDeleted: boolean;
                            name: string;
                            mimeType: "video/mp4', 'image/png" | "image/jpeg" | "image/gif" | "image/tiff" | "video/ogg" | "video/webm";
                            size: number;
                            slug: string;
                            url: string;
                            key: string;
                            isConfirmed: boolean;
                            alt: string;
                            tags: string[];
                            unassociatedAt?: Date | null | undefined;
                        };
                        moderatorsList: {
                            id: string;
                            username: string;
                            reputation: number;
                            avatar: string | null;
                            roleDisplayName: string;
                        }[];
                    }, zod.ZodTypeDef, {
                        id: string;
                        name: string;
                        slug: string;
                        key: string;
                        issuesCount: number;
                        description: string;
                        visibility: "PUBLIC" | "PRIVATE";
                        displayName: string;
                        state: "ACTIVE" | "DRAFT" | "ARCHIVED";
                        group: {
                            id: string;
                            name: string;
                            slug: string;
                            description: string;
                            displayName: string;
                            bannerId: string | null;
                        };
                        banner: {
                            id: string;
                            name: string;
                            mimeType: "video/mp4', 'image/png" | "image/jpeg" | "image/gif" | "image/tiff" | "video/ogg" | "video/webm";
                            size: number;
                            slug: string;
                            url: string;
                            key: string;
                            isConfirmed: boolean;
                            alt: string;
                            tags: string[];
                        };
                        formId: string | null;
                    } | {
                        id: string;
                        createdAt: Date;
                        updatedAt: Date;
                        storageId: string;
                        name: string;
                        slug: string;
                        key: string;
                        issuesCount: number;
                        author: {
                            id: string;
                            createdAt: Date;
                            reputation: number;
                            issuesCount: number;
                            repliesCount: number;
                            likesGiven: number;
                            solvedCount: number;
                        };
                        description: string;
                        visibility: "PUBLIC" | "PRIVATE";
                        displayName: string;
                        state: "ACTIVE" | "DRAFT" | "ARCHIVED";
                        group: {
                            id: string;
                            name: string;
                            slug: string;
                            description: string;
                            displayName: string;
                            bannerId: string | null;
                        };
                        banner: {
                            id: string;
                            authorId: string;
                            createdAt: Date;
                            updatedAt: Date;
                            isDeleted: boolean;
                            name: string;
                            mimeType: "video/mp4', 'image/png" | "image/jpeg" | "image/gif" | "image/tiff" | "video/ogg" | "video/webm";
                            size: number;
                            slug: string;
                            url: string;
                            key: string;
                            isConfirmed: boolean;
                            alt: string;
                            tags: string[];
                            unassociatedAt?: Date | null | undefined;
                        };
                        formId: string | null;
                        keyArt: {
                            id: string;
                            authorId: string;
                            createdAt: Date;
                            updatedAt: Date;
                            isDeleted: boolean;
                            name: string;
                            mimeType: "video/mp4', 'image/png" | "image/jpeg" | "image/gif" | "image/tiff" | "video/ogg" | "video/webm";
                            size: number;
                            slug: string;
                            url: string;
                            key: string;
                            isConfirmed: boolean;
                            alt: string;
                            tags: string[];
                            unassociatedAt?: Date | null | undefined;
                        };
                        moderatorsList: {
                            id: string;
                            username: string;
                            reputation: number;
                            avatar: string | null;
                            roleDisplayName: string;
                        }[];
                    }> | zod.ZodObject<{}, "strip", zod.ZodTypeAny, {}, {}>;
                }, "strip", zod.ZodTypeAny, {
                    data: {
                        id: string;
                        name: string;
                        slug: string;
                        key: string;
                        issuesCount: number;
                        description: string;
                        visibility: "PUBLIC" | "PRIVATE";
                        displayName: string;
                        state: "ACTIVE" | "DRAFT" | "ARCHIVED";
                        group: {
                            id: string;
                            name: string;
                            slug: string;
                            description: string;
                            displayName: string;
                            bannerId: string | null;
                        };
                        banner: {
                            id: string;
                            name: string;
                            mimeType: "video/mp4', 'image/png" | "image/jpeg" | "image/gif" | "image/tiff" | "video/ogg" | "video/webm";
                            size: number;
                            slug: string;
                            url: string;
                            key: string;
                            isConfirmed: boolean;
                            alt: string;
                            tags: string[];
                        };
                        formId: string | null;
                    } | {
                        id: string;
                        createdAt: Date;
                        updatedAt: Date;
                        storageId: string;
                        name: string;
                        slug: string;
                        key: string;
                        issuesCount: number;
                        author: {
                            id: string;
                            createdAt: Date;
                            reputation: number;
                            issuesCount: number;
                            repliesCount: number;
                            likesGiven: number;
                            solvedCount: number;
                        };
                        description: string;
                        visibility: "PUBLIC" | "PRIVATE";
                        displayName: string;
                        state: "ACTIVE" | "DRAFT" | "ARCHIVED";
                        group: {
                            id: string;
                            name: string;
                            slug: string;
                            description: string;
                            displayName: string;
                            bannerId: string | null;
                        };
                        banner: {
                            id: string;
                            authorId: string;
                            createdAt: Date;
                            updatedAt: Date;
                            isDeleted: boolean;
                            name: string;
                            mimeType: "video/mp4', 'image/png" | "image/jpeg" | "image/gif" | "image/tiff" | "video/ogg" | "video/webm";
                            size: number;
                            slug: string;
                            url: string;
                            key: string;
                            isConfirmed: boolean;
                            alt: string;
                            tags: string[];
                            unassociatedAt?: Date | null | undefined;
                        };
                        formId: string | null;
                        keyArt: {
                            id: string;
                            authorId: string;
                            createdAt: Date;
                            updatedAt: Date;
                            isDeleted: boolean;
                            name: string;
                            mimeType: "video/mp4', 'image/png" | "image/jpeg" | "image/gif" | "image/tiff" | "video/ogg" | "video/webm";
                            size: number;
                            slug: string;
                            url: string;
                            key: string;
                            isConfirmed: boolean;
                            alt: string;
                            tags: string[];
                            unassociatedAt?: Date | null | undefined;
                        };
                        moderatorsList: {
                            id: string;
                            username: string;
                            reputation: number;
                            avatar: string | null;
                            roleDisplayName: string;
                        }[];
                    } | {};
                }, {
                    data: {
                        id: string;
                        name: string;
                        slug: string;
                        key: string;
                        issuesCount: number;
                        description: string;
                        visibility: "PUBLIC" | "PRIVATE";
                        displayName: string;
                        state: "ACTIVE" | "DRAFT" | "ARCHIVED";
                        group: {
                            id: string;
                            name: string;
                            slug: string;
                            description: string;
                            displayName: string;
                            bannerId: string | null;
                        };
                        banner: {
                            id: string;
                            name: string;
                            mimeType: "video/mp4', 'image/png" | "image/jpeg" | "image/gif" | "image/tiff" | "video/ogg" | "video/webm";
                            size: number;
                            slug: string;
                            url: string;
                            key: string;
                            isConfirmed: boolean;
                            alt: string;
                            tags: string[];
                        };
                        formId: string | null;
                    } | {
                        id: string;
                        createdAt: Date;
                        updatedAt: Date;
                        storageId: string;
                        name: string;
                        slug: string;
                        key: string;
                        issuesCount: number;
                        author: {
                            id: string;
                            createdAt: Date;
                            reputation: number;
                            issuesCount: number;
                            repliesCount: number;
                            likesGiven: number;
                            solvedCount: number;
                        };
                        description: string;
                        visibility: "PUBLIC" | "PRIVATE";
                        displayName: string;
                        state: "ACTIVE" | "DRAFT" | "ARCHIVED";
                        group: {
                            id: string;
                            name: string;
                            slug: string;
                            description: string;
                            displayName: string;
                            bannerId: string | null;
                        };
                        banner: {
                            id: string;
                            authorId: string;
                            createdAt: Date;
                            updatedAt: Date;
                            isDeleted: boolean;
                            name: string;
                            mimeType: "video/mp4', 'image/png" | "image/jpeg" | "image/gif" | "image/tiff" | "video/ogg" | "video/webm";
                            size: number;
                            slug: string;
                            url: string;
                            key: string;
                            isConfirmed: boolean;
                            alt: string;
                            tags: string[];
                            unassociatedAt?: Date | null | undefined;
                        };
                        formId: string | null;
                        keyArt: {
                            id: string;
                            authorId: string;
                            createdAt: Date;
                            updatedAt: Date;
                            isDeleted: boolean;
                            name: string;
                            mimeType: "video/mp4', 'image/png" | "image/jpeg" | "image/gif" | "image/tiff" | "video/ogg" | "video/webm";
                            size: number;
                            slug: string;
                            url: string;
                            key: string;
                            isConfirmed: boolean;
                            alt: string;
                            tags: string[];
                            unassociatedAt?: Date | null | undefined;
                        };
                        moderatorsList: {
                            id: string;
                            username: string;
                            reputation: number;
                            avatar: string | null;
                            roleDisplayName: string;
                        }[];
                    } | {};
                }>;
                404: zod.ZodObject<{
                    title: zod.ZodString;
                    status: zod.ZodNumber;
                    detail: zod.ZodOptional<zod.ZodString>;
                }, "strip", zod.ZodTypeAny, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }>;
                500: zod.ZodObject<{
                    title: zod.ZodString;
                    status: zod.ZodNumber;
                    detail: zod.ZodOptional<zod.ZodString>;
                }, "strip", zod.ZodTypeAny, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }>;
            };
        };
        createProject: {
            metadata: {
                readonly permissions: "create:project";
            };
            summary: "Get project by id";
            method: "POST";
            body: zod.ZodObject<{
                groupId: zod.ZodString;
                displayName: zod.ZodString;
                slug: zod.ZodString;
                bannerId: zod.ZodNullable<zod.ZodString>;
                keyArtId: zod.ZodNullable<zod.ZodString>;
                key: zod.ZodString;
                description: zod.ZodString;
                visibility: zod.ZodEnum<["PUBLIC", "PRIVATE"]>;
            }, "strip", zod.ZodTypeAny, {
                slug: string;
                key: string;
                description: string;
                visibility: "PUBLIC" | "PRIVATE";
                displayName: string;
                bannerId: string | null;
                groupId: string;
                keyArtId: string | null;
            }, {
                slug: string;
                key: string;
                description: string;
                visibility: "PUBLIC" | "PRIVATE";
                displayName: string;
                bannerId: string | null;
                groupId: string;
                keyArtId: string | null;
            }>;
            path: "/api/projects";
            headers: zod.ZodObject<{
                authorization: zod.ZodString;
            }, "strip", zod.ZodTypeAny, {
                authorization: string;
            }, {
                authorization: string;
            }>;
            responses: {
                200: zod.ZodObject<{
                    data: zod.ZodType<{
                        id: string;
                        authorId: string;
                        createdAt: Date;
                        updatedAt: Date;
                        storageId: string;
                        name: string;
                        slug: string;
                        key: string;
                        issuesCount: number;
                        description: string;
                        visibility: "PUBLIC" | "PRIVATE";
                        displayName: string;
                        state: "ACTIVE" | "DRAFT" | "ARCHIVED";
                        bannerId: string | null;
                        banner: {
                            id: string;
                            name: string;
                            mimeType: "video/mp4', 'image/png" | "image/jpeg" | "image/gif" | "image/tiff" | "video/ogg" | "video/webm";
                            size: number;
                            slug: string;
                            url: string;
                            key: string;
                            isConfirmed: boolean;
                            alt: string;
                            tags: string[];
                        };
                        groupId: string;
                        formId: string | null;
                        keyArtId: string | null;
                    }, zod.ZodTypeDef, {
                        id: string;
                        authorId: string;
                        createdAt: Date;
                        updatedAt: Date;
                        storageId: string;
                        name: string;
                        slug: string;
                        key: string;
                        issuesCount: number;
                        description: string;
                        visibility: "PUBLIC" | "PRIVATE";
                        displayName: string;
                        state: "ACTIVE" | "DRAFT" | "ARCHIVED";
                        bannerId: string | null;
                        banner: {
                            id: string;
                            name: string;
                            mimeType: "video/mp4', 'image/png" | "image/jpeg" | "image/gif" | "image/tiff" | "video/ogg" | "video/webm";
                            size: number;
                            slug: string;
                            url: string;
                            key: string;
                            isConfirmed: boolean;
                            alt: string;
                            tags: string[];
                        };
                        groupId: string;
                        formId: string | null;
                        keyArtId: string | null;
                    }> | zod.ZodObject<{}, "strip", zod.ZodTypeAny, {}, {}>;
                }, "strip", zod.ZodTypeAny, {
                    data: {
                        id: string;
                        authorId: string;
                        createdAt: Date;
                        updatedAt: Date;
                        storageId: string;
                        name: string;
                        slug: string;
                        key: string;
                        issuesCount: number;
                        description: string;
                        visibility: "PUBLIC" | "PRIVATE";
                        displayName: string;
                        state: "ACTIVE" | "DRAFT" | "ARCHIVED";
                        bannerId: string | null;
                        banner: {
                            id: string;
                            name: string;
                            mimeType: "video/mp4', 'image/png" | "image/jpeg" | "image/gif" | "image/tiff" | "video/ogg" | "video/webm";
                            size: number;
                            slug: string;
                            url: string;
                            key: string;
                            isConfirmed: boolean;
                            alt: string;
                            tags: string[];
                        };
                        groupId: string;
                        formId: string | null;
                        keyArtId: string | null;
                    } | {};
                }, {
                    data: {
                        id: string;
                        authorId: string;
                        createdAt: Date;
                        updatedAt: Date;
                        storageId: string;
                        name: string;
                        slug: string;
                        key: string;
                        issuesCount: number;
                        description: string;
                        visibility: "PUBLIC" | "PRIVATE";
                        displayName: string;
                        state: "ACTIVE" | "DRAFT" | "ARCHIVED";
                        bannerId: string | null;
                        banner: {
                            id: string;
                            name: string;
                            mimeType: "video/mp4', 'image/png" | "image/jpeg" | "image/gif" | "image/tiff" | "video/ogg" | "video/webm";
                            size: number;
                            slug: string;
                            url: string;
                            key: string;
                            isConfirmed: boolean;
                            alt: string;
                            tags: string[];
                        };
                        groupId: string;
                        formId: string | null;
                        keyArtId: string | null;
                    } | {};
                }>;
                404: zod.ZodObject<{
                    title: zod.ZodString;
                    status: zod.ZodNumber;
                    detail: zod.ZodOptional<zod.ZodString>;
                }, "strip", zod.ZodTypeAny, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }>;
                409: zod.ZodObject<{
                    title: zod.ZodString;
                    status: zod.ZodNumber;
                    detail: zod.ZodOptional<zod.ZodString>;
                }, "strip", zod.ZodTypeAny, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }>;
                403: zod.ZodObject<{
                    title: zod.ZodString;
                    status: zod.ZodNumber;
                    detail: zod.ZodOptional<zod.ZodString>;
                    errors: zod.ZodOptional<zod.ZodArray<zod.ZodType<ErrorObject, zod.ZodTypeDef, ErrorObject>, "many">>;
                }, "strip", zod.ZodTypeAny, {
                    status: number;
                    title: string;
                    errors?: ErrorObject[] | undefined;
                    detail?: string | undefined;
                }, {
                    status: number;
                    title: string;
                    errors?: ErrorObject[] | undefined;
                    detail?: string | undefined;
                }>;
                500: zod.ZodObject<{
                    title: zod.ZodString;
                    status: zod.ZodNumber;
                    detail: zod.ZodOptional<zod.ZodString>;
                }, "strip", zod.ZodTypeAny, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }>;
            };
        };
        editProjectGeneralSettingsById: {
            metadata: {
                readonly permissions: {
                    readonly OR: readonly ["update:project:any", "update:project:own"];
                };
            };
            summary: "Edit project";
            method: "POST";
            body: zod.ZodObject<{
                displayName: zod.ZodOptional<zod.ZodString>;
                slug: zod.ZodOptional<zod.ZodString>;
                key: zod.ZodOptional<zod.ZodString>;
                bannerId: zod.ZodOptional<zod.ZodNullable<zod.ZodString>>;
                keyArtId: zod.ZodOptional<zod.ZodNullable<zod.ZodString>>;
                description: zod.ZodOptional<zod.ZodString>;
                visibility: zod.ZodOptional<zod.ZodEnum<["PUBLIC", "PRIVATE"]>>;
            }, "strip", zod.ZodTypeAny, {
                slug?: string | undefined;
                key?: string | undefined;
                description?: string | undefined;
                visibility?: "PUBLIC" | "PRIVATE" | undefined;
                displayName?: string | undefined;
                bannerId?: string | null | undefined;
                keyArtId?: string | null | undefined;
            }, {
                slug?: string | undefined;
                key?: string | undefined;
                description?: string | undefined;
                visibility?: "PUBLIC" | "PRIVATE" | undefined;
                displayName?: string | undefined;
                bannerId?: string | null | undefined;
                keyArtId?: string | null | undefined;
            }>;
            path: "/api/projects/by/id/:projectId/edit";
            headers: zod.ZodObject<{
                authorization: zod.ZodString;
            }, "strip", zod.ZodTypeAny, {
                authorization: string;
            }, {
                authorization: string;
            }>;
            responses: {
                200: zod.ZodObject<{
                    data: zod.ZodType<{
                        id: string;
                        authorId: string;
                        createdAt: Date;
                        updatedAt: Date;
                        storageId: string;
                        name: string;
                        slug: string;
                        key: string;
                        issuesCount: number;
                        description: string;
                        visibility: "PUBLIC" | "PRIVATE";
                        displayName: string;
                        state: "ACTIVE" | "DRAFT" | "ARCHIVED";
                        bannerId: string | null;
                        banner: {
                            id: string;
                            name: string;
                            mimeType: "video/mp4', 'image/png" | "image/jpeg" | "image/gif" | "image/tiff" | "video/ogg" | "video/webm";
                            size: number;
                            slug: string;
                            url: string;
                            key: string;
                            isConfirmed: boolean;
                            alt: string;
                            tags: string[];
                        };
                        groupId: string;
                        formId: string | null;
                        keyArtId: string | null;
                    }, zod.ZodTypeDef, {
                        id: string;
                        authorId: string;
                        createdAt: Date;
                        updatedAt: Date;
                        storageId: string;
                        name: string;
                        slug: string;
                        key: string;
                        issuesCount: number;
                        description: string;
                        visibility: "PUBLIC" | "PRIVATE";
                        displayName: string;
                        state: "ACTIVE" | "DRAFT" | "ARCHIVED";
                        bannerId: string | null;
                        banner: {
                            id: string;
                            name: string;
                            mimeType: "video/mp4', 'image/png" | "image/jpeg" | "image/gif" | "image/tiff" | "video/ogg" | "video/webm";
                            size: number;
                            slug: string;
                            url: string;
                            key: string;
                            isConfirmed: boolean;
                            alt: string;
                            tags: string[];
                        };
                        groupId: string;
                        formId: string | null;
                        keyArtId: string | null;
                    }> | zod.ZodObject<{}, "strip", zod.ZodTypeAny, {}, {}>;
                }, "strip", zod.ZodTypeAny, {
                    data: {
                        id: string;
                        authorId: string;
                        createdAt: Date;
                        updatedAt: Date;
                        storageId: string;
                        name: string;
                        slug: string;
                        key: string;
                        issuesCount: number;
                        description: string;
                        visibility: "PUBLIC" | "PRIVATE";
                        displayName: string;
                        state: "ACTIVE" | "DRAFT" | "ARCHIVED";
                        bannerId: string | null;
                        banner: {
                            id: string;
                            name: string;
                            mimeType: "video/mp4', 'image/png" | "image/jpeg" | "image/gif" | "image/tiff" | "video/ogg" | "video/webm";
                            size: number;
                            slug: string;
                            url: string;
                            key: string;
                            isConfirmed: boolean;
                            alt: string;
                            tags: string[];
                        };
                        groupId: string;
                        formId: string | null;
                        keyArtId: string | null;
                    } | {};
                }, {
                    data: {
                        id: string;
                        authorId: string;
                        createdAt: Date;
                        updatedAt: Date;
                        storageId: string;
                        name: string;
                        slug: string;
                        key: string;
                        issuesCount: number;
                        description: string;
                        visibility: "PUBLIC" | "PRIVATE";
                        displayName: string;
                        state: "ACTIVE" | "DRAFT" | "ARCHIVED";
                        bannerId: string | null;
                        banner: {
                            id: string;
                            name: string;
                            mimeType: "video/mp4', 'image/png" | "image/jpeg" | "image/gif" | "image/tiff" | "video/ogg" | "video/webm";
                            size: number;
                            slug: string;
                            url: string;
                            key: string;
                            isConfirmed: boolean;
                            alt: string;
                            tags: string[];
                        };
                        groupId: string;
                        formId: string | null;
                        keyArtId: string | null;
                    } | {};
                }>;
                409: zod.ZodObject<{
                    title: zod.ZodString;
                    status: zod.ZodNumber;
                    detail: zod.ZodOptional<zod.ZodString>;
                }, "strip", zod.ZodTypeAny, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }>;
                403: zod.ZodObject<{
                    title: zod.ZodString;
                    status: zod.ZodNumber;
                    detail: zod.ZodOptional<zod.ZodString>;
                    errors: zod.ZodOptional<zod.ZodArray<zod.ZodType<ErrorObject, zod.ZodTypeDef, ErrorObject>, "many">>;
                }, "strip", zod.ZodTypeAny, {
                    status: number;
                    title: string;
                    errors?: ErrorObject[] | undefined;
                    detail?: string | undefined;
                }, {
                    status: number;
                    title: string;
                    errors?: ErrorObject[] | undefined;
                    detail?: string | undefined;
                }>;
                500: zod.ZodObject<{
                    title: zod.ZodString;
                    status: zod.ZodNumber;
                    detail: zod.ZodOptional<zod.ZodString>;
                }, "strip", zod.ZodTypeAny, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }>;
            };
        };
        changeProjectStateById: {
            metadata: {
                permissions: {
                    readonly OR: readonly ["manage:project:asModerator", "update:project:any", "update:project:own"];
                };
            };
            method: "POST";
            body: zod.ZodObject<{
                state: zod.ZodEnum<["ACTIVE", "DRAFT", "ARCHIVED"]>;
            }, "strip", zod.ZodTypeAny, {
                state: "ACTIVE" | "DRAFT" | "ARCHIVED";
            }, {
                state: "ACTIVE" | "DRAFT" | "ARCHIVED";
            }>;
            path: "/api/projects/by/id/:projectId/state";
            headers: zod.ZodObject<{
                authorization: zod.ZodString;
            }, "strip", zod.ZodTypeAny, {
                authorization: string;
            }, {
                authorization: string;
            }>;
            responses: {
                200: zod.ZodObject<{
                    data: zod.ZodType<{
                        id: string;
                        authorId: string;
                        createdAt: Date;
                        updatedAt: Date;
                        storageId: string;
                        name: string;
                        slug: string;
                        key: string;
                        issuesCount: number;
                        description: string;
                        visibility: "PUBLIC" | "PRIVATE";
                        displayName: string;
                        state: "ACTIVE" | "DRAFT" | "ARCHIVED";
                        bannerId: string | null;
                        banner: {
                            id: string;
                            name: string;
                            mimeType: "video/mp4', 'image/png" | "image/jpeg" | "image/gif" | "image/tiff" | "video/ogg" | "video/webm";
                            size: number;
                            slug: string;
                            url: string;
                            key: string;
                            isConfirmed: boolean;
                            alt: string;
                            tags: string[];
                        };
                        groupId: string;
                        formId: string | null;
                        keyArtId: string | null;
                    }, zod.ZodTypeDef, {
                        id: string;
                        authorId: string;
                        createdAt: Date;
                        updatedAt: Date;
                        storageId: string;
                        name: string;
                        slug: string;
                        key: string;
                        issuesCount: number;
                        description: string;
                        visibility: "PUBLIC" | "PRIVATE";
                        displayName: string;
                        state: "ACTIVE" | "DRAFT" | "ARCHIVED";
                        bannerId: string | null;
                        banner: {
                            id: string;
                            name: string;
                            mimeType: "video/mp4', 'image/png" | "image/jpeg" | "image/gif" | "image/tiff" | "video/ogg" | "video/webm";
                            size: number;
                            slug: string;
                            url: string;
                            key: string;
                            isConfirmed: boolean;
                            alt: string;
                            tags: string[];
                        };
                        groupId: string;
                        formId: string | null;
                        keyArtId: string | null;
                    }> | zod.ZodObject<{}, "strip", zod.ZodTypeAny, {}, {}>;
                }, "strip", zod.ZodTypeAny, {
                    data: {
                        id: string;
                        authorId: string;
                        createdAt: Date;
                        updatedAt: Date;
                        storageId: string;
                        name: string;
                        slug: string;
                        key: string;
                        issuesCount: number;
                        description: string;
                        visibility: "PUBLIC" | "PRIVATE";
                        displayName: string;
                        state: "ACTIVE" | "DRAFT" | "ARCHIVED";
                        bannerId: string | null;
                        banner: {
                            id: string;
                            name: string;
                            mimeType: "video/mp4', 'image/png" | "image/jpeg" | "image/gif" | "image/tiff" | "video/ogg" | "video/webm";
                            size: number;
                            slug: string;
                            url: string;
                            key: string;
                            isConfirmed: boolean;
                            alt: string;
                            tags: string[];
                        };
                        groupId: string;
                        formId: string | null;
                        keyArtId: string | null;
                    } | {};
                }, {
                    data: {
                        id: string;
                        authorId: string;
                        createdAt: Date;
                        updatedAt: Date;
                        storageId: string;
                        name: string;
                        slug: string;
                        key: string;
                        issuesCount: number;
                        description: string;
                        visibility: "PUBLIC" | "PRIVATE";
                        displayName: string;
                        state: "ACTIVE" | "DRAFT" | "ARCHIVED";
                        bannerId: string | null;
                        banner: {
                            id: string;
                            name: string;
                            mimeType: "video/mp4', 'image/png" | "image/jpeg" | "image/gif" | "image/tiff" | "video/ogg" | "video/webm";
                            size: number;
                            slug: string;
                            url: string;
                            key: string;
                            isConfirmed: boolean;
                            alt: string;
                            tags: string[];
                        };
                        groupId: string;
                        formId: string | null;
                        keyArtId: string | null;
                    } | {};
                }>;
                401: zod.ZodObject<{
                    title: zod.ZodString;
                    status: zod.ZodNumber;
                    detail: zod.ZodOptional<zod.ZodString>;
                }, "strip", zod.ZodTypeAny, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }>;
                404: zod.ZodObject<{
                    title: zod.ZodString;
                    status: zod.ZodNumber;
                    detail: zod.ZodOptional<zod.ZodString>;
                }, "strip", zod.ZodTypeAny, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }>;
                403: zod.ZodObject<{
                    title: zod.ZodString;
                    status: zod.ZodNumber;
                    detail: zod.ZodOptional<zod.ZodString>;
                    errors: zod.ZodOptional<zod.ZodArray<zod.ZodType<ErrorObject, zod.ZodTypeDef, ErrorObject>, "many">>;
                }, "strip", zod.ZodTypeAny, {
                    status: number;
                    title: string;
                    errors?: ErrorObject[] | undefined;
                    detail?: string | undefined;
                }, {
                    status: number;
                    title: string;
                    errors?: ErrorObject[] | undefined;
                    detail?: string | undefined;
                }>;
                500: zod.ZodObject<{
                    title: zod.ZodString;
                    status: zod.ZodNumber;
                    detail: zod.ZodOptional<zod.ZodString>;
                }, "strip", zod.ZodTypeAny, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }>;
            };
        };
        manageProjectModerators: {
            metadata: {
                permissions: {
                    readonly OR: readonly ["manage:project:asModerator", "update:project:any", "update:project:own"];
                };
            };
            method: "POST";
            body: zod.ZodObject<{
                rules: zod.ZodArray<zod.ZodObject<{
                    id: zod.ZodOptional<zod.ZodNullable<zod.ZodString>>;
                    memberIds: zod.ZodOptional<zod.ZodArray<zod.ZodString, "many">>;
                    actions: zod.ZodOptional<zod.ZodObject<{
                        comments: zod.ZodObject<{
                            block: zod.ZodBoolean;
                            delete: zod.ZodBoolean;
                        }, "strip", zod.ZodTypeAny, {
                            block: boolean;
                            delete: boolean;
                        }, {
                            block: boolean;
                            delete: boolean;
                        }>;
                        issues: zod.ZodObject<{
                            block: zod.ZodBoolean;
                            delete: zod.ZodBoolean;
                            updateState: zod.ZodBoolean;
                            updateFields: zod.ZodBoolean;
                            updateHiddenFields: zod.ZodBoolean;
                            updateInternalFields: zod.ZodBoolean;
                            updateVisibility: zod.ZodBoolean;
                            updateTags: zod.ZodBoolean;
                            updateConfidents: zod.ZodBoolean;
                        }, "strip", zod.ZodTypeAny, {
                            block: boolean;
                            delete: boolean;
                            updateState: boolean;
                            updateFields: boolean;
                            updateVisibility: boolean;
                            updateTags: boolean;
                            updateHiddenFields: boolean;
                            updateInternalFields: boolean;
                            updateConfidents: boolean;
                        }, {
                            block: boolean;
                            delete: boolean;
                            updateState: boolean;
                            updateFields: boolean;
                            updateVisibility: boolean;
                            updateTags: boolean;
                            updateHiddenFields: boolean;
                            updateInternalFields: boolean;
                            updateConfidents: boolean;
                        }>;
                        project: zod.ZodObject<{
                            updateGeneralSettings: zod.ZodBoolean;
                            updateState: zod.ZodBoolean;
                            updateForm: zod.ZodBoolean;
                            updateModerators: zod.ZodBoolean;
                            updateConfidents: zod.ZodBoolean;
                        }, "strip", zod.ZodTypeAny, {
                            updateState: boolean;
                            updateConfidents: boolean;
                            updateGeneralSettings: boolean;
                            updateForm: boolean;
                            updateModerators: boolean;
                        }, {
                            updateState: boolean;
                            updateConfidents: boolean;
                            updateGeneralSettings: boolean;
                            updateForm: boolean;
                            updateModerators: boolean;
                        }>;
                    }, "strip", zod.ZodTypeAny, {
                        issues: {
                            block: boolean;
                            delete: boolean;
                            updateState: boolean;
                            updateFields: boolean;
                            updateVisibility: boolean;
                            updateTags: boolean;
                            updateHiddenFields: boolean;
                            updateInternalFields: boolean;
                            updateConfidents: boolean;
                        };
                        project: {
                            updateState: boolean;
                            updateConfidents: boolean;
                            updateGeneralSettings: boolean;
                            updateForm: boolean;
                            updateModerators: boolean;
                        };
                        comments: {
                            block: boolean;
                            delete: boolean;
                        };
                    }, {
                        issues: {
                            block: boolean;
                            delete: boolean;
                            updateState: boolean;
                            updateFields: boolean;
                            updateVisibility: boolean;
                            updateTags: boolean;
                            updateHiddenFields: boolean;
                            updateInternalFields: boolean;
                            updateConfidents: boolean;
                        };
                        project: {
                            updateState: boolean;
                            updateConfidents: boolean;
                            updateGeneralSettings: boolean;
                            updateForm: boolean;
                            updateModerators: boolean;
                        };
                        comments: {
                            block: boolean;
                            delete: boolean;
                        };
                    }>>;
                    displayRole: zod.ZodString;
                    displayRoleColor: zod.ZodString;
                }, "strip", zod.ZodTypeAny, {
                    displayRole: string;
                    displayRoleColor: string;
                    id?: string | null | undefined;
                    memberIds?: string[] | undefined;
                    actions?: {
                        issues: {
                            block: boolean;
                            delete: boolean;
                            updateState: boolean;
                            updateFields: boolean;
                            updateVisibility: boolean;
                            updateTags: boolean;
                            updateHiddenFields: boolean;
                            updateInternalFields: boolean;
                            updateConfidents: boolean;
                        };
                        project: {
                            updateState: boolean;
                            updateConfidents: boolean;
                            updateGeneralSettings: boolean;
                            updateForm: boolean;
                            updateModerators: boolean;
                        };
                        comments: {
                            block: boolean;
                            delete: boolean;
                        };
                    } | undefined;
                }, {
                    displayRole: string;
                    displayRoleColor: string;
                    id?: string | null | undefined;
                    memberIds?: string[] | undefined;
                    actions?: {
                        issues: {
                            block: boolean;
                            delete: boolean;
                            updateState: boolean;
                            updateFields: boolean;
                            updateVisibility: boolean;
                            updateTags: boolean;
                            updateHiddenFields: boolean;
                            updateInternalFields: boolean;
                            updateConfidents: boolean;
                        };
                        project: {
                            updateState: boolean;
                            updateConfidents: boolean;
                            updateGeneralSettings: boolean;
                            updateForm: boolean;
                            updateModerators: boolean;
                        };
                        comments: {
                            block: boolean;
                            delete: boolean;
                        };
                    } | undefined;
                }>, "many">;
            }, "strip", zod.ZodTypeAny, {
                rules: {
                    displayRole: string;
                    displayRoleColor: string;
                    id?: string | null | undefined;
                    memberIds?: string[] | undefined;
                    actions?: {
                        issues: {
                            block: boolean;
                            delete: boolean;
                            updateState: boolean;
                            updateFields: boolean;
                            updateVisibility: boolean;
                            updateTags: boolean;
                            updateHiddenFields: boolean;
                            updateInternalFields: boolean;
                            updateConfidents: boolean;
                        };
                        project: {
                            updateState: boolean;
                            updateConfidents: boolean;
                            updateGeneralSettings: boolean;
                            updateForm: boolean;
                            updateModerators: boolean;
                        };
                        comments: {
                            block: boolean;
                            delete: boolean;
                        };
                    } | undefined;
                }[];
            }, {
                rules: {
                    displayRole: string;
                    displayRoleColor: string;
                    id?: string | null | undefined;
                    memberIds?: string[] | undefined;
                    actions?: {
                        issues: {
                            block: boolean;
                            delete: boolean;
                            updateState: boolean;
                            updateFields: boolean;
                            updateVisibility: boolean;
                            updateTags: boolean;
                            updateHiddenFields: boolean;
                            updateInternalFields: boolean;
                            updateConfidents: boolean;
                        };
                        project: {
                            updateState: boolean;
                            updateConfidents: boolean;
                            updateGeneralSettings: boolean;
                            updateForm: boolean;
                            updateModerators: boolean;
                        };
                        comments: {
                            block: boolean;
                            delete: boolean;
                        };
                    } | undefined;
                }[];
            }>;
            path: "/api/projects/by/id/:projectId/moderators/manage";
            headers: zod.ZodObject<{
                authorization: zod.ZodString;
            }, "strip", zod.ZodTypeAny, {
                authorization: string;
            }, {
                authorization: string;
            }>;
            responses: {
                200: zod.ZodObject<{
                    data: zod.ZodType<{
                        id: string;
                        createdAt: string;
                        updatedAt: string;
                        projectId: string;
                        displayRole: string;
                        displayRoleColor: string;
                        memberIds: string[];
                        actions: {
                            issues: {
                                block: boolean;
                                delete: boolean;
                                updateState: boolean;
                                updateFields: boolean;
                                updateVisibility: boolean;
                                updateTags: boolean;
                            };
                            comments: {
                                block: boolean;
                                delete: boolean;
                            };
                            issueConfidents: {
                                delete: boolean;
                                add: boolean;
                            };
                            projectConfidents: {
                                delete: boolean;
                                add: boolean;
                            };
                        };
                    }, zod.ZodTypeDef, {
                        id: string;
                        createdAt: string;
                        updatedAt: string;
                        projectId: string;
                        displayRole: string;
                        displayRoleColor: string;
                        memberIds: string[];
                        actions: {
                            issues: {
                                block: boolean;
                                delete: boolean;
                                updateState: boolean;
                                updateFields: boolean;
                                updateVisibility: boolean;
                                updateTags: boolean;
                            };
                            comments: {
                                block: boolean;
                                delete: boolean;
                            };
                            issueConfidents: {
                                delete: boolean;
                                add: boolean;
                            };
                            projectConfidents: {
                                delete: boolean;
                                add: boolean;
                            };
                        };
                    }> | zod.ZodObject<{}, "strip", zod.ZodTypeAny, {}, {}>;
                }, "strip", zod.ZodTypeAny, {
                    data: {
                        id: string;
                        createdAt: string;
                        updatedAt: string;
                        projectId: string;
                        displayRole: string;
                        displayRoleColor: string;
                        memberIds: string[];
                        actions: {
                            issues: {
                                block: boolean;
                                delete: boolean;
                                updateState: boolean;
                                updateFields: boolean;
                                updateVisibility: boolean;
                                updateTags: boolean;
                            };
                            comments: {
                                block: boolean;
                                delete: boolean;
                            };
                            issueConfidents: {
                                delete: boolean;
                                add: boolean;
                            };
                            projectConfidents: {
                                delete: boolean;
                                add: boolean;
                            };
                        };
                    } | {};
                }, {
                    data: {
                        id: string;
                        createdAt: string;
                        updatedAt: string;
                        projectId: string;
                        displayRole: string;
                        displayRoleColor: string;
                        memberIds: string[];
                        actions: {
                            issues: {
                                block: boolean;
                                delete: boolean;
                                updateState: boolean;
                                updateFields: boolean;
                                updateVisibility: boolean;
                                updateTags: boolean;
                            };
                            comments: {
                                block: boolean;
                                delete: boolean;
                            };
                            issueConfidents: {
                                delete: boolean;
                                add: boolean;
                            };
                            projectConfidents: {
                                delete: boolean;
                                add: boolean;
                            };
                        };
                    } | {};
                }>;
                403: zod.ZodObject<{
                    title: zod.ZodString;
                    status: zod.ZodNumber;
                    detail: zod.ZodOptional<zod.ZodString>;
                    errors: zod.ZodOptional<zod.ZodArray<zod.ZodType<ErrorObject, zod.ZodTypeDef, ErrorObject>, "many">>;
                }, "strip", zod.ZodTypeAny, {
                    status: number;
                    title: string;
                    errors?: ErrorObject[] | undefined;
                    detail?: string | undefined;
                }, {
                    status: number;
                    title: string;
                    errors?: ErrorObject[] | undefined;
                    detail?: string | undefined;
                }>;
                404: zod.ZodObject<{
                    title: zod.ZodString;
                    status: zod.ZodNumber;
                    detail: zod.ZodOptional<zod.ZodString>;
                }, "strip", zod.ZodTypeAny, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }>;
                401: zod.ZodObject<{
                    title: zod.ZodString;
                    status: zod.ZodNumber;
                    detail: zod.ZodOptional<zod.ZodString>;
                }, "strip", zod.ZodTypeAny, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }>;
                500: zod.ZodObject<{
                    title: zod.ZodString;
                    status: zod.ZodNumber;
                    detail: zod.ZodOptional<zod.ZodString>;
                }, "strip", zod.ZodTypeAny, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }>;
            };
        };
        deleteProjectModeratorById: {
            metadata: {
                permissions: {
                    OR: ("manage:project:asModerator" | "update:project:any" | "update:project:own")[];
                };
            };
            summary: "Delete project moderator by id";
            method: "DELETE";
            body: zod.ZodOptional<zod.ZodNullable<zod.ZodObject<{}, "strip", zod.ZodTypeAny, {}, {}>>>;
            path: "/api/projects/by/id/:projectId/moderators/:moderatorId";
            headers: zod.ZodObject<{
                authorization: zod.ZodString;
            }, "strip", zod.ZodTypeAny, {
                authorization: string;
            }, {
                authorization: string;
            }>;
            responses: {
                204: zod.ZodNullable<zod.ZodObject<{}, "strip", zod.ZodTypeAny, {}, {}>>;
                401: zod.ZodObject<{
                    title: zod.ZodString;
                    status: zod.ZodNumber;
                    detail: zod.ZodOptional<zod.ZodString>;
                }, "strip", zod.ZodTypeAny, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }>;
                404: zod.ZodObject<{
                    title: zod.ZodString;
                    status: zod.ZodNumber;
                    detail: zod.ZodOptional<zod.ZodString>;
                }, "strip", zod.ZodTypeAny, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }>;
                403: zod.ZodObject<{
                    title: zod.ZodString;
                    status: zod.ZodNumber;
                    detail: zod.ZodOptional<zod.ZodString>;
                    errors: zod.ZodOptional<zod.ZodArray<zod.ZodType<ErrorObject, zod.ZodTypeDef, ErrorObject>, "many">>;
                }, "strip", zod.ZodTypeAny, {
                    status: number;
                    title: string;
                    errors?: ErrorObject[] | undefined;
                    detail?: string | undefined;
                }, {
                    status: number;
                    title: string;
                    errors?: ErrorObject[] | undefined;
                    detail?: string | undefined;
                }>;
                500: zod.ZodObject<{
                    title: zod.ZodString;
                    status: zod.ZodNumber;
                    detail: zod.ZodOptional<zod.ZodString>;
                }, "strip", zod.ZodTypeAny, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }>;
            };
        };
    };
    projectConfidences: {
        getProjectConfidences: {
            metadata: {
                permissions: {
                    OR: ("read:confidence:any" | "read:confidence:own")[];
                };
            };
            query: zod.ZodObject<{
                limit: zod.ZodOptional<zod.ZodString>;
                page: zod.ZodOptional<zod.ZodString>;
                projectId: zod.ZodOptional<zod.ZodString>;
                authorId: zod.ZodOptional<zod.ZodString>;
                memberId: zod.ZodOptional<zod.ZodString>;
            }, "strip", zod.ZodTypeAny, {
                authorId?: string | undefined;
                memberId?: string | undefined;
                limit?: string | undefined;
                page?: string | undefined;
                projectId?: string | undefined;
            }, {
                authorId?: string | undefined;
                memberId?: string | undefined;
                limit?: string | undefined;
                page?: string | undefined;
                projectId?: string | undefined;
            }>;
            summary: "Get project confidences by query";
            method: "GET";
            path: "/api/project-confidences";
            headers: zod.ZodObject<{
                authorization: zod.ZodString;
            }, "strip", zod.ZodTypeAny, {
                authorization: string;
            }, {
                authorization: string;
            }>;
            responses: {
                200: zod.ZodObject<{
                    data: zod.ZodType<{
                        id: string;
                        authorId: string;
                        memberId: string;
                        createdAt: string;
                        updatedAt: string;
                        projectId: string;
                    }, zod.ZodTypeDef, {
                        id: string;
                        authorId: string;
                        memberId: string;
                        createdAt: string;
                        updatedAt: string;
                        projectId: string;
                    }> | zod.ZodObject<{}, "strip", zod.ZodTypeAny, {}, {}>;
                }, "strip", zod.ZodTypeAny, {
                    data: {
                        id: string;
                        authorId: string;
                        memberId: string;
                        createdAt: string;
                        updatedAt: string;
                        projectId: string;
                    } | {};
                }, {
                    data: {
                        id: string;
                        authorId: string;
                        memberId: string;
                        createdAt: string;
                        updatedAt: string;
                        projectId: string;
                    } | {};
                }>;
                500: zod.ZodObject<{
                    message: zod.ZodString;
                }, "strip", zod.ZodTypeAny, {
                    message: string;
                }, {
                    message: string;
                }>;
            };
        };
        getProjectConfidenceById: {
            metadata: {
                permissions: {
                    OR: ("read:confidence:any" | "read:confidence:own")[];
                };
            };
            summary: "Get project confidence by id";
            method: "GET";
            path: "/api/project-confidences/:confidenceId";
            headers: zod.ZodObject<{
                authorization: zod.ZodString;
            }, "strip", zod.ZodTypeAny, {
                authorization: string;
            }, {
                authorization: string;
            }>;
            responses: {
                200: zod.ZodObject<{
                    data: zod.ZodType<{
                        id: string;
                        authorId: string;
                        memberId: string;
                        createdAt: string;
                        updatedAt: string;
                        projectId: string;
                    }, zod.ZodTypeDef, {
                        id: string;
                        authorId: string;
                        memberId: string;
                        createdAt: string;
                        updatedAt: string;
                        projectId: string;
                    }> | zod.ZodObject<{}, "strip", zod.ZodTypeAny, {}, {}>;
                }, "strip", zod.ZodTypeAny, {
                    data: {
                        id: string;
                        authorId: string;
                        memberId: string;
                        createdAt: string;
                        updatedAt: string;
                        projectId: string;
                    } | {};
                }, {
                    data: {
                        id: string;
                        authorId: string;
                        memberId: string;
                        createdAt: string;
                        updatedAt: string;
                        projectId: string;
                    } | {};
                }>;
                404: zod.ZodObject<{
                    title: zod.ZodString;
                    status: zod.ZodNumber;
                    detail: zod.ZodOptional<zod.ZodString>;
                }, "strip", zod.ZodTypeAny, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }>;
                500: zod.ZodObject<{
                    title: zod.ZodString;
                    status: zod.ZodNumber;
                    detail: zod.ZodOptional<zod.ZodString>;
                }, "strip", zod.ZodTypeAny, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }>;
            };
        };
        deleteProjectConfidence: {
            metadata: {
                permissions: {
                    OR: ("delete:confidence:any" | "delete:confidence:own" | "manage:project:asModerator")[];
                };
            };
            summary: "Delete project confidence by memberId and projectId";
            method: "DELETE";
            body: zod.ZodObject<{
                projectId: zod.ZodString;
                memberId: zod.ZodString;
            }, "strip", zod.ZodTypeAny, {
                memberId: string;
                projectId: string;
            }, {
                memberId: string;
                projectId: string;
            }>;
            path: "/api/project-confidences";
            headers: zod.ZodObject<{
                authorization: zod.ZodString;
            }, "strip", zod.ZodTypeAny, {
                authorization: string;
            }, {
                authorization: string;
            }>;
            responses: {
                204: zod.ZodNullable<zod.ZodObject<{}, "strip", zod.ZodTypeAny, {}, {}>>;
                403: zod.ZodObject<{
                    title: zod.ZodString;
                    status: zod.ZodNumber;
                    detail: zod.ZodOptional<zod.ZodString>;
                    errors: zod.ZodOptional<zod.ZodArray<zod.ZodType<ErrorObject, zod.ZodTypeDef, ErrorObject>, "many">>;
                }, "strip", zod.ZodTypeAny, {
                    status: number;
                    title: string;
                    errors?: ErrorObject[] | undefined;
                    detail?: string | undefined;
                }, {
                    status: number;
                    title: string;
                    errors?: ErrorObject[] | undefined;
                    detail?: string | undefined;
                }>;
                409: zod.ZodObject<{
                    title: zod.ZodString;
                    status: zod.ZodNumber;
                    detail: zod.ZodOptional<zod.ZodString>;
                }, "strip", zod.ZodTypeAny, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }>;
                500: zod.ZodObject<{
                    title: zod.ZodString;
                    status: zod.ZodNumber;
                    detail: zod.ZodOptional<zod.ZodString>;
                }, "strip", zod.ZodTypeAny, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }>;
            };
        };
        createMyProjectConfidence: {
            metadata: {
                readonly permissions: "create:confidence:own";
            };
            summary: "Create project confidence record by logged member";
            method: "POST";
            body: zod.ZodObject<{
                projectId: zod.ZodString;
                memberId: zod.ZodString;
            }, "strip", zod.ZodTypeAny, {
                memberId: string;
                projectId: string;
            }, {
                memberId: string;
                projectId: string;
            }>;
            path: "/api/members/me/project-confidences";
            headers: zod.ZodObject<{
                authorization: zod.ZodString;
            }, "strip", zod.ZodTypeAny, {
                authorization: string;
            }, {
                authorization: string;
            }>;
            responses: {
                200: zod.ZodObject<{
                    data: zod.ZodType<{
                        id: string;
                        authorId: string;
                        memberId: string;
                        createdAt: string;
                        updatedAt: string;
                        projectId: string;
                    }, zod.ZodTypeDef, {
                        id: string;
                        authorId: string;
                        memberId: string;
                        createdAt: string;
                        updatedAt: string;
                        projectId: string;
                    }> | zod.ZodObject<{}, "strip", zod.ZodTypeAny, {}, {}>;
                }, "strip", zod.ZodTypeAny, {
                    data: {
                        id: string;
                        authorId: string;
                        memberId: string;
                        createdAt: string;
                        updatedAt: string;
                        projectId: string;
                    } | {};
                }, {
                    data: {
                        id: string;
                        authorId: string;
                        memberId: string;
                        createdAt: string;
                        updatedAt: string;
                        projectId: string;
                    } | {};
                }>;
                409: zod.ZodObject<{
                    title: zod.ZodString;
                    status: zod.ZodNumber;
                    detail: zod.ZodOptional<zod.ZodString>;
                }, "strip", zod.ZodTypeAny, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }>;
                500: zod.ZodObject<{
                    title: zod.ZodString;
                    status: zod.ZodNumber;
                    detail: zod.ZodOptional<zod.ZodString>;
                }, "strip", zod.ZodTypeAny, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }>;
            };
        };
        createProjectConfidence: {
            metadata: {
                readonly permissions: "create:confidence:any";
            };
            summary: "Create project confidence record managed by moderator or admin";
            method: "POST";
            body: zod.ZodObject<{
                authorId: zod.ZodString;
                memberId: zod.ZodString;
                projectId: zod.ZodString;
            }, "strip", zod.ZodTypeAny, {
                authorId: string;
                memberId: string;
                projectId: string;
            }, {
                authorId: string;
                memberId: string;
                projectId: string;
            }>;
            path: "/api/project-confidences";
            headers: zod.ZodObject<{
                authorization: zod.ZodString;
            }, "strip", zod.ZodTypeAny, {
                authorization: string;
            }, {
                authorization: string;
            }>;
            responses: {
                200: zod.ZodObject<{
                    data: zod.ZodType<{
                        id: string;
                        authorId: string;
                        memberId: string;
                        createdAt: string;
                        updatedAt: string;
                        projectId: string;
                    }, zod.ZodTypeDef, {
                        id: string;
                        authorId: string;
                        memberId: string;
                        createdAt: string;
                        updatedAt: string;
                        projectId: string;
                    }> | zod.ZodObject<{}, "strip", zod.ZodTypeAny, {}, {}>;
                }, "strip", zod.ZodTypeAny, {
                    data: {
                        id: string;
                        authorId: string;
                        memberId: string;
                        createdAt: string;
                        updatedAt: string;
                        projectId: string;
                    } | {};
                }, {
                    data: {
                        id: string;
                        authorId: string;
                        memberId: string;
                        createdAt: string;
                        updatedAt: string;
                        projectId: string;
                    } | {};
                }>;
                409: zod.ZodObject<{
                    title: zod.ZodString;
                    status: zod.ZodNumber;
                    detail: zod.ZodOptional<zod.ZodString>;
                }, "strip", zod.ZodTypeAny, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }>;
                500: zod.ZodObject<{
                    title: zod.ZodString;
                    status: zod.ZodNumber;
                    detail: zod.ZodOptional<zod.ZodString>;
                }, "strip", zod.ZodTypeAny, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }>;
            };
        };
    };
    issueConfidences: {
        getIssueConfidences: {
            metadata: {
                permissions: {
                    OR: ("read:confidence:any" | "read:confidence:own")[];
                };
            };
            query: zod.ZodObject<{
                limit: zod.ZodOptional<zod.ZodString>;
                page: zod.ZodOptional<zod.ZodString>;
                issueId: zod.ZodOptional<zod.ZodString>;
                authorId: zod.ZodOptional<zod.ZodString>;
                memberId: zod.ZodOptional<zod.ZodString>;
            }, "strip", zod.ZodTypeAny, {
                authorId?: string | undefined;
                memberId?: string | undefined;
                issueId?: string | undefined;
                limit?: string | undefined;
                page?: string | undefined;
            }, {
                authorId?: string | undefined;
                memberId?: string | undefined;
                issueId?: string | undefined;
                limit?: string | undefined;
                page?: string | undefined;
            }>;
            summary: "Get issue confidences by query";
            method: "GET";
            path: "/api/issue-confidences";
            headers: zod.ZodObject<{
                authorization: zod.ZodString;
            }, "strip", zod.ZodTypeAny, {
                authorization: string;
            }, {
                authorization: string;
            }>;
            responses: {
                200: zod.ZodObject<{
                    data: zod.ZodType<{
                        id: string;
                        authorId: string;
                        memberId: string;
                        issueId: string;
                        createdAt: string;
                        updatedAt: string;
                    }, zod.ZodTypeDef, {
                        id: string;
                        authorId: string;
                        memberId: string;
                        issueId: string;
                        createdAt: string;
                        updatedAt: string;
                    }> | zod.ZodObject<{}, "strip", zod.ZodTypeAny, {}, {}>;
                }, "strip", zod.ZodTypeAny, {
                    data: {
                        id: string;
                        authorId: string;
                        memberId: string;
                        issueId: string;
                        createdAt: string;
                        updatedAt: string;
                    } | {};
                }, {
                    data: {
                        id: string;
                        authorId: string;
                        memberId: string;
                        issueId: string;
                        createdAt: string;
                        updatedAt: string;
                    } | {};
                }>;
                500: zod.ZodObject<{
                    message: zod.ZodString;
                }, "strip", zod.ZodTypeAny, {
                    message: string;
                }, {
                    message: string;
                }>;
            };
        };
        getIssueConfidenceById: {
            metadata: {
                permissions: {
                    OR: ("read:confidence:any" | "read:confidence:own")[];
                };
            };
            summary: "Get issue confidence by id";
            method: "GET";
            path: "/api/issue-confidences/:confidenceId";
            headers: zod.ZodObject<{
                authorization: zod.ZodString;
            }, "strip", zod.ZodTypeAny, {
                authorization: string;
            }, {
                authorization: string;
            }>;
            responses: {
                200: zod.ZodObject<{
                    data: zod.ZodType<{
                        id: string;
                        authorId: string;
                        memberId: string;
                        issueId: string;
                        createdAt: string;
                        updatedAt: string;
                    }, zod.ZodTypeDef, {
                        id: string;
                        authorId: string;
                        memberId: string;
                        issueId: string;
                        createdAt: string;
                        updatedAt: string;
                    }> | zod.ZodObject<{}, "strip", zod.ZodTypeAny, {}, {}>;
                }, "strip", zod.ZodTypeAny, {
                    data: {
                        id: string;
                        authorId: string;
                        memberId: string;
                        issueId: string;
                        createdAt: string;
                        updatedAt: string;
                    } | {};
                }, {
                    data: {
                        id: string;
                        authorId: string;
                        memberId: string;
                        issueId: string;
                        createdAt: string;
                        updatedAt: string;
                    } | {};
                }>;
                404: zod.ZodObject<{
                    title: zod.ZodString;
                    status: zod.ZodNumber;
                    detail: zod.ZodOptional<zod.ZodString>;
                }, "strip", zod.ZodTypeAny, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }>;
                500: zod.ZodObject<{
                    title: zod.ZodString;
                    status: zod.ZodNumber;
                    detail: zod.ZodOptional<zod.ZodString>;
                }, "strip", zod.ZodTypeAny, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }>;
            };
        };
        deleteIssueConfidence: {
            metadata: {
                permissions: {
                    OR: ("delete:confidence:any" | "delete:confidence:own" | "manage:project:asModerator")[];
                };
            };
            summary: "Delete issue confidence by memberId and issueId";
            method: "DELETE";
            body: zod.ZodObject<{
                issueId: zod.ZodString;
                memberId: zod.ZodString;
            }, "strip", zod.ZodTypeAny, {
                memberId: string;
                issueId: string;
            }, {
                memberId: string;
                issueId: string;
            }>;
            path: "/api/issue-confidences";
            headers: zod.ZodObject<{
                authorization: zod.ZodString;
            }, "strip", zod.ZodTypeAny, {
                authorization: string;
            }, {
                authorization: string;
            }>;
            responses: {
                204: zod.ZodNullable<zod.ZodObject<{}, "strip", zod.ZodTypeAny, {}, {}>>;
                403: zod.ZodObject<{
                    title: zod.ZodString;
                    status: zod.ZodNumber;
                    detail: zod.ZodOptional<zod.ZodString>;
                    errors: zod.ZodOptional<zod.ZodArray<zod.ZodType<ErrorObject, zod.ZodTypeDef, ErrorObject>, "many">>;
                }, "strip", zod.ZodTypeAny, {
                    status: number;
                    title: string;
                    errors?: ErrorObject[] | undefined;
                    detail?: string | undefined;
                }, {
                    status: number;
                    title: string;
                    errors?: ErrorObject[] | undefined;
                    detail?: string | undefined;
                }>;
                409: zod.ZodObject<{
                    title: zod.ZodString;
                    status: zod.ZodNumber;
                    detail: zod.ZodOptional<zod.ZodString>;
                }, "strip", zod.ZodTypeAny, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }>;
                500: zod.ZodObject<{
                    title: zod.ZodString;
                    status: zod.ZodNumber;
                    detail: zod.ZodOptional<zod.ZodString>;
                }, "strip", zod.ZodTypeAny, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }>;
            };
        };
        createMyIssueConfidence: {
            metadata: {
                readonly permissions: "create:confidence:own";
            };
            summary: "Create issue confidence record by logged member";
            method: "POST";
            body: zod.ZodObject<{
                issueId: zod.ZodString;
                memberId: zod.ZodString;
            }, "strip", zod.ZodTypeAny, {
                memberId: string;
                issueId: string;
            }, {
                memberId: string;
                issueId: string;
            }>;
            path: "/api/members/me/issue-confidences";
            headers: zod.ZodObject<{
                authorization: zod.ZodString;
            }, "strip", zod.ZodTypeAny, {
                authorization: string;
            }, {
                authorization: string;
            }>;
            responses: {
                200: zod.ZodObject<{
                    data: zod.ZodType<{
                        id: string;
                        authorId: string;
                        memberId: string;
                        issueId: string;
                        createdAt: string;
                        updatedAt: string;
                    }, zod.ZodTypeDef, {
                        id: string;
                        authorId: string;
                        memberId: string;
                        issueId: string;
                        createdAt: string;
                        updatedAt: string;
                    }> | zod.ZodObject<{}, "strip", zod.ZodTypeAny, {}, {}>;
                }, "strip", zod.ZodTypeAny, {
                    data: {
                        id: string;
                        authorId: string;
                        memberId: string;
                        issueId: string;
                        createdAt: string;
                        updatedAt: string;
                    } | {};
                }, {
                    data: {
                        id: string;
                        authorId: string;
                        memberId: string;
                        issueId: string;
                        createdAt: string;
                        updatedAt: string;
                    } | {};
                }>;
                409: zod.ZodObject<{
                    title: zod.ZodString;
                    status: zod.ZodNumber;
                    detail: zod.ZodOptional<zod.ZodString>;
                }, "strip", zod.ZodTypeAny, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }>;
                500: zod.ZodObject<{
                    title: zod.ZodString;
                    status: zod.ZodNumber;
                    detail: zod.ZodOptional<zod.ZodString>;
                }, "strip", zod.ZodTypeAny, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }>;
            };
        };
        createIssueConfidence: {
            metadata: {
                readonly permissions: "create:confidence:any";
            };
            summary: "Create project confidence record managed by moderator or admin";
            method: "POST";
            body: zod.ZodObject<{
                authorId: zod.ZodString;
                memberId: zod.ZodString;
                issueId: zod.ZodString;
            }, "strip", zod.ZodTypeAny, {
                authorId: string;
                memberId: string;
                issueId: string;
            }, {
                authorId: string;
                memberId: string;
                issueId: string;
            }>;
            path: "/api/issue-confidences";
            headers: zod.ZodObject<{
                authorization: zod.ZodString;
            }, "strip", zod.ZodTypeAny, {
                authorization: string;
            }, {
                authorization: string;
            }>;
            responses: {
                200: zod.ZodObject<{
                    data: zod.ZodType<{
                        id: string;
                        memberId: {
                            id: string;
                            createdAt: Date;
                            reputation: number;
                            issuesCount: number;
                            repliesCount: number;
                            likesGiven: number;
                            solvedCount: number;
                        };
                        issueId: string;
                        author: {
                            id: string;
                            createdAt: Date;
                            reputation: number;
                            issuesCount: number;
                            repliesCount: number;
                            likesGiven: number;
                            solvedCount: number;
                        };
                    }[], zod.ZodTypeDef, {
                        id: string;
                        memberId: {
                            id: string;
                            createdAt: Date;
                            reputation: number;
                            issuesCount: number;
                            repliesCount: number;
                            likesGiven: number;
                            solvedCount: number;
                        };
                        issueId: string;
                        author: {
                            id: string;
                            createdAt: Date;
                            reputation: number;
                            issuesCount: number;
                            repliesCount: number;
                            likesGiven: number;
                            solvedCount: number;
                        };
                    }[]> | zod.ZodObject<{}, "strip", zod.ZodTypeAny, {}, {}>;
                }, "strip", zod.ZodTypeAny, {
                    data: {
                        id: string;
                        memberId: {
                            id: string;
                            createdAt: Date;
                            reputation: number;
                            issuesCount: number;
                            repliesCount: number;
                            likesGiven: number;
                            solvedCount: number;
                        };
                        issueId: string;
                        author: {
                            id: string;
                            createdAt: Date;
                            reputation: number;
                            issuesCount: number;
                            repliesCount: number;
                            likesGiven: number;
                            solvedCount: number;
                        };
                    }[] | {};
                }, {
                    data: {
                        id: string;
                        memberId: {
                            id: string;
                            createdAt: Date;
                            reputation: number;
                            issuesCount: number;
                            repliesCount: number;
                            likesGiven: number;
                            solvedCount: number;
                        };
                        issueId: string;
                        author: {
                            id: string;
                            createdAt: Date;
                            reputation: number;
                            issuesCount: number;
                            repliesCount: number;
                            likesGiven: number;
                            solvedCount: number;
                        };
                    }[] | {};
                }>;
                409: zod.ZodObject<{
                    title: zod.ZodString;
                    status: zod.ZodNumber;
                    detail: zod.ZodOptional<zod.ZodString>;
                }, "strip", zod.ZodTypeAny, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }>;
                500: zod.ZodObject<{
                    title: zod.ZodString;
                    status: zod.ZodNumber;
                    detail: zod.ZodOptional<zod.ZodString>;
                }, "strip", zod.ZodTypeAny, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }>;
            };
        };
    };
    files: {
        getMyFileById: {
            metadata: {
                readonly isPublic: true;
                readonly permissions: "read:file:own";
            };
            summary: "Get file by id";
            method: "GET";
            path: "/api/files/:fileId";
            headers: zod.ZodOptional<zod.ZodObject<{
                authorization: zod.ZodString;
            }, "strip", zod.ZodTypeAny, {
                authorization: string;
            }, {
                authorization: string;
            }>>;
            responses: {
                200: zod.ZodObject<{
                    data: zod.ZodType<{
                        id: string;
                        authorId: string;
                        createdAt: Date;
                        updatedAt: Date;
                        isDeleted: boolean;
                        name: string;
                        mimeType: "video/mp4', 'image/png" | "image/jpeg" | "image/gif" | "image/tiff" | "video/ogg" | "video/webm";
                        size: number;
                        slug: string;
                        url: string;
                        key: string;
                        isConfirmed: boolean;
                        alt: string;
                        tags: string[];
                        unassociatedAt?: Date | null | undefined;
                    }, zod.ZodTypeDef, {
                        id: string;
                        authorId: string;
                        createdAt: Date;
                        updatedAt: Date;
                        isDeleted: boolean;
                        name: string;
                        mimeType: "video/mp4', 'image/png" | "image/jpeg" | "image/gif" | "image/tiff" | "video/ogg" | "video/webm";
                        size: number;
                        slug: string;
                        url: string;
                        key: string;
                        isConfirmed: boolean;
                        alt: string;
                        tags: string[];
                        unassociatedAt?: Date | null | undefined;
                    }> | zod.ZodObject<{}, "strip", zod.ZodTypeAny, {}, {}>;
                }, "strip", zod.ZodTypeAny, {
                    data: {
                        id: string;
                        authorId: string;
                        createdAt: Date;
                        updatedAt: Date;
                        isDeleted: boolean;
                        name: string;
                        mimeType: "video/mp4', 'image/png" | "image/jpeg" | "image/gif" | "image/tiff" | "video/ogg" | "video/webm";
                        size: number;
                        slug: string;
                        url: string;
                        key: string;
                        isConfirmed: boolean;
                        alt: string;
                        tags: string[];
                        unassociatedAt?: Date | null | undefined;
                    } | {};
                }, {
                    data: {
                        id: string;
                        authorId: string;
                        createdAt: Date;
                        updatedAt: Date;
                        isDeleted: boolean;
                        name: string;
                        mimeType: "video/mp4', 'image/png" | "image/jpeg" | "image/gif" | "image/tiff" | "video/ogg" | "video/webm";
                        size: number;
                        slug: string;
                        url: string;
                        key: string;
                        isConfirmed: boolean;
                        alt: string;
                        tags: string[];
                        unassociatedAt?: Date | null | undefined;
                    } | {};
                }>;
                404: zod.ZodObject<{
                    title: zod.ZodString;
                    status: zod.ZodNumber;
                    detail: zod.ZodOptional<zod.ZodString>;
                }, "strip", zod.ZodTypeAny, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }>;
                500: zod.ZodObject<{
                    message: zod.ZodString;
                }, "strip", zod.ZodTypeAny, {
                    message: string;
                }, {
                    message: string;
                }>;
            };
        };
        uploadMyFiles: {
            metadata: {
                readonly permissions: "create:file:own";
            };
            summary: "Upload my files to the storage";
            method: "POST";
            contentType: "multipart/form-data";
            body: _ts_rest_core.ContractPlainType<{
                files: File[];
                alt?: string;
                visibility: string;
                tags?: string[];
            }>;
            path: "/api/members/me/files";
            headers: zod.ZodObject<{
                authorization: zod.ZodString;
            }, "strip", zod.ZodTypeAny, {
                authorization: string;
            }, {
                authorization: string;
            }>;
            responses: {
                200: zod.ZodObject<{
                    data: zod.ZodType<{
                        id: string;
                        authorId: string;
                        createdAt: Date;
                        updatedAt: Date;
                        isDeleted: boolean;
                        name: string;
                        mimeType: "video/mp4', 'image/png" | "image/jpeg" | "image/gif" | "image/tiff" | "video/ogg" | "video/webm";
                        size: number;
                        slug: string;
                        key: string;
                        isConfirmed: boolean;
                        alt: string;
                        tags: string[];
                        url?: string | undefined;
                        unassociatedAt?: Date | null | undefined;
                    }[], zod.ZodTypeDef, {
                        id: string;
                        authorId: string;
                        createdAt: Date;
                        updatedAt: Date;
                        isDeleted: boolean;
                        name: string;
                        mimeType: "video/mp4', 'image/png" | "image/jpeg" | "image/gif" | "image/tiff" | "video/ogg" | "video/webm";
                        size: number;
                        slug: string;
                        key: string;
                        isConfirmed: boolean;
                        alt: string;
                        tags: string[];
                        url?: string | undefined;
                        unassociatedAt?: Date | null | undefined;
                    }[]> | zod.ZodObject<{}, "strip", zod.ZodTypeAny, {}, {}>;
                }, "strip", zod.ZodTypeAny, {
                    data: {
                        id: string;
                        authorId: string;
                        createdAt: Date;
                        updatedAt: Date;
                        isDeleted: boolean;
                        name: string;
                        mimeType: "video/mp4', 'image/png" | "image/jpeg" | "image/gif" | "image/tiff" | "video/ogg" | "video/webm";
                        size: number;
                        slug: string;
                        key: string;
                        isConfirmed: boolean;
                        alt: string;
                        tags: string[];
                        url?: string | undefined;
                        unassociatedAt?: Date | null | undefined;
                    }[] | {};
                }, {
                    data: {
                        id: string;
                        authorId: string;
                        createdAt: Date;
                        updatedAt: Date;
                        isDeleted: boolean;
                        name: string;
                        mimeType: "video/mp4', 'image/png" | "image/jpeg" | "image/gif" | "image/tiff" | "video/ogg" | "video/webm";
                        size: number;
                        slug: string;
                        key: string;
                        isConfirmed: boolean;
                        alt: string;
                        tags: string[];
                        url?: string | undefined;
                        unassociatedAt?: Date | null | undefined;
                    }[] | {};
                }>;
                403: zod.ZodObject<{
                    title: zod.ZodString;
                    status: zod.ZodNumber;
                    detail: zod.ZodOptional<zod.ZodString>;
                    errors: zod.ZodOptional<zod.ZodArray<zod.ZodType<ErrorObject, zod.ZodTypeDef, ErrorObject>, "many">>;
                }, "strip", zod.ZodTypeAny, {
                    status: number;
                    title: string;
                    errors?: ErrorObject[] | undefined;
                    detail?: string | undefined;
                }, {
                    status: number;
                    title: string;
                    errors?: ErrorObject[] | undefined;
                    detail?: string | undefined;
                }>;
                500: zod.ZodObject<{
                    message: zod.ZodString;
                }, "strip", zod.ZodTypeAny, {
                    message: string;
                }, {
                    message: string;
                }>;
            };
        };
    };
    forms: {
        createForm: {
            metadata: {
                readonly permissions: {};
            };
            summary: "Create form";
            method: "POST";
            body: zod.ZodObject<{
                name: zod.ZodString;
                displayName: zod.ZodString;
                projectId: zod.ZodString;
                schema: zod.ZodArray<zod.ZodDiscriminatedUnion<"type", [zod.ZodObject<zod.objectUtil.extendShape<{
                    name: zod.ZodString;
                    label: zod.ZodString;
                    placeholder: zod.ZodOptional<zod.ZodString>;
                    helperText: zod.ZodOptional<zod.ZodString>;
                    visibility: zod.ZodString;
                    required: zod.ZodOptional<zod.ZodBoolean>;
                }, {
                    type: zod.ZodLiteral<"NUMBER">;
                    options: zod.ZodObject<{
                        min: zod.ZodOptional<zod.ZodNumber>;
                        max: zod.ZodOptional<zod.ZodNumber>;
                        noDecimal: zod.ZodOptional<zod.ZodBoolean>;
                    }, "strip", zod.ZodTypeAny, {
                        min?: number | undefined;
                        max?: number | undefined;
                        noDecimal?: boolean | undefined;
                    }, {
                        min?: number | undefined;
                        max?: number | undefined;
                        noDecimal?: boolean | undefined;
                    }>;
                }>, "strip", zod.ZodTypeAny, {
                    options: {
                        min?: number | undefined;
                        max?: number | undefined;
                        noDecimal?: boolean | undefined;
                    };
                    type: "NUMBER";
                    name: string;
                    label: string;
                    visibility: string;
                    placeholder?: string | undefined;
                    helperText?: string | undefined;
                    required?: boolean | undefined;
                }, {
                    options: {
                        min?: number | undefined;
                        max?: number | undefined;
                        noDecimal?: boolean | undefined;
                    };
                    type: "NUMBER";
                    name: string;
                    label: string;
                    visibility: string;
                    placeholder?: string | undefined;
                    helperText?: string | undefined;
                    required?: boolean | undefined;
                }>, zod.ZodObject<zod.objectUtil.extendShape<{
                    name: zod.ZodString;
                    label: zod.ZodString;
                    placeholder: zod.ZodOptional<zod.ZodString>;
                    helperText: zod.ZodOptional<zod.ZodString>;
                    visibility: zod.ZodString;
                    required: zod.ZodOptional<zod.ZodBoolean>;
                }, {
                    type: zod.ZodLiteral<"TEXT">;
                    options: zod.ZodObject<{
                        minLength: zod.ZodOptional<zod.ZodNumber>;
                        maxLength: zod.ZodOptional<zod.ZodNumber>;
                        pattern: zod.ZodOptional<zod.ZodString>;
                    }, "strip", zod.ZodTypeAny, {
                        minLength?: number | undefined;
                        maxLength?: number | undefined;
                        pattern?: string | undefined;
                    }, {
                        minLength?: number | undefined;
                        maxLength?: number | undefined;
                        pattern?: string | undefined;
                    }>;
                }>, "strip", zod.ZodTypeAny, {
                    options: {
                        minLength?: number | undefined;
                        maxLength?: number | undefined;
                        pattern?: string | undefined;
                    };
                    type: "TEXT";
                    name: string;
                    label: string;
                    visibility: string;
                    placeholder?: string | undefined;
                    helperText?: string | undefined;
                    required?: boolean | undefined;
                }, {
                    options: {
                        minLength?: number | undefined;
                        maxLength?: number | undefined;
                        pattern?: string | undefined;
                    };
                    type: "TEXT";
                    name: string;
                    label: string;
                    visibility: string;
                    placeholder?: string | undefined;
                    helperText?: string | undefined;
                    required?: boolean | undefined;
                }>, zod.ZodObject<zod.objectUtil.extendShape<{
                    name: zod.ZodString;
                    label: zod.ZodString;
                    placeholder: zod.ZodOptional<zod.ZodString>;
                    helperText: zod.ZodOptional<zod.ZodString>;
                    visibility: zod.ZodString;
                    required: zod.ZodOptional<zod.ZodBoolean>;
                }, {
                    type: zod.ZodLiteral<"SELECT">;
                    options: zod.ZodObject<{
                        isMulti: zod.ZodBoolean;
                        optionList: zod.ZodArray<zod.ZodString, "many">;
                        maxSelect: zod.ZodNullable<zod.ZodNumber>;
                        minSelect: zod.ZodNullable<zod.ZodNumber>;
                    }, "strip", zod.ZodTypeAny, {
                        isMulti: boolean;
                        optionList: string[];
                        maxSelect: number | null;
                        minSelect: number | null;
                    }, {
                        isMulti: boolean;
                        optionList: string[];
                        maxSelect: number | null;
                        minSelect: number | null;
                    }>;
                }>, "strip", zod.ZodTypeAny, {
                    options: {
                        isMulti: boolean;
                        optionList: string[];
                        maxSelect: number | null;
                        minSelect: number | null;
                    };
                    type: "SELECT";
                    name: string;
                    label: string;
                    visibility: string;
                    placeholder?: string | undefined;
                    helperText?: string | undefined;
                    required?: boolean | undefined;
                }, {
                    options: {
                        isMulti: boolean;
                        optionList: string[];
                        maxSelect: number | null;
                        minSelect: number | null;
                    };
                    type: "SELECT";
                    name: string;
                    label: string;
                    visibility: string;
                    placeholder?: string | undefined;
                    helperText?: string | undefined;
                    required?: boolean | undefined;
                }>, zod.ZodObject<zod.objectUtil.extendShape<{
                    name: zod.ZodString;
                    label: zod.ZodString;
                    placeholder: zod.ZodOptional<zod.ZodString>;
                    helperText: zod.ZodOptional<zod.ZodString>;
                    visibility: zod.ZodString;
                    required: zod.ZodOptional<zod.ZodBoolean>;
                }, {
                    type: zod.ZodLiteral<"DATETIME">;
                    options: zod.ZodObject<{
                        min: zod.ZodOptional<zod.ZodString>;
                        max: zod.ZodOptional<zod.ZodString>;
                    }, "strip", zod.ZodTypeAny, {
                        min?: string | undefined;
                        max?: string | undefined;
                    }, {
                        min?: string | undefined;
                        max?: string | undefined;
                    }>;
                }>, "strip", zod.ZodTypeAny, {
                    options: {
                        min?: string | undefined;
                        max?: string | undefined;
                    };
                    type: "DATETIME";
                    name: string;
                    label: string;
                    visibility: string;
                    placeholder?: string | undefined;
                    helperText?: string | undefined;
                    required?: boolean | undefined;
                }, {
                    options: {
                        min?: string | undefined;
                        max?: string | undefined;
                    };
                    type: "DATETIME";
                    name: string;
                    label: string;
                    visibility: string;
                    placeholder?: string | undefined;
                    helperText?: string | undefined;
                    required?: boolean | undefined;
                }>, zod.ZodObject<zod.objectUtil.extendShape<{
                    name: zod.ZodString;
                    label: zod.ZodString;
                    placeholder: zod.ZodOptional<zod.ZodString>;
                    helperText: zod.ZodOptional<zod.ZodString>;
                    visibility: zod.ZodString;
                    required: zod.ZodOptional<zod.ZodBoolean>;
                }, {
                    type: zod.ZodLiteral<"RICHTEXT">;
                    options: zod.ZodObject<{
                        minLength: zod.ZodOptional<zod.ZodNumber>;
                        maxLength: zod.ZodOptional<zod.ZodNumber>;
                        disableImages: zod.ZodOptional<zod.ZodBoolean>;
                    }, "strip", zod.ZodTypeAny, {
                        minLength?: number | undefined;
                        maxLength?: number | undefined;
                        disableImages?: boolean | undefined;
                    }, {
                        minLength?: number | undefined;
                        maxLength?: number | undefined;
                        disableImages?: boolean | undefined;
                    }>;
                }>, "strip", zod.ZodTypeAny, {
                    options: {
                        minLength?: number | undefined;
                        maxLength?: number | undefined;
                        disableImages?: boolean | undefined;
                    };
                    type: "RICHTEXT";
                    name: string;
                    label: string;
                    visibility: string;
                    placeholder?: string | undefined;
                    helperText?: string | undefined;
                    required?: boolean | undefined;
                }, {
                    options: {
                        minLength?: number | undefined;
                        maxLength?: number | undefined;
                        disableImages?: boolean | undefined;
                    };
                    type: "RICHTEXT";
                    name: string;
                    label: string;
                    visibility: string;
                    placeholder?: string | undefined;
                    helperText?: string | undefined;
                    required?: boolean | undefined;
                }>, zod.ZodObject<zod.objectUtil.extendShape<{
                    name: zod.ZodString;
                    type: zod.ZodString;
                }, {
                    type: zod.ZodLiteral<"SEPARATOR">;
                }>, "strip", zod.ZodTypeAny, {
                    type: "SEPARATOR";
                    name: string;
                }, {
                    type: "SEPARATOR";
                    name: string;
                }>]>, "many">;
            }, "strip", zod.ZodTypeAny, {
                name: string;
                displayName: string;
                projectId: string;
                schema: ({
                    options: {
                        min?: number | undefined;
                        max?: number | undefined;
                        noDecimal?: boolean | undefined;
                    };
                    type: "NUMBER";
                    name: string;
                    label: string;
                    visibility: string;
                    placeholder?: string | undefined;
                    helperText?: string | undefined;
                    required?: boolean | undefined;
                } | {
                    options: {
                        minLength?: number | undefined;
                        maxLength?: number | undefined;
                        pattern?: string | undefined;
                    };
                    type: "TEXT";
                    name: string;
                    label: string;
                    visibility: string;
                    placeholder?: string | undefined;
                    helperText?: string | undefined;
                    required?: boolean | undefined;
                } | {
                    options: {
                        isMulti: boolean;
                        optionList: string[];
                        maxSelect: number | null;
                        minSelect: number | null;
                    };
                    type: "SELECT";
                    name: string;
                    label: string;
                    visibility: string;
                    placeholder?: string | undefined;
                    helperText?: string | undefined;
                    required?: boolean | undefined;
                } | {
                    options: {
                        min?: string | undefined;
                        max?: string | undefined;
                    };
                    type: "DATETIME";
                    name: string;
                    label: string;
                    visibility: string;
                    placeholder?: string | undefined;
                    helperText?: string | undefined;
                    required?: boolean | undefined;
                } | {
                    options: {
                        minLength?: number | undefined;
                        maxLength?: number | undefined;
                        disableImages?: boolean | undefined;
                    };
                    type: "RICHTEXT";
                    name: string;
                    label: string;
                    visibility: string;
                    placeholder?: string | undefined;
                    helperText?: string | undefined;
                    required?: boolean | undefined;
                } | {
                    type: "SEPARATOR";
                    name: string;
                })[];
            }, {
                name: string;
                displayName: string;
                projectId: string;
                schema: ({
                    options: {
                        min?: number | undefined;
                        max?: number | undefined;
                        noDecimal?: boolean | undefined;
                    };
                    type: "NUMBER";
                    name: string;
                    label: string;
                    visibility: string;
                    placeholder?: string | undefined;
                    helperText?: string | undefined;
                    required?: boolean | undefined;
                } | {
                    options: {
                        minLength?: number | undefined;
                        maxLength?: number | undefined;
                        pattern?: string | undefined;
                    };
                    type: "TEXT";
                    name: string;
                    label: string;
                    visibility: string;
                    placeholder?: string | undefined;
                    helperText?: string | undefined;
                    required?: boolean | undefined;
                } | {
                    options: {
                        isMulti: boolean;
                        optionList: string[];
                        maxSelect: number | null;
                        minSelect: number | null;
                    };
                    type: "SELECT";
                    name: string;
                    label: string;
                    visibility: string;
                    placeholder?: string | undefined;
                    helperText?: string | undefined;
                    required?: boolean | undefined;
                } | {
                    options: {
                        min?: string | undefined;
                        max?: string | undefined;
                    };
                    type: "DATETIME";
                    name: string;
                    label: string;
                    visibility: string;
                    placeholder?: string | undefined;
                    helperText?: string | undefined;
                    required?: boolean | undefined;
                } | {
                    options: {
                        minLength?: number | undefined;
                        maxLength?: number | undefined;
                        disableImages?: boolean | undefined;
                    };
                    type: "RICHTEXT";
                    name: string;
                    label: string;
                    visibility: string;
                    placeholder?: string | undefined;
                    helperText?: string | undefined;
                    required?: boolean | undefined;
                } | {
                    type: "SEPARATOR";
                    name: string;
                })[];
            }>;
            path: "/api/forms";
            headers: zod.ZodObject<{
                authorization: zod.ZodString;
            }, "strip", zod.ZodTypeAny, {
                authorization: string;
            }, {
                authorization: string;
            }>;
            responses: {
                200: zod.ZodObject<{
                    data: zod.ZodType<{
                        id: string;
                        authorId: string;
                        name: string;
                        displayName: string;
                        fields: {
                            type: string;
                            name: string;
                            label: string;
                            required: boolean;
                            displayName: string;
                            options?: any;
                        }[];
                        project: {
                            id: string;
                            name: string;
                            slug: string;
                            displayName: string;
                            associatedAt: Date;
                        } | null;
                        fieldsLimit: number;
                    }, zod.ZodTypeDef, {
                        id: string;
                        authorId: string;
                        name: string;
                        displayName: string;
                        fields: {
                            type: string;
                            name: string;
                            label: string;
                            required: boolean;
                            displayName: string;
                            options?: any;
                        }[];
                        project: {
                            id: string;
                            name: string;
                            slug: string;
                            displayName: string;
                            associatedAt: Date;
                        } | null;
                        fieldsLimit: number;
                    }> | zod.ZodObject<{}, "strip", zod.ZodTypeAny, {}, {}>;
                }, "strip", zod.ZodTypeAny, {
                    data: {
                        id: string;
                        authorId: string;
                        name: string;
                        displayName: string;
                        fields: {
                            type: string;
                            name: string;
                            label: string;
                            required: boolean;
                            displayName: string;
                            options?: any;
                        }[];
                        project: {
                            id: string;
                            name: string;
                            slug: string;
                            displayName: string;
                            associatedAt: Date;
                        } | null;
                        fieldsLimit: number;
                    } | {};
                }, {
                    data: {
                        id: string;
                        authorId: string;
                        name: string;
                        displayName: string;
                        fields: {
                            type: string;
                            name: string;
                            label: string;
                            required: boolean;
                            displayName: string;
                            options?: any;
                        }[];
                        project: {
                            id: string;
                            name: string;
                            slug: string;
                            displayName: string;
                            associatedAt: Date;
                        } | null;
                        fieldsLimit: number;
                    } | {};
                }>;
                403: zod.ZodObject<{
                    title: zod.ZodString;
                    status: zod.ZodNumber;
                    detail: zod.ZodOptional<zod.ZodString>;
                    errors: zod.ZodOptional<zod.ZodArray<zod.ZodType<ErrorObject, zod.ZodTypeDef, ErrorObject>, "many">>;
                }, "strip", zod.ZodTypeAny, {
                    status: number;
                    title: string;
                    errors?: ErrorObject[] | undefined;
                    detail?: string | undefined;
                }, {
                    status: number;
                    title: string;
                    errors?: ErrorObject[] | undefined;
                    detail?: string | undefined;
                }>;
                409: zod.ZodObject<{
                    title: zod.ZodString;
                    status: zod.ZodNumber;
                    detail: zod.ZodOptional<zod.ZodString>;
                }, "strip", zod.ZodTypeAny, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }>;
                500: zod.ZodObject<{
                    message: zod.ZodString;
                }, "strip", zod.ZodTypeAny, {
                    message: string;
                }, {
                    message: string;
                }>;
            };
        };
        getFormById: {
            metadata: {
                isPublic: boolean;
                permissions: {};
            };
            summary: "Get a form by id";
            method: "GET";
            path: "/api/forms/by/id/:formId";
            headers: zod.ZodOptional<zod.ZodObject<{
                authorization: zod.ZodString;
            }, "strip", zod.ZodTypeAny, {
                authorization: string;
            }, {
                authorization: string;
            }>>;
            responses: {
                200: zod.ZodObject<{
                    data: zod.ZodType<{
                        id: string;
                        authorId: string;
                        name: string;
                        displayName: string;
                        fields: {
                            type: string;
                            name: string;
                            label: string;
                            required: boolean;
                            displayName: string;
                            options?: any;
                        }[];
                        project: {
                            id: string;
                            name: string;
                            slug: string;
                            displayName: string;
                            associatedAt: Date;
                        } | null;
                        fieldsLimit: number;
                    } | {
                        id: string;
                        authorId: string;
                        createdAt: Date;
                        updatedAt: Date;
                        name: string;
                        displayName: string;
                        fields: {
                            type: string;
                            name: string;
                            label: string;
                            required: boolean;
                            displayName: string;
                            options?: any;
                        }[];
                        project: {
                            id: string;
                            name: string;
                            slug: string;
                            displayName: string;
                            associatedAt: Date;
                        } | null;
                        fieldsLimit: number;
                    }, zod.ZodTypeDef, {
                        id: string;
                        authorId: string;
                        name: string;
                        displayName: string;
                        fields: {
                            type: string;
                            name: string;
                            label: string;
                            required: boolean;
                            displayName: string;
                            options?: any;
                        }[];
                        project: {
                            id: string;
                            name: string;
                            slug: string;
                            displayName: string;
                            associatedAt: Date;
                        } | null;
                        fieldsLimit: number;
                    } | {
                        id: string;
                        authorId: string;
                        createdAt: Date;
                        updatedAt: Date;
                        name: string;
                        displayName: string;
                        fields: {
                            type: string;
                            name: string;
                            label: string;
                            required: boolean;
                            displayName: string;
                            options?: any;
                        }[];
                        project: {
                            id: string;
                            name: string;
                            slug: string;
                            displayName: string;
                            associatedAt: Date;
                        } | null;
                        fieldsLimit: number;
                    }> | zod.ZodObject<{}, "strip", zod.ZodTypeAny, {}, {}>;
                }, "strip", zod.ZodTypeAny, {
                    data: {
                        id: string;
                        authorId: string;
                        name: string;
                        displayName: string;
                        fields: {
                            type: string;
                            name: string;
                            label: string;
                            required: boolean;
                            displayName: string;
                            options?: any;
                        }[];
                        project: {
                            id: string;
                            name: string;
                            slug: string;
                            displayName: string;
                            associatedAt: Date;
                        } | null;
                        fieldsLimit: number;
                    } | {
                        id: string;
                        authorId: string;
                        createdAt: Date;
                        updatedAt: Date;
                        name: string;
                        displayName: string;
                        fields: {
                            type: string;
                            name: string;
                            label: string;
                            required: boolean;
                            displayName: string;
                            options?: any;
                        }[];
                        project: {
                            id: string;
                            name: string;
                            slug: string;
                            displayName: string;
                            associatedAt: Date;
                        } | null;
                        fieldsLimit: number;
                    } | {};
                }, {
                    data: {
                        id: string;
                        authorId: string;
                        name: string;
                        displayName: string;
                        fields: {
                            type: string;
                            name: string;
                            label: string;
                            required: boolean;
                            displayName: string;
                            options?: any;
                        }[];
                        project: {
                            id: string;
                            name: string;
                            slug: string;
                            displayName: string;
                            associatedAt: Date;
                        } | null;
                        fieldsLimit: number;
                    } | {
                        id: string;
                        authorId: string;
                        createdAt: Date;
                        updatedAt: Date;
                        name: string;
                        displayName: string;
                        fields: {
                            type: string;
                            name: string;
                            label: string;
                            required: boolean;
                            displayName: string;
                            options?: any;
                        }[];
                        project: {
                            id: string;
                            name: string;
                            slug: string;
                            displayName: string;
                            associatedAt: Date;
                        } | null;
                        fieldsLimit: number;
                    } | {};
                }>;
                404: zod.ZodObject<{
                    title: zod.ZodString;
                    status: zod.ZodNumber;
                    detail: zod.ZodOptional<zod.ZodString>;
                }, "strip", zod.ZodTypeAny, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }>;
                500: zod.ZodObject<{
                    title: zod.ZodString;
                    status: zod.ZodNumber;
                    detail: zod.ZodOptional<zod.ZodString>;
                }, "strip", zod.ZodTypeAny, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }>;
            };
        };
        getForms: {
            metadata: {
                permissions: {};
            };
            query: zod.ZodObject<{
                page: zod.ZodOptional<zod.ZodString>;
                limit: zod.ZodOptional<zod.ZodString>;
                projectIds: zod.ZodOptional<zod.ZodString>;
                search: zod.ZodOptional<zod.ZodString>;
            }, "strip", zod.ZodTypeAny, {
                search?: string | undefined;
                limit?: string | undefined;
                page?: string | undefined;
                projectIds?: string | undefined;
            }, {
                search?: string | undefined;
                limit?: string | undefined;
                page?: string | undefined;
                projectIds?: string | undefined;
            }>;
            summary: "Get forms list";
            method: "GET";
            path: "/api/forms";
            headers: zod.ZodObject<{
                authorization: zod.ZodString;
            }, "strip", zod.ZodTypeAny, {
                authorization: string;
            }, {
                authorization: string;
            }>;
            responses: {
                200: zod.ZodObject<{
                    data: zod.ZodType<{
                        id: string;
                        authorId: string;
                        name: string;
                        displayName: string;
                        fields: {
                            type: string;
                            name: string;
                            label: string;
                            required: boolean;
                            displayName: string;
                            options?: any;
                        }[];
                        project: {
                            id: string;
                            name: string;
                            slug: string;
                            displayName: string;
                            associatedAt: Date;
                        } | null;
                        fieldsLimit: number;
                    } | {
                        id: string;
                        authorId: string;
                        createdAt: Date;
                        updatedAt: Date;
                        name: string;
                        displayName: string;
                        fields: {
                            type: string;
                            name: string;
                            label: string;
                            required: boolean;
                            displayName: string;
                            options?: any;
                        }[];
                        project: {
                            id: string;
                            name: string;
                            slug: string;
                            displayName: string;
                            associatedAt: Date;
                        } | null;
                        fieldsLimit: number;
                    }, zod.ZodTypeDef, {
                        id: string;
                        authorId: string;
                        name: string;
                        displayName: string;
                        fields: {
                            type: string;
                            name: string;
                            label: string;
                            required: boolean;
                            displayName: string;
                            options?: any;
                        }[];
                        project: {
                            id: string;
                            name: string;
                            slug: string;
                            displayName: string;
                            associatedAt: Date;
                        } | null;
                        fieldsLimit: number;
                    } | {
                        id: string;
                        authorId: string;
                        createdAt: Date;
                        updatedAt: Date;
                        name: string;
                        displayName: string;
                        fields: {
                            type: string;
                            name: string;
                            label: string;
                            required: boolean;
                            displayName: string;
                            options?: any;
                        }[];
                        project: {
                            id: string;
                            name: string;
                            slug: string;
                            displayName: string;
                            associatedAt: Date;
                        } | null;
                        fieldsLimit: number;
                    }> | zod.ZodObject<{}, "strip", zod.ZodTypeAny, {}, {}>;
                }, "strip", zod.ZodTypeAny, {
                    data: {
                        id: string;
                        authorId: string;
                        name: string;
                        displayName: string;
                        fields: {
                            type: string;
                            name: string;
                            label: string;
                            required: boolean;
                            displayName: string;
                            options?: any;
                        }[];
                        project: {
                            id: string;
                            name: string;
                            slug: string;
                            displayName: string;
                            associatedAt: Date;
                        } | null;
                        fieldsLimit: number;
                    } | {
                        id: string;
                        authorId: string;
                        createdAt: Date;
                        updatedAt: Date;
                        name: string;
                        displayName: string;
                        fields: {
                            type: string;
                            name: string;
                            label: string;
                            required: boolean;
                            displayName: string;
                            options?: any;
                        }[];
                        project: {
                            id: string;
                            name: string;
                            slug: string;
                            displayName: string;
                            associatedAt: Date;
                        } | null;
                        fieldsLimit: number;
                    } | {};
                }, {
                    data: {
                        id: string;
                        authorId: string;
                        name: string;
                        displayName: string;
                        fields: {
                            type: string;
                            name: string;
                            label: string;
                            required: boolean;
                            displayName: string;
                            options?: any;
                        }[];
                        project: {
                            id: string;
                            name: string;
                            slug: string;
                            displayName: string;
                            associatedAt: Date;
                        } | null;
                        fieldsLimit: number;
                    } | {
                        id: string;
                        authorId: string;
                        createdAt: Date;
                        updatedAt: Date;
                        name: string;
                        displayName: string;
                        fields: {
                            type: string;
                            name: string;
                            label: string;
                            required: boolean;
                            displayName: string;
                            options?: any;
                        }[];
                        project: {
                            id: string;
                            name: string;
                            slug: string;
                            displayName: string;
                            associatedAt: Date;
                        } | null;
                        fieldsLimit: number;
                    } | {};
                }>;
                500: zod.ZodObject<{
                    message: zod.ZodString;
                }, "strip", zod.ZodTypeAny, {
                    message: string;
                }, {
                    message: string;
                }>;
            };
        };
    };
    issues: {
        createIssue: {
            metadata: {
                readonly permissions: {
                    readonly AND: readonly [{
                        readonly OR: readonly ["read:project:own", "read:project:confident", "read:project:any"];
                    }, "create:issue"];
                };
            };
            summary: "Create issue";
            method: "POST";
            body: zod.ZodObject<{
                title: zod.ZodString;
                fields: zod.ZodArray<zod.ZodObject<{
                    name: zod.ZodString;
                    value: zod.ZodAny;
                }, "strip", zod.ZodTypeAny, {
                    name: string;
                    value?: any;
                }, {
                    name: string;
                    value?: any;
                }>, "many">;
                tagIds: zod.ZodArray<zod.ZodString, "many">;
                isPrivate: zod.ZodBoolean;
                projectId: zod.ZodString;
            }, "strip", zod.ZodTypeAny, {
                title: string;
                projectId: string;
                fields: {
                    name: string;
                    value?: any;
                }[];
                tagIds: string[];
                isPrivate: boolean;
            }, {
                title: string;
                projectId: string;
                fields: {
                    name: string;
                    value?: any;
                }[];
                tagIds: string[];
                isPrivate: boolean;
            }>;
            path: "/api/issues";
            headers: zod.ZodObject<{
                authorization: zod.ZodString;
            }, "strip", zod.ZodTypeAny, {
                authorization: string;
            }, {
                authorization: string;
            }>;
            responses: {
                200: zod.ZodObject<{
                    data: zod.ZodType<{
                        id: string;
                        authorId: string;
                        createdAt: Date;
                        updatedAt: Date;
                        title: string;
                        key: string;
                        tags: {
                            id: string;
                            name: string;
                            description: string;
                            displayName: string;
                            color: string;
                        }[];
                        author: {
                            id: string;
                            username: string;
                            email: string;
                            roleDisplayName: string;
                            roleName: string;
                        };
                        visibility: string;
                        projectId: string;
                        schema: ({
                            options: {
                                min?: number | undefined;
                                max?: number | undefined;
                                noDecimal?: boolean | undefined;
                            };
                            type: "NUMBER";
                            name: string;
                            label: string;
                            visibility: string;
                            placeholder?: string | undefined;
                            helperText?: string | undefined;
                            required?: boolean | undefined;
                        } | {
                            options: {
                                minLength?: number | undefined;
                                maxLength?: number | undefined;
                                pattern?: string | undefined;
                            };
                            type: "TEXT";
                            name: string;
                            label: string;
                            visibility: string;
                            placeholder?: string | undefined;
                            helperText?: string | undefined;
                            required?: boolean | undefined;
                        } | {
                            options: {
                                isMulti: boolean;
                                optionList: string[];
                                maxSelect: number | null;
                                minSelect: number | null;
                            };
                            type: "SELECT";
                            name: string;
                            label: string;
                            visibility: string;
                            placeholder?: string | undefined;
                            helperText?: string | undefined;
                            required?: boolean | undefined;
                        } | {
                            options: {
                                min?: string | undefined;
                                max?: string | undefined;
                            };
                            type: "DATETIME";
                            name: string;
                            label: string;
                            visibility: string;
                            placeholder?: string | undefined;
                            helperText?: string | undefined;
                            required?: boolean | undefined;
                        } | {
                            options: {
                                minLength?: number | undefined;
                                maxLength?: number | undefined;
                                disableImages?: boolean | undefined;
                            };
                            type: "RICHTEXT";
                            name: string;
                            label: string;
                            visibility: string;
                            placeholder?: string | undefined;
                            helperText?: string | undefined;
                            required?: boolean | undefined;
                        } | {
                            type: "SEPARATOR";
                            name: string;
                        })[];
                        state: string;
                        points: number;
                        commentsCount: number;
                        fields: {
                            type: string;
                            name: string;
                            value?: any;
                        }[];
                        lastChangeAt: Date;
                        project: {
                            id: string;
                            name: string;
                            slug: string;
                            displayName: string;
                        };
                        group: {
                            id: string;
                            name: string;
                            slug: string;
                            displayName: string;
                        };
                        operations: {
                            canBlock: boolean;
                            canDelete: boolean;
                            canUpdateState: boolean;
                            canEditFields: boolean;
                            canEditInternalFields: boolean;
                            canEditHiddenFields: boolean;
                            canUpdateConfidents: boolean;
                            canBlockComments: boolean;
                            canDeleteComments: boolean;
                            canUpdateTags: boolean;
                            canUpdateVisibility: boolean;
                        };
                        isUpvotedByMe: boolean;
                        isDownvotedByMe: boolean;
                        isSuspend?: boolean | undefined;
                    }, zod.ZodTypeDef, {
                        id: string;
                        authorId: string;
                        createdAt: Date;
                        updatedAt: Date;
                        title: string;
                        key: string;
                        tags: {
                            id: string;
                            name: string;
                            description: string;
                            displayName: string;
                            color: string;
                        }[];
                        author: {
                            id: string;
                            username: string;
                            email: string;
                            roleDisplayName: string;
                            roleName: string;
                        };
                        visibility: string;
                        projectId: string;
                        schema: ({
                            options: {
                                min?: number | undefined;
                                max?: number | undefined;
                                noDecimal?: boolean | undefined;
                            };
                            type: "NUMBER";
                            name: string;
                            label: string;
                            visibility: string;
                            placeholder?: string | undefined;
                            helperText?: string | undefined;
                            required?: boolean | undefined;
                        } | {
                            options: {
                                minLength?: number | undefined;
                                maxLength?: number | undefined;
                                pattern?: string | undefined;
                            };
                            type: "TEXT";
                            name: string;
                            label: string;
                            visibility: string;
                            placeholder?: string | undefined;
                            helperText?: string | undefined;
                            required?: boolean | undefined;
                        } | {
                            options: {
                                isMulti: boolean;
                                optionList: string[];
                                maxSelect: number | null;
                                minSelect: number | null;
                            };
                            type: "SELECT";
                            name: string;
                            label: string;
                            visibility: string;
                            placeholder?: string | undefined;
                            helperText?: string | undefined;
                            required?: boolean | undefined;
                        } | {
                            options: {
                                min?: string | undefined;
                                max?: string | undefined;
                            };
                            type: "DATETIME";
                            name: string;
                            label: string;
                            visibility: string;
                            placeholder?: string | undefined;
                            helperText?: string | undefined;
                            required?: boolean | undefined;
                        } | {
                            options: {
                                minLength?: number | undefined;
                                maxLength?: number | undefined;
                                disableImages?: boolean | undefined;
                            };
                            type: "RICHTEXT";
                            name: string;
                            label: string;
                            visibility: string;
                            placeholder?: string | undefined;
                            helperText?: string | undefined;
                            required?: boolean | undefined;
                        } | {
                            type: "SEPARATOR";
                            name: string;
                        })[];
                        state: string;
                        points: number;
                        commentsCount: number;
                        fields: {
                            type: string;
                            name: string;
                            value?: any;
                        }[];
                        lastChangeAt: Date;
                        project: {
                            id: string;
                            name: string;
                            slug: string;
                            displayName: string;
                        };
                        group: {
                            id: string;
                            name: string;
                            slug: string;
                            displayName: string;
                        };
                        operations: {
                            canBlock: boolean;
                            canDelete: boolean;
                            canUpdateState: boolean;
                            canEditFields: boolean;
                            canEditInternalFields: boolean;
                            canEditHiddenFields: boolean;
                            canUpdateConfidents: boolean;
                            canBlockComments: boolean;
                            canDeleteComments: boolean;
                            canUpdateTags: boolean;
                            canUpdateVisibility: boolean;
                        };
                        isUpvotedByMe: boolean;
                        isDownvotedByMe: boolean;
                        isSuspend?: boolean | undefined;
                    }> | zod.ZodObject<{}, "strip", zod.ZodTypeAny, {}, {}>;
                }, "strip", zod.ZodTypeAny, {
                    data: {
                        id: string;
                        authorId: string;
                        createdAt: Date;
                        updatedAt: Date;
                        title: string;
                        key: string;
                        tags: {
                            id: string;
                            name: string;
                            description: string;
                            displayName: string;
                            color: string;
                        }[];
                        author: {
                            id: string;
                            username: string;
                            email: string;
                            roleDisplayName: string;
                            roleName: string;
                        };
                        visibility: string;
                        projectId: string;
                        schema: ({
                            options: {
                                min?: number | undefined;
                                max?: number | undefined;
                                noDecimal?: boolean | undefined;
                            };
                            type: "NUMBER";
                            name: string;
                            label: string;
                            visibility: string;
                            placeholder?: string | undefined;
                            helperText?: string | undefined;
                            required?: boolean | undefined;
                        } | {
                            options: {
                                minLength?: number | undefined;
                                maxLength?: number | undefined;
                                pattern?: string | undefined;
                            };
                            type: "TEXT";
                            name: string;
                            label: string;
                            visibility: string;
                            placeholder?: string | undefined;
                            helperText?: string | undefined;
                            required?: boolean | undefined;
                        } | {
                            options: {
                                isMulti: boolean;
                                optionList: string[];
                                maxSelect: number | null;
                                minSelect: number | null;
                            };
                            type: "SELECT";
                            name: string;
                            label: string;
                            visibility: string;
                            placeholder?: string | undefined;
                            helperText?: string | undefined;
                            required?: boolean | undefined;
                        } | {
                            options: {
                                min?: string | undefined;
                                max?: string | undefined;
                            };
                            type: "DATETIME";
                            name: string;
                            label: string;
                            visibility: string;
                            placeholder?: string | undefined;
                            helperText?: string | undefined;
                            required?: boolean | undefined;
                        } | {
                            options: {
                                minLength?: number | undefined;
                                maxLength?: number | undefined;
                                disableImages?: boolean | undefined;
                            };
                            type: "RICHTEXT";
                            name: string;
                            label: string;
                            visibility: string;
                            placeholder?: string | undefined;
                            helperText?: string | undefined;
                            required?: boolean | undefined;
                        } | {
                            type: "SEPARATOR";
                            name: string;
                        })[];
                        state: string;
                        points: number;
                        commentsCount: number;
                        fields: {
                            type: string;
                            name: string;
                            value?: any;
                        }[];
                        lastChangeAt: Date;
                        project: {
                            id: string;
                            name: string;
                            slug: string;
                            displayName: string;
                        };
                        group: {
                            id: string;
                            name: string;
                            slug: string;
                            displayName: string;
                        };
                        operations: {
                            canBlock: boolean;
                            canDelete: boolean;
                            canUpdateState: boolean;
                            canEditFields: boolean;
                            canEditInternalFields: boolean;
                            canEditHiddenFields: boolean;
                            canUpdateConfidents: boolean;
                            canBlockComments: boolean;
                            canDeleteComments: boolean;
                            canUpdateTags: boolean;
                            canUpdateVisibility: boolean;
                        };
                        isUpvotedByMe: boolean;
                        isDownvotedByMe: boolean;
                        isSuspend?: boolean | undefined;
                    } | {};
                }, {
                    data: {
                        id: string;
                        authorId: string;
                        createdAt: Date;
                        updatedAt: Date;
                        title: string;
                        key: string;
                        tags: {
                            id: string;
                            name: string;
                            description: string;
                            displayName: string;
                            color: string;
                        }[];
                        author: {
                            id: string;
                            username: string;
                            email: string;
                            roleDisplayName: string;
                            roleName: string;
                        };
                        visibility: string;
                        projectId: string;
                        schema: ({
                            options: {
                                min?: number | undefined;
                                max?: number | undefined;
                                noDecimal?: boolean | undefined;
                            };
                            type: "NUMBER";
                            name: string;
                            label: string;
                            visibility: string;
                            placeholder?: string | undefined;
                            helperText?: string | undefined;
                            required?: boolean | undefined;
                        } | {
                            options: {
                                minLength?: number | undefined;
                                maxLength?: number | undefined;
                                pattern?: string | undefined;
                            };
                            type: "TEXT";
                            name: string;
                            label: string;
                            visibility: string;
                            placeholder?: string | undefined;
                            helperText?: string | undefined;
                            required?: boolean | undefined;
                        } | {
                            options: {
                                isMulti: boolean;
                                optionList: string[];
                                maxSelect: number | null;
                                minSelect: number | null;
                            };
                            type: "SELECT";
                            name: string;
                            label: string;
                            visibility: string;
                            placeholder?: string | undefined;
                            helperText?: string | undefined;
                            required?: boolean | undefined;
                        } | {
                            options: {
                                min?: string | undefined;
                                max?: string | undefined;
                            };
                            type: "DATETIME";
                            name: string;
                            label: string;
                            visibility: string;
                            placeholder?: string | undefined;
                            helperText?: string | undefined;
                            required?: boolean | undefined;
                        } | {
                            options: {
                                minLength?: number | undefined;
                                maxLength?: number | undefined;
                                disableImages?: boolean | undefined;
                            };
                            type: "RICHTEXT";
                            name: string;
                            label: string;
                            visibility: string;
                            placeholder?: string | undefined;
                            helperText?: string | undefined;
                            required?: boolean | undefined;
                        } | {
                            type: "SEPARATOR";
                            name: string;
                        })[];
                        state: string;
                        points: number;
                        commentsCount: number;
                        fields: {
                            type: string;
                            name: string;
                            value?: any;
                        }[];
                        lastChangeAt: Date;
                        project: {
                            id: string;
                            name: string;
                            slug: string;
                            displayName: string;
                        };
                        group: {
                            id: string;
                            name: string;
                            slug: string;
                            displayName: string;
                        };
                        operations: {
                            canBlock: boolean;
                            canDelete: boolean;
                            canUpdateState: boolean;
                            canEditFields: boolean;
                            canEditInternalFields: boolean;
                            canEditHiddenFields: boolean;
                            canUpdateConfidents: boolean;
                            canBlockComments: boolean;
                            canDeleteComments: boolean;
                            canUpdateTags: boolean;
                            canUpdateVisibility: boolean;
                        };
                        isUpvotedByMe: boolean;
                        isDownvotedByMe: boolean;
                        isSuspend?: boolean | undefined;
                    } | {};
                }>;
                403: zod.ZodObject<{
                    title: zod.ZodString;
                    status: zod.ZodNumber;
                    detail: zod.ZodOptional<zod.ZodString>;
                    errors: zod.ZodOptional<zod.ZodArray<zod.ZodType<ErrorObject, zod.ZodTypeDef, ErrorObject>, "many">>;
                }, "strip", zod.ZodTypeAny, {
                    status: number;
                    title: string;
                    errors?: ErrorObject[] | undefined;
                    detail?: string | undefined;
                }, {
                    status: number;
                    title: string;
                    errors?: ErrorObject[] | undefined;
                    detail?: string | undefined;
                }>;
                409: zod.ZodObject<{
                    title: zod.ZodString;
                    status: zod.ZodNumber;
                    detail: zod.ZodOptional<zod.ZodString>;
                }, "strip", zod.ZodTypeAny, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }>;
                500: zod.ZodObject<{
                    message: zod.ZodString;
                }, "strip", zod.ZodTypeAny, {
                    message: string;
                }, {
                    message: string;
                }>;
            };
        };
        editIssueById: {
            metadata: {
                permissions: {
                    AND: ({
                        OR: ("read:project:own" | "read:project:confident" | "read:project:any")[];
                    } | {
                        OR: ("manage:project:asModerator" | "update:issue:own" | "update:issue:any")[];
                    })[];
                };
            };
            summary: "Edit issue by id";
            method: "POST";
            body: zod.ZodObject<{
                title: zod.ZodOptional<zod.ZodString>;
                fields: zod.ZodOptional<zod.ZodArray<zod.ZodObject<{
                    name: zod.ZodString;
                    value: zod.ZodAny;
                }, "strip", zod.ZodTypeAny, {
                    name: string;
                    value?: any;
                }, {
                    name: string;
                    value?: any;
                }>, "many">>;
            }, "strip", zod.ZodTypeAny, {
                title?: string | undefined;
                fields?: {
                    name: string;
                    value?: any;
                }[] | undefined;
            }, {
                title?: string | undefined;
                fields?: {
                    name: string;
                    value?: any;
                }[] | undefined;
            }>;
            path: "/api/issues/by/id/:issueId/edit";
            headers: zod.ZodObject<{
                authorization: zod.ZodString;
            }, "strip", zod.ZodTypeAny, {
                authorization: string;
            }, {
                authorization: string;
            }>;
            responses: {
                200: zod.ZodObject<{
                    data: zod.ZodType<{
                        id: string;
                        authorId: string;
                        createdAt: Date;
                        updatedAt: Date;
                        title: string;
                        key: string;
                        tags: string[];
                        visibility: string;
                        projectId: string;
                        schema: ({
                            options: {
                                min?: number | undefined;
                                max?: number | undefined;
                                noDecimal?: boolean | undefined;
                            };
                            type: "NUMBER";
                            name: string;
                            label: string;
                            visibility: string;
                            placeholder?: string | undefined;
                            helperText?: string | undefined;
                            required?: boolean | undefined;
                        } | {
                            options: {
                                minLength?: number | undefined;
                                maxLength?: number | undefined;
                                pattern?: string | undefined;
                            };
                            type: "TEXT";
                            name: string;
                            label: string;
                            visibility: string;
                            placeholder?: string | undefined;
                            helperText?: string | undefined;
                            required?: boolean | undefined;
                        } | {
                            options: {
                                isMulti: boolean;
                                optionList: string[];
                                maxSelect: number | null;
                                minSelect: number | null;
                            };
                            type: "SELECT";
                            name: string;
                            label: string;
                            visibility: string;
                            placeholder?: string | undefined;
                            helperText?: string | undefined;
                            required?: boolean | undefined;
                        } | {
                            options: {
                                min?: string | undefined;
                                max?: string | undefined;
                            };
                            type: "DATETIME";
                            name: string;
                            label: string;
                            visibility: string;
                            placeholder?: string | undefined;
                            helperText?: string | undefined;
                            required?: boolean | undefined;
                        } | {
                            options: {
                                minLength?: number | undefined;
                                maxLength?: number | undefined;
                                disableImages?: boolean | undefined;
                            };
                            type: "RICHTEXT";
                            name: string;
                            label: string;
                            visibility: string;
                            placeholder?: string | undefined;
                            helperText?: string | undefined;
                            required?: boolean | undefined;
                        } | {
                            type: "SEPARATOR";
                            name: string;
                        })[];
                        state: string;
                        points: number;
                        commentsCount: number;
                        fields: {
                            type: string;
                            name: string;
                            value?: any;
                        }[];
                        lastChangeAt: Date;
                        isSuspend?: boolean | undefined;
                    }, zod.ZodTypeDef, {
                        id: string;
                        authorId: string;
                        createdAt: Date;
                        updatedAt: Date;
                        title: string;
                        key: string;
                        tags: string[];
                        visibility: string;
                        projectId: string;
                        schema: ({
                            options: {
                                min?: number | undefined;
                                max?: number | undefined;
                                noDecimal?: boolean | undefined;
                            };
                            type: "NUMBER";
                            name: string;
                            label: string;
                            visibility: string;
                            placeholder?: string | undefined;
                            helperText?: string | undefined;
                            required?: boolean | undefined;
                        } | {
                            options: {
                                minLength?: number | undefined;
                                maxLength?: number | undefined;
                                pattern?: string | undefined;
                            };
                            type: "TEXT";
                            name: string;
                            label: string;
                            visibility: string;
                            placeholder?: string | undefined;
                            helperText?: string | undefined;
                            required?: boolean | undefined;
                        } | {
                            options: {
                                isMulti: boolean;
                                optionList: string[];
                                maxSelect: number | null;
                                minSelect: number | null;
                            };
                            type: "SELECT";
                            name: string;
                            label: string;
                            visibility: string;
                            placeholder?: string | undefined;
                            helperText?: string | undefined;
                            required?: boolean | undefined;
                        } | {
                            options: {
                                min?: string | undefined;
                                max?: string | undefined;
                            };
                            type: "DATETIME";
                            name: string;
                            label: string;
                            visibility: string;
                            placeholder?: string | undefined;
                            helperText?: string | undefined;
                            required?: boolean | undefined;
                        } | {
                            options: {
                                minLength?: number | undefined;
                                maxLength?: number | undefined;
                                disableImages?: boolean | undefined;
                            };
                            type: "RICHTEXT";
                            name: string;
                            label: string;
                            visibility: string;
                            placeholder?: string | undefined;
                            helperText?: string | undefined;
                            required?: boolean | undefined;
                        } | {
                            type: "SEPARATOR";
                            name: string;
                        })[];
                        state: string;
                        points: number;
                        commentsCount: number;
                        fields: {
                            type: string;
                            name: string;
                            value?: any;
                        }[];
                        lastChangeAt: Date;
                        isSuspend?: boolean | undefined;
                    }> | zod.ZodObject<{}, "strip", zod.ZodTypeAny, {}, {}>;
                }, "strip", zod.ZodTypeAny, {
                    data: {
                        id: string;
                        authorId: string;
                        createdAt: Date;
                        updatedAt: Date;
                        title: string;
                        key: string;
                        tags: string[];
                        visibility: string;
                        projectId: string;
                        schema: ({
                            options: {
                                min?: number | undefined;
                                max?: number | undefined;
                                noDecimal?: boolean | undefined;
                            };
                            type: "NUMBER";
                            name: string;
                            label: string;
                            visibility: string;
                            placeholder?: string | undefined;
                            helperText?: string | undefined;
                            required?: boolean | undefined;
                        } | {
                            options: {
                                minLength?: number | undefined;
                                maxLength?: number | undefined;
                                pattern?: string | undefined;
                            };
                            type: "TEXT";
                            name: string;
                            label: string;
                            visibility: string;
                            placeholder?: string | undefined;
                            helperText?: string | undefined;
                            required?: boolean | undefined;
                        } | {
                            options: {
                                isMulti: boolean;
                                optionList: string[];
                                maxSelect: number | null;
                                minSelect: number | null;
                            };
                            type: "SELECT";
                            name: string;
                            label: string;
                            visibility: string;
                            placeholder?: string | undefined;
                            helperText?: string | undefined;
                            required?: boolean | undefined;
                        } | {
                            options: {
                                min?: string | undefined;
                                max?: string | undefined;
                            };
                            type: "DATETIME";
                            name: string;
                            label: string;
                            visibility: string;
                            placeholder?: string | undefined;
                            helperText?: string | undefined;
                            required?: boolean | undefined;
                        } | {
                            options: {
                                minLength?: number | undefined;
                                maxLength?: number | undefined;
                                disableImages?: boolean | undefined;
                            };
                            type: "RICHTEXT";
                            name: string;
                            label: string;
                            visibility: string;
                            placeholder?: string | undefined;
                            helperText?: string | undefined;
                            required?: boolean | undefined;
                        } | {
                            type: "SEPARATOR";
                            name: string;
                        })[];
                        state: string;
                        points: number;
                        commentsCount: number;
                        fields: {
                            type: string;
                            name: string;
                            value?: any;
                        }[];
                        lastChangeAt: Date;
                        isSuspend?: boolean | undefined;
                    } | {};
                }, {
                    data: {
                        id: string;
                        authorId: string;
                        createdAt: Date;
                        updatedAt: Date;
                        title: string;
                        key: string;
                        tags: string[];
                        visibility: string;
                        projectId: string;
                        schema: ({
                            options: {
                                min?: number | undefined;
                                max?: number | undefined;
                                noDecimal?: boolean | undefined;
                            };
                            type: "NUMBER";
                            name: string;
                            label: string;
                            visibility: string;
                            placeholder?: string | undefined;
                            helperText?: string | undefined;
                            required?: boolean | undefined;
                        } | {
                            options: {
                                minLength?: number | undefined;
                                maxLength?: number | undefined;
                                pattern?: string | undefined;
                            };
                            type: "TEXT";
                            name: string;
                            label: string;
                            visibility: string;
                            placeholder?: string | undefined;
                            helperText?: string | undefined;
                            required?: boolean | undefined;
                        } | {
                            options: {
                                isMulti: boolean;
                                optionList: string[];
                                maxSelect: number | null;
                                minSelect: number | null;
                            };
                            type: "SELECT";
                            name: string;
                            label: string;
                            visibility: string;
                            placeholder?: string | undefined;
                            helperText?: string | undefined;
                            required?: boolean | undefined;
                        } | {
                            options: {
                                min?: string | undefined;
                                max?: string | undefined;
                            };
                            type: "DATETIME";
                            name: string;
                            label: string;
                            visibility: string;
                            placeholder?: string | undefined;
                            helperText?: string | undefined;
                            required?: boolean | undefined;
                        } | {
                            options: {
                                minLength?: number | undefined;
                                maxLength?: number | undefined;
                                disableImages?: boolean | undefined;
                            };
                            type: "RICHTEXT";
                            name: string;
                            label: string;
                            visibility: string;
                            placeholder?: string | undefined;
                            helperText?: string | undefined;
                            required?: boolean | undefined;
                        } | {
                            type: "SEPARATOR";
                            name: string;
                        })[];
                        state: string;
                        points: number;
                        commentsCount: number;
                        fields: {
                            type: string;
                            name: string;
                            value?: any;
                        }[];
                        lastChangeAt: Date;
                        isSuspend?: boolean | undefined;
                    } | {};
                }>;
                404: zod.ZodObject<{
                    title: zod.ZodString;
                    status: zod.ZodNumber;
                    detail: zod.ZodOptional<zod.ZodString>;
                }, "strip", zod.ZodTypeAny, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }>;
                403: zod.ZodObject<{
                    title: zod.ZodString;
                    status: zod.ZodNumber;
                    detail: zod.ZodOptional<zod.ZodString>;
                    errors: zod.ZodOptional<zod.ZodArray<zod.ZodType<ErrorObject, zod.ZodTypeDef, ErrorObject>, "many">>;
                }, "strip", zod.ZodTypeAny, {
                    status: number;
                    title: string;
                    errors?: ErrorObject[] | undefined;
                    detail?: string | undefined;
                }, {
                    status: number;
                    title: string;
                    errors?: ErrorObject[] | undefined;
                    detail?: string | undefined;
                }>;
                500: zod.ZodObject<{
                    title: zod.ZodString;
                    status: zod.ZodNumber;
                    detail: zod.ZodOptional<zod.ZodString>;
                }, "strip", zod.ZodTypeAny, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }>;
            };
        };
        upvoteIssue: {
            metadata: {
                permissions: "vote:issue";
            };
            summary: "Upvote issue";
            method: "POST";
            body: zod.ZodNullable<zod.ZodObject<{}, "strip", zod.ZodTypeAny, {}, {}>>;
            path: "/api/issues/by/id/:issueId/upvote";
            headers: zod.ZodObject<{
                authorization: zod.ZodString;
            }, "strip", zod.ZodTypeAny, {
                authorization: string;
            }, {
                authorization: string;
            }>;
            responses: {
                201: zod.ZodObject<{
                    data: zod.ZodType<unknown, zod.ZodTypeDef, unknown> | zod.ZodObject<{}, "strip", zod.ZodTypeAny, {}, {}>;
                }, "strip", zod.ZodTypeAny, {
                    data?: unknown;
                }, {
                    data?: unknown;
                }>;
                404: zod.ZodObject<{
                    title: zod.ZodString;
                    status: zod.ZodNumber;
                    detail: zod.ZodOptional<zod.ZodString>;
                }, "strip", zod.ZodTypeAny, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }>;
                409: zod.ZodObject<{
                    title: zod.ZodString;
                    status: zod.ZodNumber;
                    detail: zod.ZodOptional<zod.ZodString>;
                }, "strip", zod.ZodTypeAny, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }>;
                500: zod.ZodObject<{
                    title: zod.ZodString;
                    status: zod.ZodNumber;
                    detail: zod.ZodOptional<zod.ZodString>;
                }, "strip", zod.ZodTypeAny, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }>;
            };
        };
        downvoteIssue: {
            metadata: {
                permissions: "vote:issue";
            };
            summary: "Downvote issue";
            method: "POST";
            body: zod.ZodNullable<zod.ZodObject<{}, "strip", zod.ZodTypeAny, {}, {}>>;
            path: "/api/issues/by/id/:issueId/downvote";
            headers: zod.ZodObject<{
                authorization: zod.ZodString;
            }, "strip", zod.ZodTypeAny, {
                authorization: string;
            }, {
                authorization: string;
            }>;
            responses: {
                201: zod.ZodObject<{
                    data: zod.ZodType<unknown, zod.ZodTypeDef, unknown> | zod.ZodObject<{}, "strip", zod.ZodTypeAny, {}, {}>;
                }, "strip", zod.ZodTypeAny, {
                    data?: unknown;
                }, {
                    data?: unknown;
                }>;
                404: zod.ZodObject<{
                    title: zod.ZodString;
                    status: zod.ZodNumber;
                    detail: zod.ZodOptional<zod.ZodString>;
                }, "strip", zod.ZodTypeAny, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }>;
                409: zod.ZodObject<{
                    title: zod.ZodString;
                    status: zod.ZodNumber;
                    detail: zod.ZodOptional<zod.ZodString>;
                }, "strip", zod.ZodTypeAny, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }>;
                500: zod.ZodObject<{
                    title: zod.ZodString;
                    status: zod.ZodNumber;
                    detail: zod.ZodOptional<zod.ZodString>;
                }, "strip", zod.ZodTypeAny, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }>;
            };
        };
        unvoteIssue: {
            metadata: {
                permissions: "vote:issue";
            };
            summary: "Unvote issue";
            method: "POST";
            body: zod.ZodNullable<zod.ZodObject<{}, "strip", zod.ZodTypeAny, {}, {}>>;
            path: "/api/issues/by/id/:issueId/unvote";
            headers: zod.ZodObject<{
                authorization: zod.ZodString;
            }, "strip", zod.ZodTypeAny, {
                authorization: string;
            }, {
                authorization: string;
            }>;
            responses: {
                201: zod.ZodObject<{
                    data: zod.ZodType<unknown, zod.ZodTypeDef, unknown> | zod.ZodObject<{}, "strip", zod.ZodTypeAny, {}, {}>;
                }, "strip", zod.ZodTypeAny, {
                    data?: unknown;
                }, {
                    data?: unknown;
                }>;
                404: zod.ZodObject<{
                    title: zod.ZodString;
                    status: zod.ZodNumber;
                    detail: zod.ZodOptional<zod.ZodString>;
                }, "strip", zod.ZodTypeAny, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }>;
                500: zod.ZodObject<{
                    title: zod.ZodString;
                    status: zod.ZodNumber;
                    detail: zod.ZodOptional<zod.ZodString>;
                }, "strip", zod.ZodTypeAny, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }>;
            };
        };
        manageIssueTags: {
            metadata: {
                readonly permissions: {
                    readonly OR: readonly ["update:issue:own", "manage:project:asModerator", "update:issue:any"];
                };
            };
            summary: "Manage issue tags";
            method: "POST";
            body: zod.ZodObject<{
                tags: zod.ZodArray<zod.ZodString, "many">;
            }, "strip", zod.ZodTypeAny, {
                tags: string[];
            }, {
                tags: string[];
            }>;
            path: "/api/issues/by/id/:issueId/tags";
            headers: zod.ZodObject<{
                authorization: zod.ZodString;
            }, "strip", zod.ZodTypeAny, {
                authorization: string;
            }, {
                authorization: string;
            }>;
            responses: {
                200: zod.ZodObject<{
                    data: zod.ZodType<{
                        id: string;
                        createdAt: string;
                        updatedAt: string;
                        name: string;
                        description: string;
                        displayName: string;
                        color: string;
                        count: number;
                    }, zod.ZodTypeDef, {
                        id: string;
                        createdAt: string;
                        updatedAt: string;
                        name: string;
                        description: string;
                        displayName: string;
                        color: string;
                        count: number;
                    }> | zod.ZodObject<{}, "strip", zod.ZodTypeAny, {}, {}>;
                }, "strip", zod.ZodTypeAny, {
                    data: {
                        id: string;
                        createdAt: string;
                        updatedAt: string;
                        name: string;
                        description: string;
                        displayName: string;
                        color: string;
                        count: number;
                    } | {};
                }, {
                    data: {
                        id: string;
                        createdAt: string;
                        updatedAt: string;
                        name: string;
                        description: string;
                        displayName: string;
                        color: string;
                        count: number;
                    } | {};
                }>;
                401: zod.ZodObject<{
                    title: zod.ZodString;
                    status: zod.ZodNumber;
                    detail: zod.ZodOptional<zod.ZodString>;
                }, "strip", zod.ZodTypeAny, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }>;
                404: zod.ZodObject<{
                    title: zod.ZodString;
                    status: zod.ZodNumber;
                    detail: zod.ZodOptional<zod.ZodString>;
                }, "strip", zod.ZodTypeAny, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }>;
                403: zod.ZodObject<{
                    title: zod.ZodString;
                    status: zod.ZodNumber;
                    detail: zod.ZodOptional<zod.ZodString>;
                    errors: zod.ZodOptional<zod.ZodArray<zod.ZodType<ErrorObject, zod.ZodTypeDef, ErrorObject>, "many">>;
                }, "strip", zod.ZodTypeAny, {
                    status: number;
                    title: string;
                    errors?: ErrorObject[] | undefined;
                    detail?: string | undefined;
                }, {
                    status: number;
                    title: string;
                    errors?: ErrorObject[] | undefined;
                    detail?: string | undefined;
                }>;
                500: zod.ZodObject<{
                    title: zod.ZodString;
                    status: zod.ZodNumber;
                    detail: zod.ZodOptional<zod.ZodString>;
                }, "strip", zod.ZodTypeAny, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }>;
            };
        };
        changeIssueState: {
            metadata: {
                readonly permissions: {
                    readonly OR: readonly ["manage:project:asModerator", "update:issue:any"];
                };
            };
            summary: "Change issue state";
            method: "POST";
            body: zod.ZodObject<{
                state: zod.ZodEnum<["OPEN", "NEED_MORE_INFO", "CONFIRMED_INTERNALLY", "REVIEWED", "AWAITED_INTERNAL_TESTING", "ASSIGNED", "FEEDBACK", "DUPLICATE", "RESOLVED", "EXPIRED"]>;
            }, "strip", zod.ZodTypeAny, {
                state: "OPEN" | "NEED_MORE_INFO" | "CONFIRMED_INTERNALLY" | "REVIEWED" | "AWAITED_INTERNAL_TESTING" | "ASSIGNED" | "FEEDBACK" | "DUPLICATE" | "RESOLVED" | "EXPIRED";
            }, {
                state: "OPEN" | "NEED_MORE_INFO" | "CONFIRMED_INTERNALLY" | "REVIEWED" | "AWAITED_INTERNAL_TESTING" | "ASSIGNED" | "FEEDBACK" | "DUPLICATE" | "RESOLVED" | "EXPIRED";
            }>;
            path: "/api/issues/by/id/:issueId/state";
            headers: zod.ZodObject<{
                authorization: zod.ZodString;
            }, "strip", zod.ZodTypeAny, {
                authorization: string;
            }, {
                authorization: string;
            }>;
            responses: {
                200: zod.ZodObject<{
                    data: zod.ZodType<{
                        id: string;
                        authorId: string;
                        createdAt: Date;
                        updatedAt: Date;
                        title: string;
                        key: string;
                        tags: string[];
                        visibility: string;
                        projectId: string;
                        schema: ({
                            options: {
                                min?: number | undefined;
                                max?: number | undefined;
                                noDecimal?: boolean | undefined;
                            };
                            type: "NUMBER";
                            name: string;
                            label: string;
                            visibility: string;
                            placeholder?: string | undefined;
                            helperText?: string | undefined;
                            required?: boolean | undefined;
                        } | {
                            options: {
                                minLength?: number | undefined;
                                maxLength?: number | undefined;
                                pattern?: string | undefined;
                            };
                            type: "TEXT";
                            name: string;
                            label: string;
                            visibility: string;
                            placeholder?: string | undefined;
                            helperText?: string | undefined;
                            required?: boolean | undefined;
                        } | {
                            options: {
                                isMulti: boolean;
                                optionList: string[];
                                maxSelect: number | null;
                                minSelect: number | null;
                            };
                            type: "SELECT";
                            name: string;
                            label: string;
                            visibility: string;
                            placeholder?: string | undefined;
                            helperText?: string | undefined;
                            required?: boolean | undefined;
                        } | {
                            options: {
                                min?: string | undefined;
                                max?: string | undefined;
                            };
                            type: "DATETIME";
                            name: string;
                            label: string;
                            visibility: string;
                            placeholder?: string | undefined;
                            helperText?: string | undefined;
                            required?: boolean | undefined;
                        } | {
                            options: {
                                minLength?: number | undefined;
                                maxLength?: number | undefined;
                                disableImages?: boolean | undefined;
                            };
                            type: "RICHTEXT";
                            name: string;
                            label: string;
                            visibility: string;
                            placeholder?: string | undefined;
                            helperText?: string | undefined;
                            required?: boolean | undefined;
                        } | {
                            type: "SEPARATOR";
                            name: string;
                        })[];
                        state: string;
                        points: number;
                        commentsCount: number;
                        fields: {
                            type: string;
                            name: string;
                            value?: any;
                        }[];
                        lastChangeAt: Date;
                        isSuspend?: boolean | undefined;
                    }, zod.ZodTypeDef, {
                        id: string;
                        authorId: string;
                        createdAt: Date;
                        updatedAt: Date;
                        title: string;
                        key: string;
                        tags: string[];
                        visibility: string;
                        projectId: string;
                        schema: ({
                            options: {
                                min?: number | undefined;
                                max?: number | undefined;
                                noDecimal?: boolean | undefined;
                            };
                            type: "NUMBER";
                            name: string;
                            label: string;
                            visibility: string;
                            placeholder?: string | undefined;
                            helperText?: string | undefined;
                            required?: boolean | undefined;
                        } | {
                            options: {
                                minLength?: number | undefined;
                                maxLength?: number | undefined;
                                pattern?: string | undefined;
                            };
                            type: "TEXT";
                            name: string;
                            label: string;
                            visibility: string;
                            placeholder?: string | undefined;
                            helperText?: string | undefined;
                            required?: boolean | undefined;
                        } | {
                            options: {
                                isMulti: boolean;
                                optionList: string[];
                                maxSelect: number | null;
                                minSelect: number | null;
                            };
                            type: "SELECT";
                            name: string;
                            label: string;
                            visibility: string;
                            placeholder?: string | undefined;
                            helperText?: string | undefined;
                            required?: boolean | undefined;
                        } | {
                            options: {
                                min?: string | undefined;
                                max?: string | undefined;
                            };
                            type: "DATETIME";
                            name: string;
                            label: string;
                            visibility: string;
                            placeholder?: string | undefined;
                            helperText?: string | undefined;
                            required?: boolean | undefined;
                        } | {
                            options: {
                                minLength?: number | undefined;
                                maxLength?: number | undefined;
                                disableImages?: boolean | undefined;
                            };
                            type: "RICHTEXT";
                            name: string;
                            label: string;
                            visibility: string;
                            placeholder?: string | undefined;
                            helperText?: string | undefined;
                            required?: boolean | undefined;
                        } | {
                            type: "SEPARATOR";
                            name: string;
                        })[];
                        state: string;
                        points: number;
                        commentsCount: number;
                        fields: {
                            type: string;
                            name: string;
                            value?: any;
                        }[];
                        lastChangeAt: Date;
                        isSuspend?: boolean | undefined;
                    }> | zod.ZodObject<{}, "strip", zod.ZodTypeAny, {}, {}>;
                }, "strip", zod.ZodTypeAny, {
                    data: {
                        id: string;
                        authorId: string;
                        createdAt: Date;
                        updatedAt: Date;
                        title: string;
                        key: string;
                        tags: string[];
                        visibility: string;
                        projectId: string;
                        schema: ({
                            options: {
                                min?: number | undefined;
                                max?: number | undefined;
                                noDecimal?: boolean | undefined;
                            };
                            type: "NUMBER";
                            name: string;
                            label: string;
                            visibility: string;
                            placeholder?: string | undefined;
                            helperText?: string | undefined;
                            required?: boolean | undefined;
                        } | {
                            options: {
                                minLength?: number | undefined;
                                maxLength?: number | undefined;
                                pattern?: string | undefined;
                            };
                            type: "TEXT";
                            name: string;
                            label: string;
                            visibility: string;
                            placeholder?: string | undefined;
                            helperText?: string | undefined;
                            required?: boolean | undefined;
                        } | {
                            options: {
                                isMulti: boolean;
                                optionList: string[];
                                maxSelect: number | null;
                                minSelect: number | null;
                            };
                            type: "SELECT";
                            name: string;
                            label: string;
                            visibility: string;
                            placeholder?: string | undefined;
                            helperText?: string | undefined;
                            required?: boolean | undefined;
                        } | {
                            options: {
                                min?: string | undefined;
                                max?: string | undefined;
                            };
                            type: "DATETIME";
                            name: string;
                            label: string;
                            visibility: string;
                            placeholder?: string | undefined;
                            helperText?: string | undefined;
                            required?: boolean | undefined;
                        } | {
                            options: {
                                minLength?: number | undefined;
                                maxLength?: number | undefined;
                                disableImages?: boolean | undefined;
                            };
                            type: "RICHTEXT";
                            name: string;
                            label: string;
                            visibility: string;
                            placeholder?: string | undefined;
                            helperText?: string | undefined;
                            required?: boolean | undefined;
                        } | {
                            type: "SEPARATOR";
                            name: string;
                        })[];
                        state: string;
                        points: number;
                        commentsCount: number;
                        fields: {
                            type: string;
                            name: string;
                            value?: any;
                        }[];
                        lastChangeAt: Date;
                        isSuspend?: boolean | undefined;
                    } | {};
                }, {
                    data: {
                        id: string;
                        authorId: string;
                        createdAt: Date;
                        updatedAt: Date;
                        title: string;
                        key: string;
                        tags: string[];
                        visibility: string;
                        projectId: string;
                        schema: ({
                            options: {
                                min?: number | undefined;
                                max?: number | undefined;
                                noDecimal?: boolean | undefined;
                            };
                            type: "NUMBER";
                            name: string;
                            label: string;
                            visibility: string;
                            placeholder?: string | undefined;
                            helperText?: string | undefined;
                            required?: boolean | undefined;
                        } | {
                            options: {
                                minLength?: number | undefined;
                                maxLength?: number | undefined;
                                pattern?: string | undefined;
                            };
                            type: "TEXT";
                            name: string;
                            label: string;
                            visibility: string;
                            placeholder?: string | undefined;
                            helperText?: string | undefined;
                            required?: boolean | undefined;
                        } | {
                            options: {
                                isMulti: boolean;
                                optionList: string[];
                                maxSelect: number | null;
                                minSelect: number | null;
                            };
                            type: "SELECT";
                            name: string;
                            label: string;
                            visibility: string;
                            placeholder?: string | undefined;
                            helperText?: string | undefined;
                            required?: boolean | undefined;
                        } | {
                            options: {
                                min?: string | undefined;
                                max?: string | undefined;
                            };
                            type: "DATETIME";
                            name: string;
                            label: string;
                            visibility: string;
                            placeholder?: string | undefined;
                            helperText?: string | undefined;
                            required?: boolean | undefined;
                        } | {
                            options: {
                                minLength?: number | undefined;
                                maxLength?: number | undefined;
                                disableImages?: boolean | undefined;
                            };
                            type: "RICHTEXT";
                            name: string;
                            label: string;
                            visibility: string;
                            placeholder?: string | undefined;
                            helperText?: string | undefined;
                            required?: boolean | undefined;
                        } | {
                            type: "SEPARATOR";
                            name: string;
                        })[];
                        state: string;
                        points: number;
                        commentsCount: number;
                        fields: {
                            type: string;
                            name: string;
                            value?: any;
                        }[];
                        lastChangeAt: Date;
                        isSuspend?: boolean | undefined;
                    } | {};
                }>;
                401: zod.ZodObject<{
                    title: zod.ZodString;
                    status: zod.ZodNumber;
                    detail: zod.ZodOptional<zod.ZodString>;
                }, "strip", zod.ZodTypeAny, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }>;
                404: zod.ZodObject<{
                    title: zod.ZodString;
                    status: zod.ZodNumber;
                    detail: zod.ZodOptional<zod.ZodString>;
                }, "strip", zod.ZodTypeAny, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }>;
                403: zod.ZodObject<{
                    title: zod.ZodString;
                    status: zod.ZodNumber;
                    detail: zod.ZodOptional<zod.ZodString>;
                    errors: zod.ZodOptional<zod.ZodArray<zod.ZodType<ErrorObject, zod.ZodTypeDef, ErrorObject>, "many">>;
                }, "strip", zod.ZodTypeAny, {
                    status: number;
                    title: string;
                    errors?: ErrorObject[] | undefined;
                    detail?: string | undefined;
                }, {
                    status: number;
                    title: string;
                    errors?: ErrorObject[] | undefined;
                    detail?: string | undefined;
                }>;
                500: zod.ZodObject<{
                    title: zod.ZodString;
                    status: zod.ZodNumber;
                    detail: zod.ZodOptional<zod.ZodString>;
                }, "strip", zod.ZodTypeAny, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }>;
            };
        };
        changeIssueVisibility: {
            metadata: {
                readonly permissions: {
                    readonly OR: readonly ["manage:project:asModerator", "update:issue:any"];
                };
            };
            summary: "Change issue visibility";
            method: "POST";
            body: zod.ZodObject<{
                visibility: zod.ZodEnum<["PUBLIC", "PRIVATE"]>;
            }, "strip", zod.ZodTypeAny, {
                visibility: "PUBLIC" | "PRIVATE";
            }, {
                visibility: "PUBLIC" | "PRIVATE";
            }>;
            path: "/api/issues/by/id/:issueId/visibility";
            headers: zod.ZodObject<{
                authorization: zod.ZodString;
            }, "strip", zod.ZodTypeAny, {
                authorization: string;
            }, {
                authorization: string;
            }>;
            responses: {
                200: zod.ZodObject<{
                    data: zod.ZodType<{
                        id: string;
                        authorId: string;
                        createdAt: Date;
                        updatedAt: Date;
                        title: string;
                        key: string;
                        tags: string[];
                        visibility: string;
                        projectId: string;
                        schema: ({
                            options: {
                                min?: number | undefined;
                                max?: number | undefined;
                                noDecimal?: boolean | undefined;
                            };
                            type: "NUMBER";
                            name: string;
                            label: string;
                            visibility: string;
                            placeholder?: string | undefined;
                            helperText?: string | undefined;
                            required?: boolean | undefined;
                        } | {
                            options: {
                                minLength?: number | undefined;
                                maxLength?: number | undefined;
                                pattern?: string | undefined;
                            };
                            type: "TEXT";
                            name: string;
                            label: string;
                            visibility: string;
                            placeholder?: string | undefined;
                            helperText?: string | undefined;
                            required?: boolean | undefined;
                        } | {
                            options: {
                                isMulti: boolean;
                                optionList: string[];
                                maxSelect: number | null;
                                minSelect: number | null;
                            };
                            type: "SELECT";
                            name: string;
                            label: string;
                            visibility: string;
                            placeholder?: string | undefined;
                            helperText?: string | undefined;
                            required?: boolean | undefined;
                        } | {
                            options: {
                                min?: string | undefined;
                                max?: string | undefined;
                            };
                            type: "DATETIME";
                            name: string;
                            label: string;
                            visibility: string;
                            placeholder?: string | undefined;
                            helperText?: string | undefined;
                            required?: boolean | undefined;
                        } | {
                            options: {
                                minLength?: number | undefined;
                                maxLength?: number | undefined;
                                disableImages?: boolean | undefined;
                            };
                            type: "RICHTEXT";
                            name: string;
                            label: string;
                            visibility: string;
                            placeholder?: string | undefined;
                            helperText?: string | undefined;
                            required?: boolean | undefined;
                        } | {
                            type: "SEPARATOR";
                            name: string;
                        })[];
                        state: string;
                        points: number;
                        commentsCount: number;
                        fields: {
                            type: string;
                            name: string;
                            value?: any;
                        }[];
                        lastChangeAt: Date;
                        isSuspend?: boolean | undefined;
                    }, zod.ZodTypeDef, {
                        id: string;
                        authorId: string;
                        createdAt: Date;
                        updatedAt: Date;
                        title: string;
                        key: string;
                        tags: string[];
                        visibility: string;
                        projectId: string;
                        schema: ({
                            options: {
                                min?: number | undefined;
                                max?: number | undefined;
                                noDecimal?: boolean | undefined;
                            };
                            type: "NUMBER";
                            name: string;
                            label: string;
                            visibility: string;
                            placeholder?: string | undefined;
                            helperText?: string | undefined;
                            required?: boolean | undefined;
                        } | {
                            options: {
                                minLength?: number | undefined;
                                maxLength?: number | undefined;
                                pattern?: string | undefined;
                            };
                            type: "TEXT";
                            name: string;
                            label: string;
                            visibility: string;
                            placeholder?: string | undefined;
                            helperText?: string | undefined;
                            required?: boolean | undefined;
                        } | {
                            options: {
                                isMulti: boolean;
                                optionList: string[];
                                maxSelect: number | null;
                                minSelect: number | null;
                            };
                            type: "SELECT";
                            name: string;
                            label: string;
                            visibility: string;
                            placeholder?: string | undefined;
                            helperText?: string | undefined;
                            required?: boolean | undefined;
                        } | {
                            options: {
                                min?: string | undefined;
                                max?: string | undefined;
                            };
                            type: "DATETIME";
                            name: string;
                            label: string;
                            visibility: string;
                            placeholder?: string | undefined;
                            helperText?: string | undefined;
                            required?: boolean | undefined;
                        } | {
                            options: {
                                minLength?: number | undefined;
                                maxLength?: number | undefined;
                                disableImages?: boolean | undefined;
                            };
                            type: "RICHTEXT";
                            name: string;
                            label: string;
                            visibility: string;
                            placeholder?: string | undefined;
                            helperText?: string | undefined;
                            required?: boolean | undefined;
                        } | {
                            type: "SEPARATOR";
                            name: string;
                        })[];
                        state: string;
                        points: number;
                        commentsCount: number;
                        fields: {
                            type: string;
                            name: string;
                            value?: any;
                        }[];
                        lastChangeAt: Date;
                        isSuspend?: boolean | undefined;
                    }> | zod.ZodObject<{}, "strip", zod.ZodTypeAny, {}, {}>;
                }, "strip", zod.ZodTypeAny, {
                    data: {
                        id: string;
                        authorId: string;
                        createdAt: Date;
                        updatedAt: Date;
                        title: string;
                        key: string;
                        tags: string[];
                        visibility: string;
                        projectId: string;
                        schema: ({
                            options: {
                                min?: number | undefined;
                                max?: number | undefined;
                                noDecimal?: boolean | undefined;
                            };
                            type: "NUMBER";
                            name: string;
                            label: string;
                            visibility: string;
                            placeholder?: string | undefined;
                            helperText?: string | undefined;
                            required?: boolean | undefined;
                        } | {
                            options: {
                                minLength?: number | undefined;
                                maxLength?: number | undefined;
                                pattern?: string | undefined;
                            };
                            type: "TEXT";
                            name: string;
                            label: string;
                            visibility: string;
                            placeholder?: string | undefined;
                            helperText?: string | undefined;
                            required?: boolean | undefined;
                        } | {
                            options: {
                                isMulti: boolean;
                                optionList: string[];
                                maxSelect: number | null;
                                minSelect: number | null;
                            };
                            type: "SELECT";
                            name: string;
                            label: string;
                            visibility: string;
                            placeholder?: string | undefined;
                            helperText?: string | undefined;
                            required?: boolean | undefined;
                        } | {
                            options: {
                                min?: string | undefined;
                                max?: string | undefined;
                            };
                            type: "DATETIME";
                            name: string;
                            label: string;
                            visibility: string;
                            placeholder?: string | undefined;
                            helperText?: string | undefined;
                            required?: boolean | undefined;
                        } | {
                            options: {
                                minLength?: number | undefined;
                                maxLength?: number | undefined;
                                disableImages?: boolean | undefined;
                            };
                            type: "RICHTEXT";
                            name: string;
                            label: string;
                            visibility: string;
                            placeholder?: string | undefined;
                            helperText?: string | undefined;
                            required?: boolean | undefined;
                        } | {
                            type: "SEPARATOR";
                            name: string;
                        })[];
                        state: string;
                        points: number;
                        commentsCount: number;
                        fields: {
                            type: string;
                            name: string;
                            value?: any;
                        }[];
                        lastChangeAt: Date;
                        isSuspend?: boolean | undefined;
                    } | {};
                }, {
                    data: {
                        id: string;
                        authorId: string;
                        createdAt: Date;
                        updatedAt: Date;
                        title: string;
                        key: string;
                        tags: string[];
                        visibility: string;
                        projectId: string;
                        schema: ({
                            options: {
                                min?: number | undefined;
                                max?: number | undefined;
                                noDecimal?: boolean | undefined;
                            };
                            type: "NUMBER";
                            name: string;
                            label: string;
                            visibility: string;
                            placeholder?: string | undefined;
                            helperText?: string | undefined;
                            required?: boolean | undefined;
                        } | {
                            options: {
                                minLength?: number | undefined;
                                maxLength?: number | undefined;
                                pattern?: string | undefined;
                            };
                            type: "TEXT";
                            name: string;
                            label: string;
                            visibility: string;
                            placeholder?: string | undefined;
                            helperText?: string | undefined;
                            required?: boolean | undefined;
                        } | {
                            options: {
                                isMulti: boolean;
                                optionList: string[];
                                maxSelect: number | null;
                                minSelect: number | null;
                            };
                            type: "SELECT";
                            name: string;
                            label: string;
                            visibility: string;
                            placeholder?: string | undefined;
                            helperText?: string | undefined;
                            required?: boolean | undefined;
                        } | {
                            options: {
                                min?: string | undefined;
                                max?: string | undefined;
                            };
                            type: "DATETIME";
                            name: string;
                            label: string;
                            visibility: string;
                            placeholder?: string | undefined;
                            helperText?: string | undefined;
                            required?: boolean | undefined;
                        } | {
                            options: {
                                minLength?: number | undefined;
                                maxLength?: number | undefined;
                                disableImages?: boolean | undefined;
                            };
                            type: "RICHTEXT";
                            name: string;
                            label: string;
                            visibility: string;
                            placeholder?: string | undefined;
                            helperText?: string | undefined;
                            required?: boolean | undefined;
                        } | {
                            type: "SEPARATOR";
                            name: string;
                        })[];
                        state: string;
                        points: number;
                        commentsCount: number;
                        fields: {
                            type: string;
                            name: string;
                            value?: any;
                        }[];
                        lastChangeAt: Date;
                        isSuspend?: boolean | undefined;
                    } | {};
                }>;
                401: zod.ZodObject<{
                    title: zod.ZodString;
                    status: zod.ZodNumber;
                    detail: zod.ZodOptional<zod.ZodString>;
                }, "strip", zod.ZodTypeAny, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }>;
                404: zod.ZodObject<{
                    title: zod.ZodString;
                    status: zod.ZodNumber;
                    detail: zod.ZodOptional<zod.ZodString>;
                }, "strip", zod.ZodTypeAny, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }>;
                403: zod.ZodObject<{
                    title: zod.ZodString;
                    status: zod.ZodNumber;
                    detail: zod.ZodOptional<zod.ZodString>;
                    errors: zod.ZodOptional<zod.ZodArray<zod.ZodType<ErrorObject, zod.ZodTypeDef, ErrorObject>, "many">>;
                }, "strip", zod.ZodTypeAny, {
                    status: number;
                    title: string;
                    errors?: ErrorObject[] | undefined;
                    detail?: string | undefined;
                }, {
                    status: number;
                    title: string;
                    errors?: ErrorObject[] | undefined;
                    detail?: string | undefined;
                }>;
                500: zod.ZodObject<{
                    title: zod.ZodString;
                    status: zod.ZodNumber;
                    detail: zod.ZodOptional<zod.ZodString>;
                }, "strip", zod.ZodTypeAny, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }>;
            };
        };
        getIssueById: {
            metadata: {
                isPublic: boolean;
                permissions: {};
            };
            summary: "Get a issue by id";
            method: "GET";
            path: "/api/issues/by/id/:issueId";
            headers: zod.ZodOptional<zod.ZodObject<{
                authorization: zod.ZodString;
            }, "strip", zod.ZodTypeAny, {
                authorization: string;
            }, {
                authorization: string;
            }>>;
            responses: {
                200: zod.ZodObject<{
                    data: zod.ZodType<{
                        id: string;
                        authorId: string;
                        createdAt: Date;
                        title: string;
                        key: string;
                        tags: {
                            id: string;
                            name: string;
                            description: string;
                            displayName: string;
                            color: string;
                        }[];
                        author: {
                            id: string;
                            username: string;
                            email: string;
                            roleDisplayName: string;
                            roleName: string;
                        };
                        visibility: string;
                        projectId: string;
                        schema: ({
                            options: {
                                min?: number | undefined;
                                max?: number | undefined;
                                noDecimal?: boolean | undefined;
                            };
                            type: "NUMBER";
                            name: string;
                            label: string;
                            visibility: string;
                            placeholder?: string | undefined;
                            helperText?: string | undefined;
                            required?: boolean | undefined;
                        } | {
                            options: {
                                minLength?: number | undefined;
                                maxLength?: number | undefined;
                                pattern?: string | undefined;
                            };
                            type: "TEXT";
                            name: string;
                            label: string;
                            visibility: string;
                            placeholder?: string | undefined;
                            helperText?: string | undefined;
                            required?: boolean | undefined;
                        } | {
                            options: {
                                isMulti: boolean;
                                optionList: string[];
                                maxSelect: number | null;
                                minSelect: number | null;
                            };
                            type: "SELECT";
                            name: string;
                            label: string;
                            visibility: string;
                            placeholder?: string | undefined;
                            helperText?: string | undefined;
                            required?: boolean | undefined;
                        } | {
                            options: {
                                min?: string | undefined;
                                max?: string | undefined;
                            };
                            type: "DATETIME";
                            name: string;
                            label: string;
                            visibility: string;
                            placeholder?: string | undefined;
                            helperText?: string | undefined;
                            required?: boolean | undefined;
                        } | {
                            options: {
                                minLength?: number | undefined;
                                maxLength?: number | undefined;
                                disableImages?: boolean | undefined;
                            };
                            type: "RICHTEXT";
                            name: string;
                            label: string;
                            visibility: string;
                            placeholder?: string | undefined;
                            helperText?: string | undefined;
                            required?: boolean | undefined;
                        } | {
                            type: "SEPARATOR";
                            name: string;
                        })[];
                        state: string;
                        points: number;
                        commentsCount: number;
                        fields: {
                            type: string;
                            name: string;
                            value?: any;
                        }[];
                        lastChangeAt: Date;
                        project: {
                            id: string;
                            name: string;
                            slug: string;
                            displayName: string;
                        };
                        group: {
                            id: string;
                            name: string;
                            slug: string;
                            displayName: string;
                        };
                        isSuspend?: boolean | undefined;
                    } | {
                        id: string;
                        authorId: string;
                        createdAt: Date;
                        title: string;
                        key: string;
                        tags: {
                            id: string;
                            name: string;
                            description: string;
                            displayName: string;
                            color: string;
                        }[];
                        author: {
                            id: string;
                            username: string;
                            email: string;
                            roleDisplayName: string;
                            roleName: string;
                        };
                        visibility: string;
                        projectId: string;
                        schema: ({
                            options: {
                                min?: number | undefined;
                                max?: number | undefined;
                                noDecimal?: boolean | undefined;
                            };
                            type: "NUMBER";
                            name: string;
                            label: string;
                            visibility: string;
                            placeholder?: string | undefined;
                            helperText?: string | undefined;
                            required?: boolean | undefined;
                        } | {
                            options: {
                                minLength?: number | undefined;
                                maxLength?: number | undefined;
                                pattern?: string | undefined;
                            };
                            type: "TEXT";
                            name: string;
                            label: string;
                            visibility: string;
                            placeholder?: string | undefined;
                            helperText?: string | undefined;
                            required?: boolean | undefined;
                        } | {
                            options: {
                                isMulti: boolean;
                                optionList: string[];
                                maxSelect: number | null;
                                minSelect: number | null;
                            };
                            type: "SELECT";
                            name: string;
                            label: string;
                            visibility: string;
                            placeholder?: string | undefined;
                            helperText?: string | undefined;
                            required?: boolean | undefined;
                        } | {
                            options: {
                                min?: string | undefined;
                                max?: string | undefined;
                            };
                            type: "DATETIME";
                            name: string;
                            label: string;
                            visibility: string;
                            placeholder?: string | undefined;
                            helperText?: string | undefined;
                            required?: boolean | undefined;
                        } | {
                            options: {
                                minLength?: number | undefined;
                                maxLength?: number | undefined;
                                disableImages?: boolean | undefined;
                            };
                            type: "RICHTEXT";
                            name: string;
                            label: string;
                            visibility: string;
                            placeholder?: string | undefined;
                            helperText?: string | undefined;
                            required?: boolean | undefined;
                        } | {
                            type: "SEPARATOR";
                            name: string;
                        })[];
                        state: string;
                        points: number;
                        commentsCount: number;
                        fields: {
                            type: string;
                            name: string;
                            value?: any;
                        }[];
                        lastChangeAt: Date;
                        project: {
                            id: string;
                            name: string;
                            slug: string;
                            displayName: string;
                        };
                        group: {
                            id: string;
                            name: string;
                            slug: string;
                            displayName: string;
                        };
                        operations: {
                            canBlock: boolean;
                            canDelete: boolean;
                            canUpdateState: boolean;
                            canEditFields: boolean;
                            canEditInternalFields: boolean;
                            canEditHiddenFields: boolean;
                            canUpdateConfidents: boolean;
                            canBlockComments: boolean;
                            canDeleteComments: boolean;
                            canUpdateTags: boolean;
                            canUpdateVisibility: boolean;
                        };
                        isUpvotedByMe: boolean;
                        isDownvotedByMe: boolean;
                        isSuspend?: boolean | undefined;
                    } | {
                        id: string;
                        authorId: string;
                        createdAt: Date;
                        updatedAt: Date;
                        title: string;
                        key: string;
                        tags: {
                            id: string;
                            name: string;
                            description: string;
                            displayName: string;
                            color: string;
                        }[];
                        author: {
                            id: string;
                            username: string;
                            email: string;
                            roleDisplayName: string;
                            roleName: string;
                        };
                        visibility: string;
                        projectId: string;
                        schema: ({
                            options: {
                                min?: number | undefined;
                                max?: number | undefined;
                                noDecimal?: boolean | undefined;
                            };
                            type: "NUMBER";
                            name: string;
                            label: string;
                            visibility: string;
                            placeholder?: string | undefined;
                            helperText?: string | undefined;
                            required?: boolean | undefined;
                        } | {
                            options: {
                                minLength?: number | undefined;
                                maxLength?: number | undefined;
                                pattern?: string | undefined;
                            };
                            type: "TEXT";
                            name: string;
                            label: string;
                            visibility: string;
                            placeholder?: string | undefined;
                            helperText?: string | undefined;
                            required?: boolean | undefined;
                        } | {
                            options: {
                                isMulti: boolean;
                                optionList: string[];
                                maxSelect: number | null;
                                minSelect: number | null;
                            };
                            type: "SELECT";
                            name: string;
                            label: string;
                            visibility: string;
                            placeholder?: string | undefined;
                            helperText?: string | undefined;
                            required?: boolean | undefined;
                        } | {
                            options: {
                                min?: string | undefined;
                                max?: string | undefined;
                            };
                            type: "DATETIME";
                            name: string;
                            label: string;
                            visibility: string;
                            placeholder?: string | undefined;
                            helperText?: string | undefined;
                            required?: boolean | undefined;
                        } | {
                            options: {
                                minLength?: number | undefined;
                                maxLength?: number | undefined;
                                disableImages?: boolean | undefined;
                            };
                            type: "RICHTEXT";
                            name: string;
                            label: string;
                            visibility: string;
                            placeholder?: string | undefined;
                            helperText?: string | undefined;
                            required?: boolean | undefined;
                        } | {
                            type: "SEPARATOR";
                            name: string;
                        })[];
                        state: string;
                        points: number;
                        commentsCount: number;
                        fields: {
                            type: string;
                            name: string;
                            value?: any;
                        }[];
                        lastChangeAt: Date;
                        project: {
                            id: string;
                            name: string;
                            slug: string;
                            displayName: string;
                        };
                        group: {
                            id: string;
                            name: string;
                            slug: string;
                            displayName: string;
                        };
                        operations: {
                            canBlock: boolean;
                            canDelete: boolean;
                            canUpdateState: boolean;
                            canEditFields: boolean;
                            canEditInternalFields: boolean;
                            canEditHiddenFields: boolean;
                            canUpdateConfidents: boolean;
                            canBlockComments: boolean;
                            canDeleteComments: boolean;
                            canUpdateTags: boolean;
                            canUpdateVisibility: boolean;
                        };
                        isUpvotedByMe: boolean;
                        isDownvotedByMe: boolean;
                        isSuspend?: boolean | undefined;
                    }, zod.ZodTypeDef, {
                        id: string;
                        authorId: string;
                        createdAt: Date;
                        title: string;
                        key: string;
                        tags: {
                            id: string;
                            name: string;
                            description: string;
                            displayName: string;
                            color: string;
                        }[];
                        author: {
                            id: string;
                            username: string;
                            email: string;
                            roleDisplayName: string;
                            roleName: string;
                        };
                        visibility: string;
                        projectId: string;
                        schema: ({
                            options: {
                                min?: number | undefined;
                                max?: number | undefined;
                                noDecimal?: boolean | undefined;
                            };
                            type: "NUMBER";
                            name: string;
                            label: string;
                            visibility: string;
                            placeholder?: string | undefined;
                            helperText?: string | undefined;
                            required?: boolean | undefined;
                        } | {
                            options: {
                                minLength?: number | undefined;
                                maxLength?: number | undefined;
                                pattern?: string | undefined;
                            };
                            type: "TEXT";
                            name: string;
                            label: string;
                            visibility: string;
                            placeholder?: string | undefined;
                            helperText?: string | undefined;
                            required?: boolean | undefined;
                        } | {
                            options: {
                                isMulti: boolean;
                                optionList: string[];
                                maxSelect: number | null;
                                minSelect: number | null;
                            };
                            type: "SELECT";
                            name: string;
                            label: string;
                            visibility: string;
                            placeholder?: string | undefined;
                            helperText?: string | undefined;
                            required?: boolean | undefined;
                        } | {
                            options: {
                                min?: string | undefined;
                                max?: string | undefined;
                            };
                            type: "DATETIME";
                            name: string;
                            label: string;
                            visibility: string;
                            placeholder?: string | undefined;
                            helperText?: string | undefined;
                            required?: boolean | undefined;
                        } | {
                            options: {
                                minLength?: number | undefined;
                                maxLength?: number | undefined;
                                disableImages?: boolean | undefined;
                            };
                            type: "RICHTEXT";
                            name: string;
                            label: string;
                            visibility: string;
                            placeholder?: string | undefined;
                            helperText?: string | undefined;
                            required?: boolean | undefined;
                        } | {
                            type: "SEPARATOR";
                            name: string;
                        })[];
                        state: string;
                        points: number;
                        commentsCount: number;
                        fields: {
                            type: string;
                            name: string;
                            value?: any;
                        }[];
                        lastChangeAt: Date;
                        project: {
                            id: string;
                            name: string;
                            slug: string;
                            displayName: string;
                        };
                        group: {
                            id: string;
                            name: string;
                            slug: string;
                            displayName: string;
                        };
                        isSuspend?: boolean | undefined;
                    } | {
                        id: string;
                        authorId: string;
                        createdAt: Date;
                        title: string;
                        key: string;
                        tags: {
                            id: string;
                            name: string;
                            description: string;
                            displayName: string;
                            color: string;
                        }[];
                        author: {
                            id: string;
                            username: string;
                            email: string;
                            roleDisplayName: string;
                            roleName: string;
                        };
                        visibility: string;
                        projectId: string;
                        schema: ({
                            options: {
                                min?: number | undefined;
                                max?: number | undefined;
                                noDecimal?: boolean | undefined;
                            };
                            type: "NUMBER";
                            name: string;
                            label: string;
                            visibility: string;
                            placeholder?: string | undefined;
                            helperText?: string | undefined;
                            required?: boolean | undefined;
                        } | {
                            options: {
                                minLength?: number | undefined;
                                maxLength?: number | undefined;
                                pattern?: string | undefined;
                            };
                            type: "TEXT";
                            name: string;
                            label: string;
                            visibility: string;
                            placeholder?: string | undefined;
                            helperText?: string | undefined;
                            required?: boolean | undefined;
                        } | {
                            options: {
                                isMulti: boolean;
                                optionList: string[];
                                maxSelect: number | null;
                                minSelect: number | null;
                            };
                            type: "SELECT";
                            name: string;
                            label: string;
                            visibility: string;
                            placeholder?: string | undefined;
                            helperText?: string | undefined;
                            required?: boolean | undefined;
                        } | {
                            options: {
                                min?: string | undefined;
                                max?: string | undefined;
                            };
                            type: "DATETIME";
                            name: string;
                            label: string;
                            visibility: string;
                            placeholder?: string | undefined;
                            helperText?: string | undefined;
                            required?: boolean | undefined;
                        } | {
                            options: {
                                minLength?: number | undefined;
                                maxLength?: number | undefined;
                                disableImages?: boolean | undefined;
                            };
                            type: "RICHTEXT";
                            name: string;
                            label: string;
                            visibility: string;
                            placeholder?: string | undefined;
                            helperText?: string | undefined;
                            required?: boolean | undefined;
                        } | {
                            type: "SEPARATOR";
                            name: string;
                        })[];
                        state: string;
                        points: number;
                        commentsCount: number;
                        fields: {
                            type: string;
                            name: string;
                            value?: any;
                        }[];
                        lastChangeAt: Date;
                        project: {
                            id: string;
                            name: string;
                            slug: string;
                            displayName: string;
                        };
                        group: {
                            id: string;
                            name: string;
                            slug: string;
                            displayName: string;
                        };
                        operations: {
                            canBlock: boolean;
                            canDelete: boolean;
                            canUpdateState: boolean;
                            canEditFields: boolean;
                            canEditInternalFields: boolean;
                            canEditHiddenFields: boolean;
                            canUpdateConfidents: boolean;
                            canBlockComments: boolean;
                            canDeleteComments: boolean;
                            canUpdateTags: boolean;
                            canUpdateVisibility: boolean;
                        };
                        isUpvotedByMe: boolean;
                        isDownvotedByMe: boolean;
                        isSuspend?: boolean | undefined;
                    } | {
                        id: string;
                        authorId: string;
                        createdAt: Date;
                        updatedAt: Date;
                        title: string;
                        key: string;
                        tags: {
                            id: string;
                            name: string;
                            description: string;
                            displayName: string;
                            color: string;
                        }[];
                        author: {
                            id: string;
                            username: string;
                            email: string;
                            roleDisplayName: string;
                            roleName: string;
                        };
                        visibility: string;
                        projectId: string;
                        schema: ({
                            options: {
                                min?: number | undefined;
                                max?: number | undefined;
                                noDecimal?: boolean | undefined;
                            };
                            type: "NUMBER";
                            name: string;
                            label: string;
                            visibility: string;
                            placeholder?: string | undefined;
                            helperText?: string | undefined;
                            required?: boolean | undefined;
                        } | {
                            options: {
                                minLength?: number | undefined;
                                maxLength?: number | undefined;
                                pattern?: string | undefined;
                            };
                            type: "TEXT";
                            name: string;
                            label: string;
                            visibility: string;
                            placeholder?: string | undefined;
                            helperText?: string | undefined;
                            required?: boolean | undefined;
                        } | {
                            options: {
                                isMulti: boolean;
                                optionList: string[];
                                maxSelect: number | null;
                                minSelect: number | null;
                            };
                            type: "SELECT";
                            name: string;
                            label: string;
                            visibility: string;
                            placeholder?: string | undefined;
                            helperText?: string | undefined;
                            required?: boolean | undefined;
                        } | {
                            options: {
                                min?: string | undefined;
                                max?: string | undefined;
                            };
                            type: "DATETIME";
                            name: string;
                            label: string;
                            visibility: string;
                            placeholder?: string | undefined;
                            helperText?: string | undefined;
                            required?: boolean | undefined;
                        } | {
                            options: {
                                minLength?: number | undefined;
                                maxLength?: number | undefined;
                                disableImages?: boolean | undefined;
                            };
                            type: "RICHTEXT";
                            name: string;
                            label: string;
                            visibility: string;
                            placeholder?: string | undefined;
                            helperText?: string | undefined;
                            required?: boolean | undefined;
                        } | {
                            type: "SEPARATOR";
                            name: string;
                        })[];
                        state: string;
                        points: number;
                        commentsCount: number;
                        fields: {
                            type: string;
                            name: string;
                            value?: any;
                        }[];
                        lastChangeAt: Date;
                        project: {
                            id: string;
                            name: string;
                            slug: string;
                            displayName: string;
                        };
                        group: {
                            id: string;
                            name: string;
                            slug: string;
                            displayName: string;
                        };
                        operations: {
                            canBlock: boolean;
                            canDelete: boolean;
                            canUpdateState: boolean;
                            canEditFields: boolean;
                            canEditInternalFields: boolean;
                            canEditHiddenFields: boolean;
                            canUpdateConfidents: boolean;
                            canBlockComments: boolean;
                            canDeleteComments: boolean;
                            canUpdateTags: boolean;
                            canUpdateVisibility: boolean;
                        };
                        isUpvotedByMe: boolean;
                        isDownvotedByMe: boolean;
                        isSuspend?: boolean | undefined;
                    }> | zod.ZodObject<{}, "strip", zod.ZodTypeAny, {}, {}>;
                }, "strip", zod.ZodTypeAny, {
                    data: {
                        id: string;
                        authorId: string;
                        createdAt: Date;
                        title: string;
                        key: string;
                        tags: {
                            id: string;
                            name: string;
                            description: string;
                            displayName: string;
                            color: string;
                        }[];
                        author: {
                            id: string;
                            username: string;
                            email: string;
                            roleDisplayName: string;
                            roleName: string;
                        };
                        visibility: string;
                        projectId: string;
                        schema: ({
                            options: {
                                min?: number | undefined;
                                max?: number | undefined;
                                noDecimal?: boolean | undefined;
                            };
                            type: "NUMBER";
                            name: string;
                            label: string;
                            visibility: string;
                            placeholder?: string | undefined;
                            helperText?: string | undefined;
                            required?: boolean | undefined;
                        } | {
                            options: {
                                minLength?: number | undefined;
                                maxLength?: number | undefined;
                                pattern?: string | undefined;
                            };
                            type: "TEXT";
                            name: string;
                            label: string;
                            visibility: string;
                            placeholder?: string | undefined;
                            helperText?: string | undefined;
                            required?: boolean | undefined;
                        } | {
                            options: {
                                isMulti: boolean;
                                optionList: string[];
                                maxSelect: number | null;
                                minSelect: number | null;
                            };
                            type: "SELECT";
                            name: string;
                            label: string;
                            visibility: string;
                            placeholder?: string | undefined;
                            helperText?: string | undefined;
                            required?: boolean | undefined;
                        } | {
                            options: {
                                min?: string | undefined;
                                max?: string | undefined;
                            };
                            type: "DATETIME";
                            name: string;
                            label: string;
                            visibility: string;
                            placeholder?: string | undefined;
                            helperText?: string | undefined;
                            required?: boolean | undefined;
                        } | {
                            options: {
                                minLength?: number | undefined;
                                maxLength?: number | undefined;
                                disableImages?: boolean | undefined;
                            };
                            type: "RICHTEXT";
                            name: string;
                            label: string;
                            visibility: string;
                            placeholder?: string | undefined;
                            helperText?: string | undefined;
                            required?: boolean | undefined;
                        } | {
                            type: "SEPARATOR";
                            name: string;
                        })[];
                        state: string;
                        points: number;
                        commentsCount: number;
                        fields: {
                            type: string;
                            name: string;
                            value?: any;
                        }[];
                        lastChangeAt: Date;
                        project: {
                            id: string;
                            name: string;
                            slug: string;
                            displayName: string;
                        };
                        group: {
                            id: string;
                            name: string;
                            slug: string;
                            displayName: string;
                        };
                        isSuspend?: boolean | undefined;
                    } | {
                        id: string;
                        authorId: string;
                        createdAt: Date;
                        title: string;
                        key: string;
                        tags: {
                            id: string;
                            name: string;
                            description: string;
                            displayName: string;
                            color: string;
                        }[];
                        author: {
                            id: string;
                            username: string;
                            email: string;
                            roleDisplayName: string;
                            roleName: string;
                        };
                        visibility: string;
                        projectId: string;
                        schema: ({
                            options: {
                                min?: number | undefined;
                                max?: number | undefined;
                                noDecimal?: boolean | undefined;
                            };
                            type: "NUMBER";
                            name: string;
                            label: string;
                            visibility: string;
                            placeholder?: string | undefined;
                            helperText?: string | undefined;
                            required?: boolean | undefined;
                        } | {
                            options: {
                                minLength?: number | undefined;
                                maxLength?: number | undefined;
                                pattern?: string | undefined;
                            };
                            type: "TEXT";
                            name: string;
                            label: string;
                            visibility: string;
                            placeholder?: string | undefined;
                            helperText?: string | undefined;
                            required?: boolean | undefined;
                        } | {
                            options: {
                                isMulti: boolean;
                                optionList: string[];
                                maxSelect: number | null;
                                minSelect: number | null;
                            };
                            type: "SELECT";
                            name: string;
                            label: string;
                            visibility: string;
                            placeholder?: string | undefined;
                            helperText?: string | undefined;
                            required?: boolean | undefined;
                        } | {
                            options: {
                                min?: string | undefined;
                                max?: string | undefined;
                            };
                            type: "DATETIME";
                            name: string;
                            label: string;
                            visibility: string;
                            placeholder?: string | undefined;
                            helperText?: string | undefined;
                            required?: boolean | undefined;
                        } | {
                            options: {
                                minLength?: number | undefined;
                                maxLength?: number | undefined;
                                disableImages?: boolean | undefined;
                            };
                            type: "RICHTEXT";
                            name: string;
                            label: string;
                            visibility: string;
                            placeholder?: string | undefined;
                            helperText?: string | undefined;
                            required?: boolean | undefined;
                        } | {
                            type: "SEPARATOR";
                            name: string;
                        })[];
                        state: string;
                        points: number;
                        commentsCount: number;
                        fields: {
                            type: string;
                            name: string;
                            value?: any;
                        }[];
                        lastChangeAt: Date;
                        project: {
                            id: string;
                            name: string;
                            slug: string;
                            displayName: string;
                        };
                        group: {
                            id: string;
                            name: string;
                            slug: string;
                            displayName: string;
                        };
                        operations: {
                            canBlock: boolean;
                            canDelete: boolean;
                            canUpdateState: boolean;
                            canEditFields: boolean;
                            canEditInternalFields: boolean;
                            canEditHiddenFields: boolean;
                            canUpdateConfidents: boolean;
                            canBlockComments: boolean;
                            canDeleteComments: boolean;
                            canUpdateTags: boolean;
                            canUpdateVisibility: boolean;
                        };
                        isUpvotedByMe: boolean;
                        isDownvotedByMe: boolean;
                        isSuspend?: boolean | undefined;
                    } | {
                        id: string;
                        authorId: string;
                        createdAt: Date;
                        updatedAt: Date;
                        title: string;
                        key: string;
                        tags: {
                            id: string;
                            name: string;
                            description: string;
                            displayName: string;
                            color: string;
                        }[];
                        author: {
                            id: string;
                            username: string;
                            email: string;
                            roleDisplayName: string;
                            roleName: string;
                        };
                        visibility: string;
                        projectId: string;
                        schema: ({
                            options: {
                                min?: number | undefined;
                                max?: number | undefined;
                                noDecimal?: boolean | undefined;
                            };
                            type: "NUMBER";
                            name: string;
                            label: string;
                            visibility: string;
                            placeholder?: string | undefined;
                            helperText?: string | undefined;
                            required?: boolean | undefined;
                        } | {
                            options: {
                                minLength?: number | undefined;
                                maxLength?: number | undefined;
                                pattern?: string | undefined;
                            };
                            type: "TEXT";
                            name: string;
                            label: string;
                            visibility: string;
                            placeholder?: string | undefined;
                            helperText?: string | undefined;
                            required?: boolean | undefined;
                        } | {
                            options: {
                                isMulti: boolean;
                                optionList: string[];
                                maxSelect: number | null;
                                minSelect: number | null;
                            };
                            type: "SELECT";
                            name: string;
                            label: string;
                            visibility: string;
                            placeholder?: string | undefined;
                            helperText?: string | undefined;
                            required?: boolean | undefined;
                        } | {
                            options: {
                                min?: string | undefined;
                                max?: string | undefined;
                            };
                            type: "DATETIME";
                            name: string;
                            label: string;
                            visibility: string;
                            placeholder?: string | undefined;
                            helperText?: string | undefined;
                            required?: boolean | undefined;
                        } | {
                            options: {
                                minLength?: number | undefined;
                                maxLength?: number | undefined;
                                disableImages?: boolean | undefined;
                            };
                            type: "RICHTEXT";
                            name: string;
                            label: string;
                            visibility: string;
                            placeholder?: string | undefined;
                            helperText?: string | undefined;
                            required?: boolean | undefined;
                        } | {
                            type: "SEPARATOR";
                            name: string;
                        })[];
                        state: string;
                        points: number;
                        commentsCount: number;
                        fields: {
                            type: string;
                            name: string;
                            value?: any;
                        }[];
                        lastChangeAt: Date;
                        project: {
                            id: string;
                            name: string;
                            slug: string;
                            displayName: string;
                        };
                        group: {
                            id: string;
                            name: string;
                            slug: string;
                            displayName: string;
                        };
                        operations: {
                            canBlock: boolean;
                            canDelete: boolean;
                            canUpdateState: boolean;
                            canEditFields: boolean;
                            canEditInternalFields: boolean;
                            canEditHiddenFields: boolean;
                            canUpdateConfidents: boolean;
                            canBlockComments: boolean;
                            canDeleteComments: boolean;
                            canUpdateTags: boolean;
                            canUpdateVisibility: boolean;
                        };
                        isUpvotedByMe: boolean;
                        isDownvotedByMe: boolean;
                        isSuspend?: boolean | undefined;
                    } | {};
                }, {
                    data: {
                        id: string;
                        authorId: string;
                        createdAt: Date;
                        title: string;
                        key: string;
                        tags: {
                            id: string;
                            name: string;
                            description: string;
                            displayName: string;
                            color: string;
                        }[];
                        author: {
                            id: string;
                            username: string;
                            email: string;
                            roleDisplayName: string;
                            roleName: string;
                        };
                        visibility: string;
                        projectId: string;
                        schema: ({
                            options: {
                                min?: number | undefined;
                                max?: number | undefined;
                                noDecimal?: boolean | undefined;
                            };
                            type: "NUMBER";
                            name: string;
                            label: string;
                            visibility: string;
                            placeholder?: string | undefined;
                            helperText?: string | undefined;
                            required?: boolean | undefined;
                        } | {
                            options: {
                                minLength?: number | undefined;
                                maxLength?: number | undefined;
                                pattern?: string | undefined;
                            };
                            type: "TEXT";
                            name: string;
                            label: string;
                            visibility: string;
                            placeholder?: string | undefined;
                            helperText?: string | undefined;
                            required?: boolean | undefined;
                        } | {
                            options: {
                                isMulti: boolean;
                                optionList: string[];
                                maxSelect: number | null;
                                minSelect: number | null;
                            };
                            type: "SELECT";
                            name: string;
                            label: string;
                            visibility: string;
                            placeholder?: string | undefined;
                            helperText?: string | undefined;
                            required?: boolean | undefined;
                        } | {
                            options: {
                                min?: string | undefined;
                                max?: string | undefined;
                            };
                            type: "DATETIME";
                            name: string;
                            label: string;
                            visibility: string;
                            placeholder?: string | undefined;
                            helperText?: string | undefined;
                            required?: boolean | undefined;
                        } | {
                            options: {
                                minLength?: number | undefined;
                                maxLength?: number | undefined;
                                disableImages?: boolean | undefined;
                            };
                            type: "RICHTEXT";
                            name: string;
                            label: string;
                            visibility: string;
                            placeholder?: string | undefined;
                            helperText?: string | undefined;
                            required?: boolean | undefined;
                        } | {
                            type: "SEPARATOR";
                            name: string;
                        })[];
                        state: string;
                        points: number;
                        commentsCount: number;
                        fields: {
                            type: string;
                            name: string;
                            value?: any;
                        }[];
                        lastChangeAt: Date;
                        project: {
                            id: string;
                            name: string;
                            slug: string;
                            displayName: string;
                        };
                        group: {
                            id: string;
                            name: string;
                            slug: string;
                            displayName: string;
                        };
                        isSuspend?: boolean | undefined;
                    } | {
                        id: string;
                        authorId: string;
                        createdAt: Date;
                        title: string;
                        key: string;
                        tags: {
                            id: string;
                            name: string;
                            description: string;
                            displayName: string;
                            color: string;
                        }[];
                        author: {
                            id: string;
                            username: string;
                            email: string;
                            roleDisplayName: string;
                            roleName: string;
                        };
                        visibility: string;
                        projectId: string;
                        schema: ({
                            options: {
                                min?: number | undefined;
                                max?: number | undefined;
                                noDecimal?: boolean | undefined;
                            };
                            type: "NUMBER";
                            name: string;
                            label: string;
                            visibility: string;
                            placeholder?: string | undefined;
                            helperText?: string | undefined;
                            required?: boolean | undefined;
                        } | {
                            options: {
                                minLength?: number | undefined;
                                maxLength?: number | undefined;
                                pattern?: string | undefined;
                            };
                            type: "TEXT";
                            name: string;
                            label: string;
                            visibility: string;
                            placeholder?: string | undefined;
                            helperText?: string | undefined;
                            required?: boolean | undefined;
                        } | {
                            options: {
                                isMulti: boolean;
                                optionList: string[];
                                maxSelect: number | null;
                                minSelect: number | null;
                            };
                            type: "SELECT";
                            name: string;
                            label: string;
                            visibility: string;
                            placeholder?: string | undefined;
                            helperText?: string | undefined;
                            required?: boolean | undefined;
                        } | {
                            options: {
                                min?: string | undefined;
                                max?: string | undefined;
                            };
                            type: "DATETIME";
                            name: string;
                            label: string;
                            visibility: string;
                            placeholder?: string | undefined;
                            helperText?: string | undefined;
                            required?: boolean | undefined;
                        } | {
                            options: {
                                minLength?: number | undefined;
                                maxLength?: number | undefined;
                                disableImages?: boolean | undefined;
                            };
                            type: "RICHTEXT";
                            name: string;
                            label: string;
                            visibility: string;
                            placeholder?: string | undefined;
                            helperText?: string | undefined;
                            required?: boolean | undefined;
                        } | {
                            type: "SEPARATOR";
                            name: string;
                        })[];
                        state: string;
                        points: number;
                        commentsCount: number;
                        fields: {
                            type: string;
                            name: string;
                            value?: any;
                        }[];
                        lastChangeAt: Date;
                        project: {
                            id: string;
                            name: string;
                            slug: string;
                            displayName: string;
                        };
                        group: {
                            id: string;
                            name: string;
                            slug: string;
                            displayName: string;
                        };
                        operations: {
                            canBlock: boolean;
                            canDelete: boolean;
                            canUpdateState: boolean;
                            canEditFields: boolean;
                            canEditInternalFields: boolean;
                            canEditHiddenFields: boolean;
                            canUpdateConfidents: boolean;
                            canBlockComments: boolean;
                            canDeleteComments: boolean;
                            canUpdateTags: boolean;
                            canUpdateVisibility: boolean;
                        };
                        isUpvotedByMe: boolean;
                        isDownvotedByMe: boolean;
                        isSuspend?: boolean | undefined;
                    } | {
                        id: string;
                        authorId: string;
                        createdAt: Date;
                        updatedAt: Date;
                        title: string;
                        key: string;
                        tags: {
                            id: string;
                            name: string;
                            description: string;
                            displayName: string;
                            color: string;
                        }[];
                        author: {
                            id: string;
                            username: string;
                            email: string;
                            roleDisplayName: string;
                            roleName: string;
                        };
                        visibility: string;
                        projectId: string;
                        schema: ({
                            options: {
                                min?: number | undefined;
                                max?: number | undefined;
                                noDecimal?: boolean | undefined;
                            };
                            type: "NUMBER";
                            name: string;
                            label: string;
                            visibility: string;
                            placeholder?: string | undefined;
                            helperText?: string | undefined;
                            required?: boolean | undefined;
                        } | {
                            options: {
                                minLength?: number | undefined;
                                maxLength?: number | undefined;
                                pattern?: string | undefined;
                            };
                            type: "TEXT";
                            name: string;
                            label: string;
                            visibility: string;
                            placeholder?: string | undefined;
                            helperText?: string | undefined;
                            required?: boolean | undefined;
                        } | {
                            options: {
                                isMulti: boolean;
                                optionList: string[];
                                maxSelect: number | null;
                                minSelect: number | null;
                            };
                            type: "SELECT";
                            name: string;
                            label: string;
                            visibility: string;
                            placeholder?: string | undefined;
                            helperText?: string | undefined;
                            required?: boolean | undefined;
                        } | {
                            options: {
                                min?: string | undefined;
                                max?: string | undefined;
                            };
                            type: "DATETIME";
                            name: string;
                            label: string;
                            visibility: string;
                            placeholder?: string | undefined;
                            helperText?: string | undefined;
                            required?: boolean | undefined;
                        } | {
                            options: {
                                minLength?: number | undefined;
                                maxLength?: number | undefined;
                                disableImages?: boolean | undefined;
                            };
                            type: "RICHTEXT";
                            name: string;
                            label: string;
                            visibility: string;
                            placeholder?: string | undefined;
                            helperText?: string | undefined;
                            required?: boolean | undefined;
                        } | {
                            type: "SEPARATOR";
                            name: string;
                        })[];
                        state: string;
                        points: number;
                        commentsCount: number;
                        fields: {
                            type: string;
                            name: string;
                            value?: any;
                        }[];
                        lastChangeAt: Date;
                        project: {
                            id: string;
                            name: string;
                            slug: string;
                            displayName: string;
                        };
                        group: {
                            id: string;
                            name: string;
                            slug: string;
                            displayName: string;
                        };
                        operations: {
                            canBlock: boolean;
                            canDelete: boolean;
                            canUpdateState: boolean;
                            canEditFields: boolean;
                            canEditInternalFields: boolean;
                            canEditHiddenFields: boolean;
                            canUpdateConfidents: boolean;
                            canBlockComments: boolean;
                            canDeleteComments: boolean;
                            canUpdateTags: boolean;
                            canUpdateVisibility: boolean;
                        };
                        isUpvotedByMe: boolean;
                        isDownvotedByMe: boolean;
                        isSuspend?: boolean | undefined;
                    } | {};
                }>;
                404: zod.ZodObject<{
                    title: zod.ZodString;
                    status: zod.ZodNumber;
                    detail: zod.ZodOptional<zod.ZodString>;
                }, "strip", zod.ZodTypeAny, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }>;
                409: zod.ZodObject<{
                    title: zod.ZodString;
                    status: zod.ZodNumber;
                    detail: zod.ZodOptional<zod.ZodString>;
                }, "strip", zod.ZodTypeAny, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }>;
                500: zod.ZodObject<{
                    title: zod.ZodString;
                    status: zod.ZodNumber;
                    detail: zod.ZodOptional<zod.ZodString>;
                }, "strip", zod.ZodTypeAny, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }>;
            };
        };
        getIssueByKey: {
            metadata: {
                isPublic: boolean;
                permissions: {};
            };
            summary: "Get a issue by key";
            method: "GET";
            path: "/api/issues/by/key/:key";
            headers: zod.ZodOptional<zod.ZodObject<{
                authorization: zod.ZodString;
            }, "strip", zod.ZodTypeAny, {
                authorization: string;
            }, {
                authorization: string;
            }>>;
            responses: {
                200: zod.ZodObject<{
                    data: zod.ZodType<{
                        id: string;
                        authorId: string;
                        createdAt: Date;
                        title: string;
                        key: string;
                        tags: {
                            id: string;
                            name: string;
                            description: string;
                            displayName: string;
                            color: string;
                        }[];
                        author: {
                            id: string;
                            username: string;
                            email: string;
                            roleDisplayName: string;
                            roleName: string;
                        };
                        visibility: string;
                        projectId: string;
                        schema: ({
                            options: {
                                min?: number | undefined;
                                max?: number | undefined;
                                noDecimal?: boolean | undefined;
                            };
                            type: "NUMBER";
                            name: string;
                            label: string;
                            visibility: string;
                            placeholder?: string | undefined;
                            helperText?: string | undefined;
                            required?: boolean | undefined;
                        } | {
                            options: {
                                minLength?: number | undefined;
                                maxLength?: number | undefined;
                                pattern?: string | undefined;
                            };
                            type: "TEXT";
                            name: string;
                            label: string;
                            visibility: string;
                            placeholder?: string | undefined;
                            helperText?: string | undefined;
                            required?: boolean | undefined;
                        } | {
                            options: {
                                isMulti: boolean;
                                optionList: string[];
                                maxSelect: number | null;
                                minSelect: number | null;
                            };
                            type: "SELECT";
                            name: string;
                            label: string;
                            visibility: string;
                            placeholder?: string | undefined;
                            helperText?: string | undefined;
                            required?: boolean | undefined;
                        } | {
                            options: {
                                min?: string | undefined;
                                max?: string | undefined;
                            };
                            type: "DATETIME";
                            name: string;
                            label: string;
                            visibility: string;
                            placeholder?: string | undefined;
                            helperText?: string | undefined;
                            required?: boolean | undefined;
                        } | {
                            options: {
                                minLength?: number | undefined;
                                maxLength?: number | undefined;
                                disableImages?: boolean | undefined;
                            };
                            type: "RICHTEXT";
                            name: string;
                            label: string;
                            visibility: string;
                            placeholder?: string | undefined;
                            helperText?: string | undefined;
                            required?: boolean | undefined;
                        } | {
                            type: "SEPARATOR";
                            name: string;
                        })[];
                        state: string;
                        points: number;
                        commentsCount: number;
                        fields: {
                            type: string;
                            name: string;
                            value?: any;
                        }[];
                        lastChangeAt: Date;
                        project: {
                            id: string;
                            name: string;
                            slug: string;
                            displayName: string;
                        };
                        group: {
                            id: string;
                            name: string;
                            slug: string;
                            displayName: string;
                        };
                        isSuspend?: boolean | undefined;
                    } | {
                        id: string;
                        authorId: string;
                        createdAt: Date;
                        title: string;
                        key: string;
                        tags: {
                            id: string;
                            name: string;
                            description: string;
                            displayName: string;
                            color: string;
                        }[];
                        author: {
                            id: string;
                            username: string;
                            email: string;
                            roleDisplayName: string;
                            roleName: string;
                        };
                        visibility: string;
                        projectId: string;
                        schema: ({
                            options: {
                                min?: number | undefined;
                                max?: number | undefined;
                                noDecimal?: boolean | undefined;
                            };
                            type: "NUMBER";
                            name: string;
                            label: string;
                            visibility: string;
                            placeholder?: string | undefined;
                            helperText?: string | undefined;
                            required?: boolean | undefined;
                        } | {
                            options: {
                                minLength?: number | undefined;
                                maxLength?: number | undefined;
                                pattern?: string | undefined;
                            };
                            type: "TEXT";
                            name: string;
                            label: string;
                            visibility: string;
                            placeholder?: string | undefined;
                            helperText?: string | undefined;
                            required?: boolean | undefined;
                        } | {
                            options: {
                                isMulti: boolean;
                                optionList: string[];
                                maxSelect: number | null;
                                minSelect: number | null;
                            };
                            type: "SELECT";
                            name: string;
                            label: string;
                            visibility: string;
                            placeholder?: string | undefined;
                            helperText?: string | undefined;
                            required?: boolean | undefined;
                        } | {
                            options: {
                                min?: string | undefined;
                                max?: string | undefined;
                            };
                            type: "DATETIME";
                            name: string;
                            label: string;
                            visibility: string;
                            placeholder?: string | undefined;
                            helperText?: string | undefined;
                            required?: boolean | undefined;
                        } | {
                            options: {
                                minLength?: number | undefined;
                                maxLength?: number | undefined;
                                disableImages?: boolean | undefined;
                            };
                            type: "RICHTEXT";
                            name: string;
                            label: string;
                            visibility: string;
                            placeholder?: string | undefined;
                            helperText?: string | undefined;
                            required?: boolean | undefined;
                        } | {
                            type: "SEPARATOR";
                            name: string;
                        })[];
                        state: string;
                        points: number;
                        commentsCount: number;
                        fields: {
                            type: string;
                            name: string;
                            value?: any;
                        }[];
                        lastChangeAt: Date;
                        project: {
                            id: string;
                            name: string;
                            slug: string;
                            displayName: string;
                        };
                        group: {
                            id: string;
                            name: string;
                            slug: string;
                            displayName: string;
                        };
                        operations: {
                            canBlock: boolean;
                            canDelete: boolean;
                            canUpdateState: boolean;
                            canEditFields: boolean;
                            canEditInternalFields: boolean;
                            canEditHiddenFields: boolean;
                            canUpdateConfidents: boolean;
                            canBlockComments: boolean;
                            canDeleteComments: boolean;
                            canUpdateTags: boolean;
                            canUpdateVisibility: boolean;
                        };
                        isUpvotedByMe: boolean;
                        isDownvotedByMe: boolean;
                        isSuspend?: boolean | undefined;
                    } | {
                        id: string;
                        authorId: string;
                        createdAt: Date;
                        updatedAt: Date;
                        title: string;
                        key: string;
                        tags: {
                            id: string;
                            name: string;
                            description: string;
                            displayName: string;
                            color: string;
                        }[];
                        author: {
                            id: string;
                            username: string;
                            email: string;
                            roleDisplayName: string;
                            roleName: string;
                        };
                        visibility: string;
                        projectId: string;
                        schema: ({
                            options: {
                                min?: number | undefined;
                                max?: number | undefined;
                                noDecimal?: boolean | undefined;
                            };
                            type: "NUMBER";
                            name: string;
                            label: string;
                            visibility: string;
                            placeholder?: string | undefined;
                            helperText?: string | undefined;
                            required?: boolean | undefined;
                        } | {
                            options: {
                                minLength?: number | undefined;
                                maxLength?: number | undefined;
                                pattern?: string | undefined;
                            };
                            type: "TEXT";
                            name: string;
                            label: string;
                            visibility: string;
                            placeholder?: string | undefined;
                            helperText?: string | undefined;
                            required?: boolean | undefined;
                        } | {
                            options: {
                                isMulti: boolean;
                                optionList: string[];
                                maxSelect: number | null;
                                minSelect: number | null;
                            };
                            type: "SELECT";
                            name: string;
                            label: string;
                            visibility: string;
                            placeholder?: string | undefined;
                            helperText?: string | undefined;
                            required?: boolean | undefined;
                        } | {
                            options: {
                                min?: string | undefined;
                                max?: string | undefined;
                            };
                            type: "DATETIME";
                            name: string;
                            label: string;
                            visibility: string;
                            placeholder?: string | undefined;
                            helperText?: string | undefined;
                            required?: boolean | undefined;
                        } | {
                            options: {
                                minLength?: number | undefined;
                                maxLength?: number | undefined;
                                disableImages?: boolean | undefined;
                            };
                            type: "RICHTEXT";
                            name: string;
                            label: string;
                            visibility: string;
                            placeholder?: string | undefined;
                            helperText?: string | undefined;
                            required?: boolean | undefined;
                        } | {
                            type: "SEPARATOR";
                            name: string;
                        })[];
                        state: string;
                        points: number;
                        commentsCount: number;
                        fields: {
                            type: string;
                            name: string;
                            value?: any;
                        }[];
                        lastChangeAt: Date;
                        project: {
                            id: string;
                            name: string;
                            slug: string;
                            displayName: string;
                        };
                        group: {
                            id: string;
                            name: string;
                            slug: string;
                            displayName: string;
                        };
                        operations: {
                            canBlock: boolean;
                            canDelete: boolean;
                            canUpdateState: boolean;
                            canEditFields: boolean;
                            canEditInternalFields: boolean;
                            canEditHiddenFields: boolean;
                            canUpdateConfidents: boolean;
                            canBlockComments: boolean;
                            canDeleteComments: boolean;
                            canUpdateTags: boolean;
                            canUpdateVisibility: boolean;
                        };
                        isUpvotedByMe: boolean;
                        isDownvotedByMe: boolean;
                        isSuspend?: boolean | undefined;
                    }, zod.ZodTypeDef, {
                        id: string;
                        authorId: string;
                        createdAt: Date;
                        title: string;
                        key: string;
                        tags: {
                            id: string;
                            name: string;
                            description: string;
                            displayName: string;
                            color: string;
                        }[];
                        author: {
                            id: string;
                            username: string;
                            email: string;
                            roleDisplayName: string;
                            roleName: string;
                        };
                        visibility: string;
                        projectId: string;
                        schema: ({
                            options: {
                                min?: number | undefined;
                                max?: number | undefined;
                                noDecimal?: boolean | undefined;
                            };
                            type: "NUMBER";
                            name: string;
                            label: string;
                            visibility: string;
                            placeholder?: string | undefined;
                            helperText?: string | undefined;
                            required?: boolean | undefined;
                        } | {
                            options: {
                                minLength?: number | undefined;
                                maxLength?: number | undefined;
                                pattern?: string | undefined;
                            };
                            type: "TEXT";
                            name: string;
                            label: string;
                            visibility: string;
                            placeholder?: string | undefined;
                            helperText?: string | undefined;
                            required?: boolean | undefined;
                        } | {
                            options: {
                                isMulti: boolean;
                                optionList: string[];
                                maxSelect: number | null;
                                minSelect: number | null;
                            };
                            type: "SELECT";
                            name: string;
                            label: string;
                            visibility: string;
                            placeholder?: string | undefined;
                            helperText?: string | undefined;
                            required?: boolean | undefined;
                        } | {
                            options: {
                                min?: string | undefined;
                                max?: string | undefined;
                            };
                            type: "DATETIME";
                            name: string;
                            label: string;
                            visibility: string;
                            placeholder?: string | undefined;
                            helperText?: string | undefined;
                            required?: boolean | undefined;
                        } | {
                            options: {
                                minLength?: number | undefined;
                                maxLength?: number | undefined;
                                disableImages?: boolean | undefined;
                            };
                            type: "RICHTEXT";
                            name: string;
                            label: string;
                            visibility: string;
                            placeholder?: string | undefined;
                            helperText?: string | undefined;
                            required?: boolean | undefined;
                        } | {
                            type: "SEPARATOR";
                            name: string;
                        })[];
                        state: string;
                        points: number;
                        commentsCount: number;
                        fields: {
                            type: string;
                            name: string;
                            value?: any;
                        }[];
                        lastChangeAt: Date;
                        project: {
                            id: string;
                            name: string;
                            slug: string;
                            displayName: string;
                        };
                        group: {
                            id: string;
                            name: string;
                            slug: string;
                            displayName: string;
                        };
                        isSuspend?: boolean | undefined;
                    } | {
                        id: string;
                        authorId: string;
                        createdAt: Date;
                        title: string;
                        key: string;
                        tags: {
                            id: string;
                            name: string;
                            description: string;
                            displayName: string;
                            color: string;
                        }[];
                        author: {
                            id: string;
                            username: string;
                            email: string;
                            roleDisplayName: string;
                            roleName: string;
                        };
                        visibility: string;
                        projectId: string;
                        schema: ({
                            options: {
                                min?: number | undefined;
                                max?: number | undefined;
                                noDecimal?: boolean | undefined;
                            };
                            type: "NUMBER";
                            name: string;
                            label: string;
                            visibility: string;
                            placeholder?: string | undefined;
                            helperText?: string | undefined;
                            required?: boolean | undefined;
                        } | {
                            options: {
                                minLength?: number | undefined;
                                maxLength?: number | undefined;
                                pattern?: string | undefined;
                            };
                            type: "TEXT";
                            name: string;
                            label: string;
                            visibility: string;
                            placeholder?: string | undefined;
                            helperText?: string | undefined;
                            required?: boolean | undefined;
                        } | {
                            options: {
                                isMulti: boolean;
                                optionList: string[];
                                maxSelect: number | null;
                                minSelect: number | null;
                            };
                            type: "SELECT";
                            name: string;
                            label: string;
                            visibility: string;
                            placeholder?: string | undefined;
                            helperText?: string | undefined;
                            required?: boolean | undefined;
                        } | {
                            options: {
                                min?: string | undefined;
                                max?: string | undefined;
                            };
                            type: "DATETIME";
                            name: string;
                            label: string;
                            visibility: string;
                            placeholder?: string | undefined;
                            helperText?: string | undefined;
                            required?: boolean | undefined;
                        } | {
                            options: {
                                minLength?: number | undefined;
                                maxLength?: number | undefined;
                                disableImages?: boolean | undefined;
                            };
                            type: "RICHTEXT";
                            name: string;
                            label: string;
                            visibility: string;
                            placeholder?: string | undefined;
                            helperText?: string | undefined;
                            required?: boolean | undefined;
                        } | {
                            type: "SEPARATOR";
                            name: string;
                        })[];
                        state: string;
                        points: number;
                        commentsCount: number;
                        fields: {
                            type: string;
                            name: string;
                            value?: any;
                        }[];
                        lastChangeAt: Date;
                        project: {
                            id: string;
                            name: string;
                            slug: string;
                            displayName: string;
                        };
                        group: {
                            id: string;
                            name: string;
                            slug: string;
                            displayName: string;
                        };
                        operations: {
                            canBlock: boolean;
                            canDelete: boolean;
                            canUpdateState: boolean;
                            canEditFields: boolean;
                            canEditInternalFields: boolean;
                            canEditHiddenFields: boolean;
                            canUpdateConfidents: boolean;
                            canBlockComments: boolean;
                            canDeleteComments: boolean;
                            canUpdateTags: boolean;
                            canUpdateVisibility: boolean;
                        };
                        isUpvotedByMe: boolean;
                        isDownvotedByMe: boolean;
                        isSuspend?: boolean | undefined;
                    } | {
                        id: string;
                        authorId: string;
                        createdAt: Date;
                        updatedAt: Date;
                        title: string;
                        key: string;
                        tags: {
                            id: string;
                            name: string;
                            description: string;
                            displayName: string;
                            color: string;
                        }[];
                        author: {
                            id: string;
                            username: string;
                            email: string;
                            roleDisplayName: string;
                            roleName: string;
                        };
                        visibility: string;
                        projectId: string;
                        schema: ({
                            options: {
                                min?: number | undefined;
                                max?: number | undefined;
                                noDecimal?: boolean | undefined;
                            };
                            type: "NUMBER";
                            name: string;
                            label: string;
                            visibility: string;
                            placeholder?: string | undefined;
                            helperText?: string | undefined;
                            required?: boolean | undefined;
                        } | {
                            options: {
                                minLength?: number | undefined;
                                maxLength?: number | undefined;
                                pattern?: string | undefined;
                            };
                            type: "TEXT";
                            name: string;
                            label: string;
                            visibility: string;
                            placeholder?: string | undefined;
                            helperText?: string | undefined;
                            required?: boolean | undefined;
                        } | {
                            options: {
                                isMulti: boolean;
                                optionList: string[];
                                maxSelect: number | null;
                                minSelect: number | null;
                            };
                            type: "SELECT";
                            name: string;
                            label: string;
                            visibility: string;
                            placeholder?: string | undefined;
                            helperText?: string | undefined;
                            required?: boolean | undefined;
                        } | {
                            options: {
                                min?: string | undefined;
                                max?: string | undefined;
                            };
                            type: "DATETIME";
                            name: string;
                            label: string;
                            visibility: string;
                            placeholder?: string | undefined;
                            helperText?: string | undefined;
                            required?: boolean | undefined;
                        } | {
                            options: {
                                minLength?: number | undefined;
                                maxLength?: number | undefined;
                                disableImages?: boolean | undefined;
                            };
                            type: "RICHTEXT";
                            name: string;
                            label: string;
                            visibility: string;
                            placeholder?: string | undefined;
                            helperText?: string | undefined;
                            required?: boolean | undefined;
                        } | {
                            type: "SEPARATOR";
                            name: string;
                        })[];
                        state: string;
                        points: number;
                        commentsCount: number;
                        fields: {
                            type: string;
                            name: string;
                            value?: any;
                        }[];
                        lastChangeAt: Date;
                        project: {
                            id: string;
                            name: string;
                            slug: string;
                            displayName: string;
                        };
                        group: {
                            id: string;
                            name: string;
                            slug: string;
                            displayName: string;
                        };
                        operations: {
                            canBlock: boolean;
                            canDelete: boolean;
                            canUpdateState: boolean;
                            canEditFields: boolean;
                            canEditInternalFields: boolean;
                            canEditHiddenFields: boolean;
                            canUpdateConfidents: boolean;
                            canBlockComments: boolean;
                            canDeleteComments: boolean;
                            canUpdateTags: boolean;
                            canUpdateVisibility: boolean;
                        };
                        isUpvotedByMe: boolean;
                        isDownvotedByMe: boolean;
                        isSuspend?: boolean | undefined;
                    }> | zod.ZodObject<{}, "strip", zod.ZodTypeAny, {}, {}>;
                }, "strip", zod.ZodTypeAny, {
                    data: {
                        id: string;
                        authorId: string;
                        createdAt: Date;
                        title: string;
                        key: string;
                        tags: {
                            id: string;
                            name: string;
                            description: string;
                            displayName: string;
                            color: string;
                        }[];
                        author: {
                            id: string;
                            username: string;
                            email: string;
                            roleDisplayName: string;
                            roleName: string;
                        };
                        visibility: string;
                        projectId: string;
                        schema: ({
                            options: {
                                min?: number | undefined;
                                max?: number | undefined;
                                noDecimal?: boolean | undefined;
                            };
                            type: "NUMBER";
                            name: string;
                            label: string;
                            visibility: string;
                            placeholder?: string | undefined;
                            helperText?: string | undefined;
                            required?: boolean | undefined;
                        } | {
                            options: {
                                minLength?: number | undefined;
                                maxLength?: number | undefined;
                                pattern?: string | undefined;
                            };
                            type: "TEXT";
                            name: string;
                            label: string;
                            visibility: string;
                            placeholder?: string | undefined;
                            helperText?: string | undefined;
                            required?: boolean | undefined;
                        } | {
                            options: {
                                isMulti: boolean;
                                optionList: string[];
                                maxSelect: number | null;
                                minSelect: number | null;
                            };
                            type: "SELECT";
                            name: string;
                            label: string;
                            visibility: string;
                            placeholder?: string | undefined;
                            helperText?: string | undefined;
                            required?: boolean | undefined;
                        } | {
                            options: {
                                min?: string | undefined;
                                max?: string | undefined;
                            };
                            type: "DATETIME";
                            name: string;
                            label: string;
                            visibility: string;
                            placeholder?: string | undefined;
                            helperText?: string | undefined;
                            required?: boolean | undefined;
                        } | {
                            options: {
                                minLength?: number | undefined;
                                maxLength?: number | undefined;
                                disableImages?: boolean | undefined;
                            };
                            type: "RICHTEXT";
                            name: string;
                            label: string;
                            visibility: string;
                            placeholder?: string | undefined;
                            helperText?: string | undefined;
                            required?: boolean | undefined;
                        } | {
                            type: "SEPARATOR";
                            name: string;
                        })[];
                        state: string;
                        points: number;
                        commentsCount: number;
                        fields: {
                            type: string;
                            name: string;
                            value?: any;
                        }[];
                        lastChangeAt: Date;
                        project: {
                            id: string;
                            name: string;
                            slug: string;
                            displayName: string;
                        };
                        group: {
                            id: string;
                            name: string;
                            slug: string;
                            displayName: string;
                        };
                        isSuspend?: boolean | undefined;
                    } | {
                        id: string;
                        authorId: string;
                        createdAt: Date;
                        title: string;
                        key: string;
                        tags: {
                            id: string;
                            name: string;
                            description: string;
                            displayName: string;
                            color: string;
                        }[];
                        author: {
                            id: string;
                            username: string;
                            email: string;
                            roleDisplayName: string;
                            roleName: string;
                        };
                        visibility: string;
                        projectId: string;
                        schema: ({
                            options: {
                                min?: number | undefined;
                                max?: number | undefined;
                                noDecimal?: boolean | undefined;
                            };
                            type: "NUMBER";
                            name: string;
                            label: string;
                            visibility: string;
                            placeholder?: string | undefined;
                            helperText?: string | undefined;
                            required?: boolean | undefined;
                        } | {
                            options: {
                                minLength?: number | undefined;
                                maxLength?: number | undefined;
                                pattern?: string | undefined;
                            };
                            type: "TEXT";
                            name: string;
                            label: string;
                            visibility: string;
                            placeholder?: string | undefined;
                            helperText?: string | undefined;
                            required?: boolean | undefined;
                        } | {
                            options: {
                                isMulti: boolean;
                                optionList: string[];
                                maxSelect: number | null;
                                minSelect: number | null;
                            };
                            type: "SELECT";
                            name: string;
                            label: string;
                            visibility: string;
                            placeholder?: string | undefined;
                            helperText?: string | undefined;
                            required?: boolean | undefined;
                        } | {
                            options: {
                                min?: string | undefined;
                                max?: string | undefined;
                            };
                            type: "DATETIME";
                            name: string;
                            label: string;
                            visibility: string;
                            placeholder?: string | undefined;
                            helperText?: string | undefined;
                            required?: boolean | undefined;
                        } | {
                            options: {
                                minLength?: number | undefined;
                                maxLength?: number | undefined;
                                disableImages?: boolean | undefined;
                            };
                            type: "RICHTEXT";
                            name: string;
                            label: string;
                            visibility: string;
                            placeholder?: string | undefined;
                            helperText?: string | undefined;
                            required?: boolean | undefined;
                        } | {
                            type: "SEPARATOR";
                            name: string;
                        })[];
                        state: string;
                        points: number;
                        commentsCount: number;
                        fields: {
                            type: string;
                            name: string;
                            value?: any;
                        }[];
                        lastChangeAt: Date;
                        project: {
                            id: string;
                            name: string;
                            slug: string;
                            displayName: string;
                        };
                        group: {
                            id: string;
                            name: string;
                            slug: string;
                            displayName: string;
                        };
                        operations: {
                            canBlock: boolean;
                            canDelete: boolean;
                            canUpdateState: boolean;
                            canEditFields: boolean;
                            canEditInternalFields: boolean;
                            canEditHiddenFields: boolean;
                            canUpdateConfidents: boolean;
                            canBlockComments: boolean;
                            canDeleteComments: boolean;
                            canUpdateTags: boolean;
                            canUpdateVisibility: boolean;
                        };
                        isUpvotedByMe: boolean;
                        isDownvotedByMe: boolean;
                        isSuspend?: boolean | undefined;
                    } | {
                        id: string;
                        authorId: string;
                        createdAt: Date;
                        updatedAt: Date;
                        title: string;
                        key: string;
                        tags: {
                            id: string;
                            name: string;
                            description: string;
                            displayName: string;
                            color: string;
                        }[];
                        author: {
                            id: string;
                            username: string;
                            email: string;
                            roleDisplayName: string;
                            roleName: string;
                        };
                        visibility: string;
                        projectId: string;
                        schema: ({
                            options: {
                                min?: number | undefined;
                                max?: number | undefined;
                                noDecimal?: boolean | undefined;
                            };
                            type: "NUMBER";
                            name: string;
                            label: string;
                            visibility: string;
                            placeholder?: string | undefined;
                            helperText?: string | undefined;
                            required?: boolean | undefined;
                        } | {
                            options: {
                                minLength?: number | undefined;
                                maxLength?: number | undefined;
                                pattern?: string | undefined;
                            };
                            type: "TEXT";
                            name: string;
                            label: string;
                            visibility: string;
                            placeholder?: string | undefined;
                            helperText?: string | undefined;
                            required?: boolean | undefined;
                        } | {
                            options: {
                                isMulti: boolean;
                                optionList: string[];
                                maxSelect: number | null;
                                minSelect: number | null;
                            };
                            type: "SELECT";
                            name: string;
                            label: string;
                            visibility: string;
                            placeholder?: string | undefined;
                            helperText?: string | undefined;
                            required?: boolean | undefined;
                        } | {
                            options: {
                                min?: string | undefined;
                                max?: string | undefined;
                            };
                            type: "DATETIME";
                            name: string;
                            label: string;
                            visibility: string;
                            placeholder?: string | undefined;
                            helperText?: string | undefined;
                            required?: boolean | undefined;
                        } | {
                            options: {
                                minLength?: number | undefined;
                                maxLength?: number | undefined;
                                disableImages?: boolean | undefined;
                            };
                            type: "RICHTEXT";
                            name: string;
                            label: string;
                            visibility: string;
                            placeholder?: string | undefined;
                            helperText?: string | undefined;
                            required?: boolean | undefined;
                        } | {
                            type: "SEPARATOR";
                            name: string;
                        })[];
                        state: string;
                        points: number;
                        commentsCount: number;
                        fields: {
                            type: string;
                            name: string;
                            value?: any;
                        }[];
                        lastChangeAt: Date;
                        project: {
                            id: string;
                            name: string;
                            slug: string;
                            displayName: string;
                        };
                        group: {
                            id: string;
                            name: string;
                            slug: string;
                            displayName: string;
                        };
                        operations: {
                            canBlock: boolean;
                            canDelete: boolean;
                            canUpdateState: boolean;
                            canEditFields: boolean;
                            canEditInternalFields: boolean;
                            canEditHiddenFields: boolean;
                            canUpdateConfidents: boolean;
                            canBlockComments: boolean;
                            canDeleteComments: boolean;
                            canUpdateTags: boolean;
                            canUpdateVisibility: boolean;
                        };
                        isUpvotedByMe: boolean;
                        isDownvotedByMe: boolean;
                        isSuspend?: boolean | undefined;
                    } | {};
                }, {
                    data: {
                        id: string;
                        authorId: string;
                        createdAt: Date;
                        title: string;
                        key: string;
                        tags: {
                            id: string;
                            name: string;
                            description: string;
                            displayName: string;
                            color: string;
                        }[];
                        author: {
                            id: string;
                            username: string;
                            email: string;
                            roleDisplayName: string;
                            roleName: string;
                        };
                        visibility: string;
                        projectId: string;
                        schema: ({
                            options: {
                                min?: number | undefined;
                                max?: number | undefined;
                                noDecimal?: boolean | undefined;
                            };
                            type: "NUMBER";
                            name: string;
                            label: string;
                            visibility: string;
                            placeholder?: string | undefined;
                            helperText?: string | undefined;
                            required?: boolean | undefined;
                        } | {
                            options: {
                                minLength?: number | undefined;
                                maxLength?: number | undefined;
                                pattern?: string | undefined;
                            };
                            type: "TEXT";
                            name: string;
                            label: string;
                            visibility: string;
                            placeholder?: string | undefined;
                            helperText?: string | undefined;
                            required?: boolean | undefined;
                        } | {
                            options: {
                                isMulti: boolean;
                                optionList: string[];
                                maxSelect: number | null;
                                minSelect: number | null;
                            };
                            type: "SELECT";
                            name: string;
                            label: string;
                            visibility: string;
                            placeholder?: string | undefined;
                            helperText?: string | undefined;
                            required?: boolean | undefined;
                        } | {
                            options: {
                                min?: string | undefined;
                                max?: string | undefined;
                            };
                            type: "DATETIME";
                            name: string;
                            label: string;
                            visibility: string;
                            placeholder?: string | undefined;
                            helperText?: string | undefined;
                            required?: boolean | undefined;
                        } | {
                            options: {
                                minLength?: number | undefined;
                                maxLength?: number | undefined;
                                disableImages?: boolean | undefined;
                            };
                            type: "RICHTEXT";
                            name: string;
                            label: string;
                            visibility: string;
                            placeholder?: string | undefined;
                            helperText?: string | undefined;
                            required?: boolean | undefined;
                        } | {
                            type: "SEPARATOR";
                            name: string;
                        })[];
                        state: string;
                        points: number;
                        commentsCount: number;
                        fields: {
                            type: string;
                            name: string;
                            value?: any;
                        }[];
                        lastChangeAt: Date;
                        project: {
                            id: string;
                            name: string;
                            slug: string;
                            displayName: string;
                        };
                        group: {
                            id: string;
                            name: string;
                            slug: string;
                            displayName: string;
                        };
                        isSuspend?: boolean | undefined;
                    } | {
                        id: string;
                        authorId: string;
                        createdAt: Date;
                        title: string;
                        key: string;
                        tags: {
                            id: string;
                            name: string;
                            description: string;
                            displayName: string;
                            color: string;
                        }[];
                        author: {
                            id: string;
                            username: string;
                            email: string;
                            roleDisplayName: string;
                            roleName: string;
                        };
                        visibility: string;
                        projectId: string;
                        schema: ({
                            options: {
                                min?: number | undefined;
                                max?: number | undefined;
                                noDecimal?: boolean | undefined;
                            };
                            type: "NUMBER";
                            name: string;
                            label: string;
                            visibility: string;
                            placeholder?: string | undefined;
                            helperText?: string | undefined;
                            required?: boolean | undefined;
                        } | {
                            options: {
                                minLength?: number | undefined;
                                maxLength?: number | undefined;
                                pattern?: string | undefined;
                            };
                            type: "TEXT";
                            name: string;
                            label: string;
                            visibility: string;
                            placeholder?: string | undefined;
                            helperText?: string | undefined;
                            required?: boolean | undefined;
                        } | {
                            options: {
                                isMulti: boolean;
                                optionList: string[];
                                maxSelect: number | null;
                                minSelect: number | null;
                            };
                            type: "SELECT";
                            name: string;
                            label: string;
                            visibility: string;
                            placeholder?: string | undefined;
                            helperText?: string | undefined;
                            required?: boolean | undefined;
                        } | {
                            options: {
                                min?: string | undefined;
                                max?: string | undefined;
                            };
                            type: "DATETIME";
                            name: string;
                            label: string;
                            visibility: string;
                            placeholder?: string | undefined;
                            helperText?: string | undefined;
                            required?: boolean | undefined;
                        } | {
                            options: {
                                minLength?: number | undefined;
                                maxLength?: number | undefined;
                                disableImages?: boolean | undefined;
                            };
                            type: "RICHTEXT";
                            name: string;
                            label: string;
                            visibility: string;
                            placeholder?: string | undefined;
                            helperText?: string | undefined;
                            required?: boolean | undefined;
                        } | {
                            type: "SEPARATOR";
                            name: string;
                        })[];
                        state: string;
                        points: number;
                        commentsCount: number;
                        fields: {
                            type: string;
                            name: string;
                            value?: any;
                        }[];
                        lastChangeAt: Date;
                        project: {
                            id: string;
                            name: string;
                            slug: string;
                            displayName: string;
                        };
                        group: {
                            id: string;
                            name: string;
                            slug: string;
                            displayName: string;
                        };
                        operations: {
                            canBlock: boolean;
                            canDelete: boolean;
                            canUpdateState: boolean;
                            canEditFields: boolean;
                            canEditInternalFields: boolean;
                            canEditHiddenFields: boolean;
                            canUpdateConfidents: boolean;
                            canBlockComments: boolean;
                            canDeleteComments: boolean;
                            canUpdateTags: boolean;
                            canUpdateVisibility: boolean;
                        };
                        isUpvotedByMe: boolean;
                        isDownvotedByMe: boolean;
                        isSuspend?: boolean | undefined;
                    } | {
                        id: string;
                        authorId: string;
                        createdAt: Date;
                        updatedAt: Date;
                        title: string;
                        key: string;
                        tags: {
                            id: string;
                            name: string;
                            description: string;
                            displayName: string;
                            color: string;
                        }[];
                        author: {
                            id: string;
                            username: string;
                            email: string;
                            roleDisplayName: string;
                            roleName: string;
                        };
                        visibility: string;
                        projectId: string;
                        schema: ({
                            options: {
                                min?: number | undefined;
                                max?: number | undefined;
                                noDecimal?: boolean | undefined;
                            };
                            type: "NUMBER";
                            name: string;
                            label: string;
                            visibility: string;
                            placeholder?: string | undefined;
                            helperText?: string | undefined;
                            required?: boolean | undefined;
                        } | {
                            options: {
                                minLength?: number | undefined;
                                maxLength?: number | undefined;
                                pattern?: string | undefined;
                            };
                            type: "TEXT";
                            name: string;
                            label: string;
                            visibility: string;
                            placeholder?: string | undefined;
                            helperText?: string | undefined;
                            required?: boolean | undefined;
                        } | {
                            options: {
                                isMulti: boolean;
                                optionList: string[];
                                maxSelect: number | null;
                                minSelect: number | null;
                            };
                            type: "SELECT";
                            name: string;
                            label: string;
                            visibility: string;
                            placeholder?: string | undefined;
                            helperText?: string | undefined;
                            required?: boolean | undefined;
                        } | {
                            options: {
                                min?: string | undefined;
                                max?: string | undefined;
                            };
                            type: "DATETIME";
                            name: string;
                            label: string;
                            visibility: string;
                            placeholder?: string | undefined;
                            helperText?: string | undefined;
                            required?: boolean | undefined;
                        } | {
                            options: {
                                minLength?: number | undefined;
                                maxLength?: number | undefined;
                                disableImages?: boolean | undefined;
                            };
                            type: "RICHTEXT";
                            name: string;
                            label: string;
                            visibility: string;
                            placeholder?: string | undefined;
                            helperText?: string | undefined;
                            required?: boolean | undefined;
                        } | {
                            type: "SEPARATOR";
                            name: string;
                        })[];
                        state: string;
                        points: number;
                        commentsCount: number;
                        fields: {
                            type: string;
                            name: string;
                            value?: any;
                        }[];
                        lastChangeAt: Date;
                        project: {
                            id: string;
                            name: string;
                            slug: string;
                            displayName: string;
                        };
                        group: {
                            id: string;
                            name: string;
                            slug: string;
                            displayName: string;
                        };
                        operations: {
                            canBlock: boolean;
                            canDelete: boolean;
                            canUpdateState: boolean;
                            canEditFields: boolean;
                            canEditInternalFields: boolean;
                            canEditHiddenFields: boolean;
                            canUpdateConfidents: boolean;
                            canBlockComments: boolean;
                            canDeleteComments: boolean;
                            canUpdateTags: boolean;
                            canUpdateVisibility: boolean;
                        };
                        isUpvotedByMe: boolean;
                        isDownvotedByMe: boolean;
                        isSuspend?: boolean | undefined;
                    } | {};
                }>;
                404: zod.ZodObject<{
                    title: zod.ZodString;
                    status: zod.ZodNumber;
                    detail: zod.ZodOptional<zod.ZodString>;
                }, "strip", zod.ZodTypeAny, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }>;
                409: zod.ZodObject<{
                    title: zod.ZodString;
                    status: zod.ZodNumber;
                    detail: zod.ZodOptional<zod.ZodString>;
                }, "strip", zod.ZodTypeAny, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }>;
                500: zod.ZodObject<{
                    title: zod.ZodString;
                    status: zod.ZodNumber;
                    detail: zod.ZodOptional<zod.ZodString>;
                }, "strip", zod.ZodTypeAny, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }>;
            };
        };
        getIssues: {
            metadata: {
                readonly isPublic: true;
                readonly permissions: {};
            };
            query: zod.ZodObject<{
                page: zod.ZodOptional<zod.ZodString>;
                limit: zod.ZodOptional<zod.ZodString>;
                search: zod.ZodOptional<zod.ZodString>;
                projects: zod.ZodOptional<zod.ZodString>;
                states: zod.ZodOptional<zod.ZodString>;
                authors: zod.ZodOptional<zod.ZodString>;
                sort: zod.ZodOptional<zod.ZodEnum<["recent", "newest", "votes"]>>;
            }, "strip", zod.ZodTypeAny, {
                sort?: "recent" | "newest" | "votes" | undefined;
                search?: string | undefined;
                limit?: string | undefined;
                page?: string | undefined;
                projects?: string | undefined;
                states?: string | undefined;
                authors?: string | undefined;
            }, {
                sort?: "recent" | "newest" | "votes" | undefined;
                search?: string | undefined;
                limit?: string | undefined;
                page?: string | undefined;
                projects?: string | undefined;
                states?: string | undefined;
                authors?: string | undefined;
            }>;
            summary: "Get issues";
            method: "GET";
            path: "/api/issues";
            headers: zod.ZodOptional<zod.ZodObject<{
                authorization: zod.ZodString;
            }, "strip", zod.ZodTypeAny, {
                authorization: string;
            }, {
                authorization: string;
            }>>;
            responses: {
                200: zod.ZodObject<{
                    data: zod.ZodType<{
                        data: ({
                            id: string;
                            authorId: string;
                            createdAt: Date;
                            title: string;
                            key: string;
                            tags: {
                                id: string;
                                name: string;
                                description: string;
                                displayName: string;
                                color: string;
                            }[];
                            author: {
                                id: string;
                                username: string;
                                email: string;
                                roleDisplayName: string;
                                roleName: string;
                            };
                            visibility: string;
                            projectId: string;
                            schema: ({
                                options: {
                                    min?: number | undefined;
                                    max?: number | undefined;
                                    noDecimal?: boolean | undefined;
                                };
                                type: "NUMBER";
                                name: string;
                                label: string;
                                visibility: string;
                                placeholder?: string | undefined;
                                helperText?: string | undefined;
                                required?: boolean | undefined;
                            } | {
                                options: {
                                    minLength?: number | undefined;
                                    maxLength?: number | undefined;
                                    pattern?: string | undefined;
                                };
                                type: "TEXT";
                                name: string;
                                label: string;
                                visibility: string;
                                placeholder?: string | undefined;
                                helperText?: string | undefined;
                                required?: boolean | undefined;
                            } | {
                                options: {
                                    isMulti: boolean;
                                    optionList: string[];
                                    maxSelect: number | null;
                                    minSelect: number | null;
                                };
                                type: "SELECT";
                                name: string;
                                label: string;
                                visibility: string;
                                placeholder?: string | undefined;
                                helperText?: string | undefined;
                                required?: boolean | undefined;
                            } | {
                                options: {
                                    min?: string | undefined;
                                    max?: string | undefined;
                                };
                                type: "DATETIME";
                                name: string;
                                label: string;
                                visibility: string;
                                placeholder?: string | undefined;
                                helperText?: string | undefined;
                                required?: boolean | undefined;
                            } | {
                                options: {
                                    minLength?: number | undefined;
                                    maxLength?: number | undefined;
                                    disableImages?: boolean | undefined;
                                };
                                type: "RICHTEXT";
                                name: string;
                                label: string;
                                visibility: string;
                                placeholder?: string | undefined;
                                helperText?: string | undefined;
                                required?: boolean | undefined;
                            } | {
                                type: "SEPARATOR";
                                name: string;
                            })[];
                            state: string;
                            points: number;
                            commentsCount: number;
                            lastChangeAt: Date;
                            project: {
                                id: string;
                                name: string;
                                slug: string;
                                displayName: string;
                            };
                            group: {
                                id: string;
                                name: string;
                                slug: string;
                                displayName: string;
                            };
                            isSuspend?: boolean | undefined;
                        } | {
                            id: string;
                            authorId: string;
                            createdAt: Date;
                            updatedAt: Date;
                            title: string;
                            key: string;
                            tags: {
                                id: string;
                                name: string;
                                description: string;
                                displayName: string;
                                color: string;
                            }[];
                            author: {
                                id: string;
                                username: string;
                                email: string;
                                roleDisplayName: string;
                                roleName: string;
                            };
                            visibility: string;
                            projectId: string;
                            schema: ({
                                options: {
                                    min?: number | undefined;
                                    max?: number | undefined;
                                    noDecimal?: boolean | undefined;
                                };
                                type: "NUMBER";
                                name: string;
                                label: string;
                                visibility: string;
                                placeholder?: string | undefined;
                                helperText?: string | undefined;
                                required?: boolean | undefined;
                            } | {
                                options: {
                                    minLength?: number | undefined;
                                    maxLength?: number | undefined;
                                    pattern?: string | undefined;
                                };
                                type: "TEXT";
                                name: string;
                                label: string;
                                visibility: string;
                                placeholder?: string | undefined;
                                helperText?: string | undefined;
                                required?: boolean | undefined;
                            } | {
                                options: {
                                    isMulti: boolean;
                                    optionList: string[];
                                    maxSelect: number | null;
                                    minSelect: number | null;
                                };
                                type: "SELECT";
                                name: string;
                                label: string;
                                visibility: string;
                                placeholder?: string | undefined;
                                helperText?: string | undefined;
                                required?: boolean | undefined;
                            } | {
                                options: {
                                    min?: string | undefined;
                                    max?: string | undefined;
                                };
                                type: "DATETIME";
                                name: string;
                                label: string;
                                visibility: string;
                                placeholder?: string | undefined;
                                helperText?: string | undefined;
                                required?: boolean | undefined;
                            } | {
                                options: {
                                    minLength?: number | undefined;
                                    maxLength?: number | undefined;
                                    disableImages?: boolean | undefined;
                                };
                                type: "RICHTEXT";
                                name: string;
                                label: string;
                                visibility: string;
                                placeholder?: string | undefined;
                                helperText?: string | undefined;
                                required?: boolean | undefined;
                            } | {
                                type: "SEPARATOR";
                                name: string;
                            })[];
                            state: string;
                            points: number;
                            commentsCount: number;
                            lastChangeAt: Date;
                            project: {
                                id: string;
                                name: string;
                                slug: string;
                                displayName: string;
                            };
                            group: {
                                id: string;
                                name: string;
                                slug: string;
                                displayName: string;
                            };
                            isSuspend?: boolean | undefined;
                        })[];
                        count: number;
                    }, zod.ZodTypeDef, {
                        data: ({
                            id: string;
                            authorId: string;
                            createdAt: Date;
                            title: string;
                            key: string;
                            tags: {
                                id: string;
                                name: string;
                                description: string;
                                displayName: string;
                                color: string;
                            }[];
                            author: {
                                id: string;
                                username: string;
                                email: string;
                                roleDisplayName: string;
                                roleName: string;
                            };
                            visibility: string;
                            projectId: string;
                            schema: ({
                                options: {
                                    min?: number | undefined;
                                    max?: number | undefined;
                                    noDecimal?: boolean | undefined;
                                };
                                type: "NUMBER";
                                name: string;
                                label: string;
                                visibility: string;
                                placeholder?: string | undefined;
                                helperText?: string | undefined;
                                required?: boolean | undefined;
                            } | {
                                options: {
                                    minLength?: number | undefined;
                                    maxLength?: number | undefined;
                                    pattern?: string | undefined;
                                };
                                type: "TEXT";
                                name: string;
                                label: string;
                                visibility: string;
                                placeholder?: string | undefined;
                                helperText?: string | undefined;
                                required?: boolean | undefined;
                            } | {
                                options: {
                                    isMulti: boolean;
                                    optionList: string[];
                                    maxSelect: number | null;
                                    minSelect: number | null;
                                };
                                type: "SELECT";
                                name: string;
                                label: string;
                                visibility: string;
                                placeholder?: string | undefined;
                                helperText?: string | undefined;
                                required?: boolean | undefined;
                            } | {
                                options: {
                                    min?: string | undefined;
                                    max?: string | undefined;
                                };
                                type: "DATETIME";
                                name: string;
                                label: string;
                                visibility: string;
                                placeholder?: string | undefined;
                                helperText?: string | undefined;
                                required?: boolean | undefined;
                            } | {
                                options: {
                                    minLength?: number | undefined;
                                    maxLength?: number | undefined;
                                    disableImages?: boolean | undefined;
                                };
                                type: "RICHTEXT";
                                name: string;
                                label: string;
                                visibility: string;
                                placeholder?: string | undefined;
                                helperText?: string | undefined;
                                required?: boolean | undefined;
                            } | {
                                type: "SEPARATOR";
                                name: string;
                            })[];
                            state: string;
                            points: number;
                            commentsCount: number;
                            lastChangeAt: Date;
                            project: {
                                id: string;
                                name: string;
                                slug: string;
                                displayName: string;
                            };
                            group: {
                                id: string;
                                name: string;
                                slug: string;
                                displayName: string;
                            };
                            isSuspend?: boolean | undefined;
                        } | {
                            id: string;
                            authorId: string;
                            createdAt: Date;
                            updatedAt: Date;
                            title: string;
                            key: string;
                            tags: {
                                id: string;
                                name: string;
                                description: string;
                                displayName: string;
                                color: string;
                            }[];
                            author: {
                                id: string;
                                username: string;
                                email: string;
                                roleDisplayName: string;
                                roleName: string;
                            };
                            visibility: string;
                            projectId: string;
                            schema: ({
                                options: {
                                    min?: number | undefined;
                                    max?: number | undefined;
                                    noDecimal?: boolean | undefined;
                                };
                                type: "NUMBER";
                                name: string;
                                label: string;
                                visibility: string;
                                placeholder?: string | undefined;
                                helperText?: string | undefined;
                                required?: boolean | undefined;
                            } | {
                                options: {
                                    minLength?: number | undefined;
                                    maxLength?: number | undefined;
                                    pattern?: string | undefined;
                                };
                                type: "TEXT";
                                name: string;
                                label: string;
                                visibility: string;
                                placeholder?: string | undefined;
                                helperText?: string | undefined;
                                required?: boolean | undefined;
                            } | {
                                options: {
                                    isMulti: boolean;
                                    optionList: string[];
                                    maxSelect: number | null;
                                    minSelect: number | null;
                                };
                                type: "SELECT";
                                name: string;
                                label: string;
                                visibility: string;
                                placeholder?: string | undefined;
                                helperText?: string | undefined;
                                required?: boolean | undefined;
                            } | {
                                options: {
                                    min?: string | undefined;
                                    max?: string | undefined;
                                };
                                type: "DATETIME";
                                name: string;
                                label: string;
                                visibility: string;
                                placeholder?: string | undefined;
                                helperText?: string | undefined;
                                required?: boolean | undefined;
                            } | {
                                options: {
                                    minLength?: number | undefined;
                                    maxLength?: number | undefined;
                                    disableImages?: boolean | undefined;
                                };
                                type: "RICHTEXT";
                                name: string;
                                label: string;
                                visibility: string;
                                placeholder?: string | undefined;
                                helperText?: string | undefined;
                                required?: boolean | undefined;
                            } | {
                                type: "SEPARATOR";
                                name: string;
                            })[];
                            state: string;
                            points: number;
                            commentsCount: number;
                            lastChangeAt: Date;
                            project: {
                                id: string;
                                name: string;
                                slug: string;
                                displayName: string;
                            };
                            group: {
                                id: string;
                                name: string;
                                slug: string;
                                displayName: string;
                            };
                            isSuspend?: boolean | undefined;
                        })[];
                        count: number;
                    }> | zod.ZodObject<{}, "strip", zod.ZodTypeAny, {}, {}>;
                }, "strip", zod.ZodTypeAny, {
                    data: {
                        data: ({
                            id: string;
                            authorId: string;
                            createdAt: Date;
                            title: string;
                            key: string;
                            tags: {
                                id: string;
                                name: string;
                                description: string;
                                displayName: string;
                                color: string;
                            }[];
                            author: {
                                id: string;
                                username: string;
                                email: string;
                                roleDisplayName: string;
                                roleName: string;
                            };
                            visibility: string;
                            projectId: string;
                            schema: ({
                                options: {
                                    min?: number | undefined;
                                    max?: number | undefined;
                                    noDecimal?: boolean | undefined;
                                };
                                type: "NUMBER";
                                name: string;
                                label: string;
                                visibility: string;
                                placeholder?: string | undefined;
                                helperText?: string | undefined;
                                required?: boolean | undefined;
                            } | {
                                options: {
                                    minLength?: number | undefined;
                                    maxLength?: number | undefined;
                                    pattern?: string | undefined;
                                };
                                type: "TEXT";
                                name: string;
                                label: string;
                                visibility: string;
                                placeholder?: string | undefined;
                                helperText?: string | undefined;
                                required?: boolean | undefined;
                            } | {
                                options: {
                                    isMulti: boolean;
                                    optionList: string[];
                                    maxSelect: number | null;
                                    minSelect: number | null;
                                };
                                type: "SELECT";
                                name: string;
                                label: string;
                                visibility: string;
                                placeholder?: string | undefined;
                                helperText?: string | undefined;
                                required?: boolean | undefined;
                            } | {
                                options: {
                                    min?: string | undefined;
                                    max?: string | undefined;
                                };
                                type: "DATETIME";
                                name: string;
                                label: string;
                                visibility: string;
                                placeholder?: string | undefined;
                                helperText?: string | undefined;
                                required?: boolean | undefined;
                            } | {
                                options: {
                                    minLength?: number | undefined;
                                    maxLength?: number | undefined;
                                    disableImages?: boolean | undefined;
                                };
                                type: "RICHTEXT";
                                name: string;
                                label: string;
                                visibility: string;
                                placeholder?: string | undefined;
                                helperText?: string | undefined;
                                required?: boolean | undefined;
                            } | {
                                type: "SEPARATOR";
                                name: string;
                            })[];
                            state: string;
                            points: number;
                            commentsCount: number;
                            lastChangeAt: Date;
                            project: {
                                id: string;
                                name: string;
                                slug: string;
                                displayName: string;
                            };
                            group: {
                                id: string;
                                name: string;
                                slug: string;
                                displayName: string;
                            };
                            isSuspend?: boolean | undefined;
                        } | {
                            id: string;
                            authorId: string;
                            createdAt: Date;
                            updatedAt: Date;
                            title: string;
                            key: string;
                            tags: {
                                id: string;
                                name: string;
                                description: string;
                                displayName: string;
                                color: string;
                            }[];
                            author: {
                                id: string;
                                username: string;
                                email: string;
                                roleDisplayName: string;
                                roleName: string;
                            };
                            visibility: string;
                            projectId: string;
                            schema: ({
                                options: {
                                    min?: number | undefined;
                                    max?: number | undefined;
                                    noDecimal?: boolean | undefined;
                                };
                                type: "NUMBER";
                                name: string;
                                label: string;
                                visibility: string;
                                placeholder?: string | undefined;
                                helperText?: string | undefined;
                                required?: boolean | undefined;
                            } | {
                                options: {
                                    minLength?: number | undefined;
                                    maxLength?: number | undefined;
                                    pattern?: string | undefined;
                                };
                                type: "TEXT";
                                name: string;
                                label: string;
                                visibility: string;
                                placeholder?: string | undefined;
                                helperText?: string | undefined;
                                required?: boolean | undefined;
                            } | {
                                options: {
                                    isMulti: boolean;
                                    optionList: string[];
                                    maxSelect: number | null;
                                    minSelect: number | null;
                                };
                                type: "SELECT";
                                name: string;
                                label: string;
                                visibility: string;
                                placeholder?: string | undefined;
                                helperText?: string | undefined;
                                required?: boolean | undefined;
                            } | {
                                options: {
                                    min?: string | undefined;
                                    max?: string | undefined;
                                };
                                type: "DATETIME";
                                name: string;
                                label: string;
                                visibility: string;
                                placeholder?: string | undefined;
                                helperText?: string | undefined;
                                required?: boolean | undefined;
                            } | {
                                options: {
                                    minLength?: number | undefined;
                                    maxLength?: number | undefined;
                                    disableImages?: boolean | undefined;
                                };
                                type: "RICHTEXT";
                                name: string;
                                label: string;
                                visibility: string;
                                placeholder?: string | undefined;
                                helperText?: string | undefined;
                                required?: boolean | undefined;
                            } | {
                                type: "SEPARATOR";
                                name: string;
                            })[];
                            state: string;
                            points: number;
                            commentsCount: number;
                            lastChangeAt: Date;
                            project: {
                                id: string;
                                name: string;
                                slug: string;
                                displayName: string;
                            };
                            group: {
                                id: string;
                                name: string;
                                slug: string;
                                displayName: string;
                            };
                            isSuspend?: boolean | undefined;
                        })[];
                        count: number;
                    } | {};
                }, {
                    data: {
                        data: ({
                            id: string;
                            authorId: string;
                            createdAt: Date;
                            title: string;
                            key: string;
                            tags: {
                                id: string;
                                name: string;
                                description: string;
                                displayName: string;
                                color: string;
                            }[];
                            author: {
                                id: string;
                                username: string;
                                email: string;
                                roleDisplayName: string;
                                roleName: string;
                            };
                            visibility: string;
                            projectId: string;
                            schema: ({
                                options: {
                                    min?: number | undefined;
                                    max?: number | undefined;
                                    noDecimal?: boolean | undefined;
                                };
                                type: "NUMBER";
                                name: string;
                                label: string;
                                visibility: string;
                                placeholder?: string | undefined;
                                helperText?: string | undefined;
                                required?: boolean | undefined;
                            } | {
                                options: {
                                    minLength?: number | undefined;
                                    maxLength?: number | undefined;
                                    pattern?: string | undefined;
                                };
                                type: "TEXT";
                                name: string;
                                label: string;
                                visibility: string;
                                placeholder?: string | undefined;
                                helperText?: string | undefined;
                                required?: boolean | undefined;
                            } | {
                                options: {
                                    isMulti: boolean;
                                    optionList: string[];
                                    maxSelect: number | null;
                                    minSelect: number | null;
                                };
                                type: "SELECT";
                                name: string;
                                label: string;
                                visibility: string;
                                placeholder?: string | undefined;
                                helperText?: string | undefined;
                                required?: boolean | undefined;
                            } | {
                                options: {
                                    min?: string | undefined;
                                    max?: string | undefined;
                                };
                                type: "DATETIME";
                                name: string;
                                label: string;
                                visibility: string;
                                placeholder?: string | undefined;
                                helperText?: string | undefined;
                                required?: boolean | undefined;
                            } | {
                                options: {
                                    minLength?: number | undefined;
                                    maxLength?: number | undefined;
                                    disableImages?: boolean | undefined;
                                };
                                type: "RICHTEXT";
                                name: string;
                                label: string;
                                visibility: string;
                                placeholder?: string | undefined;
                                helperText?: string | undefined;
                                required?: boolean | undefined;
                            } | {
                                type: "SEPARATOR";
                                name: string;
                            })[];
                            state: string;
                            points: number;
                            commentsCount: number;
                            lastChangeAt: Date;
                            project: {
                                id: string;
                                name: string;
                                slug: string;
                                displayName: string;
                            };
                            group: {
                                id: string;
                                name: string;
                                slug: string;
                                displayName: string;
                            };
                            isSuspend?: boolean | undefined;
                        } | {
                            id: string;
                            authorId: string;
                            createdAt: Date;
                            updatedAt: Date;
                            title: string;
                            key: string;
                            tags: {
                                id: string;
                                name: string;
                                description: string;
                                displayName: string;
                                color: string;
                            }[];
                            author: {
                                id: string;
                                username: string;
                                email: string;
                                roleDisplayName: string;
                                roleName: string;
                            };
                            visibility: string;
                            projectId: string;
                            schema: ({
                                options: {
                                    min?: number | undefined;
                                    max?: number | undefined;
                                    noDecimal?: boolean | undefined;
                                };
                                type: "NUMBER";
                                name: string;
                                label: string;
                                visibility: string;
                                placeholder?: string | undefined;
                                helperText?: string | undefined;
                                required?: boolean | undefined;
                            } | {
                                options: {
                                    minLength?: number | undefined;
                                    maxLength?: number | undefined;
                                    pattern?: string | undefined;
                                };
                                type: "TEXT";
                                name: string;
                                label: string;
                                visibility: string;
                                placeholder?: string | undefined;
                                helperText?: string | undefined;
                                required?: boolean | undefined;
                            } | {
                                options: {
                                    isMulti: boolean;
                                    optionList: string[];
                                    maxSelect: number | null;
                                    minSelect: number | null;
                                };
                                type: "SELECT";
                                name: string;
                                label: string;
                                visibility: string;
                                placeholder?: string | undefined;
                                helperText?: string | undefined;
                                required?: boolean | undefined;
                            } | {
                                options: {
                                    min?: string | undefined;
                                    max?: string | undefined;
                                };
                                type: "DATETIME";
                                name: string;
                                label: string;
                                visibility: string;
                                placeholder?: string | undefined;
                                helperText?: string | undefined;
                                required?: boolean | undefined;
                            } | {
                                options: {
                                    minLength?: number | undefined;
                                    maxLength?: number | undefined;
                                    disableImages?: boolean | undefined;
                                };
                                type: "RICHTEXT";
                                name: string;
                                label: string;
                                visibility: string;
                                placeholder?: string | undefined;
                                helperText?: string | undefined;
                                required?: boolean | undefined;
                            } | {
                                type: "SEPARATOR";
                                name: string;
                            })[];
                            state: string;
                            points: number;
                            commentsCount: number;
                            lastChangeAt: Date;
                            project: {
                                id: string;
                                name: string;
                                slug: string;
                                displayName: string;
                            };
                            group: {
                                id: string;
                                name: string;
                                slug: string;
                                displayName: string;
                            };
                            isSuspend?: boolean | undefined;
                        })[];
                        count: number;
                    } | {};
                }>;
                404: zod.ZodObject<{
                    title: zod.ZodString;
                    status: zod.ZodNumber;
                    detail: zod.ZodOptional<zod.ZodString>;
                }, "strip", zod.ZodTypeAny, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }>;
                403: zod.ZodObject<{
                    title: zod.ZodString;
                    status: zod.ZodNumber;
                    detail: zod.ZodOptional<zod.ZodString>;
                    errors: zod.ZodOptional<zod.ZodArray<zod.ZodType<ErrorObject, zod.ZodTypeDef, ErrorObject>, "many">>;
                }, "strip", zod.ZodTypeAny, {
                    status: number;
                    title: string;
                    errors?: ErrorObject[] | undefined;
                    detail?: string | undefined;
                }, {
                    status: number;
                    title: string;
                    errors?: ErrorObject[] | undefined;
                    detail?: string | undefined;
                }>;
                500: zod.ZodObject<{
                    message: zod.ZodString;
                }, "strip", zod.ZodTypeAny, {
                    message: string;
                }, {
                    message: string;
                }>;
            };
        };
        getIssueConfidents: {
            metadata: {
                permissions: {
                    OR: ("read:confidence:any" | "read:confidence:own")[];
                };
            };
            query: zod.ZodObject<{
                limit: zod.ZodOptional<zod.ZodString>;
                page: zod.ZodOptional<zod.ZodString>;
            }, "strip", zod.ZodTypeAny, {
                limit?: string | undefined;
                page?: string | undefined;
            }, {
                limit?: string | undefined;
                page?: string | undefined;
            }>;
            summary: "Get issue confidents by issue id";
            method: "GET";
            path: "/api/issues/:issueId/confidents";
            headers: zod.ZodObject<{
                authorization: zod.ZodString;
            }, "strip", zod.ZodTypeAny, {
                authorization: string;
            }, {
                authorization: string;
            }>;
            responses: {
                200: zod.ZodObject<{
                    data: zod.ZodType<{
                        id: string;
                        authorId: string;
                        memberId: string;
                        issueId: string;
                        createdAt: string;
                        updatedAt: string;
                    }, zod.ZodTypeDef, {
                        id: string;
                        authorId: string;
                        memberId: string;
                        issueId: string;
                        createdAt: string;
                        updatedAt: string;
                    }> | zod.ZodObject<{}, "strip", zod.ZodTypeAny, {}, {}>;
                }, "strip", zod.ZodTypeAny, {
                    data: {
                        id: string;
                        authorId: string;
                        memberId: string;
                        issueId: string;
                        createdAt: string;
                        updatedAt: string;
                    } | {};
                }, {
                    data: {
                        id: string;
                        authorId: string;
                        memberId: string;
                        issueId: string;
                        createdAt: string;
                        updatedAt: string;
                    } | {};
                }>;
                500: zod.ZodObject<{
                    title: zod.ZodString;
                    status: zod.ZodNumber;
                    detail: zod.ZodOptional<zod.ZodString>;
                }, "strip", zod.ZodTypeAny, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }>;
            };
        };
    };
    comments: {
        replyToComment: {
            metadata: {
                readonly permissions: "create:comment";
            };
            summary: "Reply to comment";
            method: "POST";
            body: zod.ZodObject<{
                content: zod.ZodString;
            }, "strip", zod.ZodTypeAny, {
                content: string;
            }, {
                content: string;
            }>;
            path: "/api/comments/:commentId/reply";
            headers: zod.ZodObject<{
                authorization: zod.ZodString;
            }, "strip", zod.ZodTypeAny, {
                authorization: string;
            }, {
                authorization: string;
            }>;
            responses: {
                200: zod.ZodObject<{
                    data: zod.ZodType<{
                        id: string;
                        authorId: string;
                        issueId: string;
                        content: string;
                        createdAt?: Date | undefined;
                        updatedAt?: Date | undefined;
                        parentCommentId?: string | undefined;
                    }, zod.ZodTypeDef, {
                        id: string;
                        authorId: string;
                        issueId: string;
                        content: string;
                        createdAt?: Date | undefined;
                        updatedAt?: Date | undefined;
                        parentCommentId?: string | undefined;
                    }> | zod.ZodObject<{}, "strip", zod.ZodTypeAny, {}, {}>;
                }, "strip", zod.ZodTypeAny, {
                    data: {
                        id: string;
                        authorId: string;
                        issueId: string;
                        content: string;
                        createdAt?: Date | undefined;
                        updatedAt?: Date | undefined;
                        parentCommentId?: string | undefined;
                    } | {};
                }, {
                    data: {
                        id: string;
                        authorId: string;
                        issueId: string;
                        content: string;
                        createdAt?: Date | undefined;
                        updatedAt?: Date | undefined;
                        parentCommentId?: string | undefined;
                    } | {};
                }>;
                403: zod.ZodObject<{
                    title: zod.ZodString;
                    status: zod.ZodNumber;
                    detail: zod.ZodOptional<zod.ZodString>;
                    errors: zod.ZodOptional<zod.ZodArray<zod.ZodType<ErrorObject, zod.ZodTypeDef, ErrorObject>, "many">>;
                }, "strip", zod.ZodTypeAny, {
                    status: number;
                    title: string;
                    errors?: ErrorObject[] | undefined;
                    detail?: string | undefined;
                }, {
                    status: number;
                    title: string;
                    errors?: ErrorObject[] | undefined;
                    detail?: string | undefined;
                }>;
                404: zod.ZodObject<{
                    title: zod.ZodString;
                    status: zod.ZodNumber;
                    detail: zod.ZodOptional<zod.ZodString>;
                }, "strip", zod.ZodTypeAny, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }>;
                500: zod.ZodObject<{
                    title: zod.ZodString;
                    status: zod.ZodNumber;
                    detail: zod.ZodOptional<zod.ZodString>;
                }, "strip", zod.ZodTypeAny, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }>;
            };
        };
        replyToIssue: {
            metadata: {
                readonly permissions: "create:comment";
            };
            summary: "Reply to issue";
            method: "POST";
            body: zod.ZodObject<{
                content: zod.ZodString;
            }, "strip", zod.ZodTypeAny, {
                content: string;
            }, {
                content: string;
            }>;
            path: "/api/issues/:issueId/reply";
            headers: zod.ZodObject<{
                authorization: zod.ZodString;
            }, "strip", zod.ZodTypeAny, {
                authorization: string;
            }, {
                authorization: string;
            }>;
            responses: {
                200: zod.ZodObject<{
                    data: zod.ZodType<{
                        id: string;
                        authorId: string;
                        issueId: string;
                        content: string;
                        createdAt?: Date | undefined;
                        updatedAt?: Date | undefined;
                        parentCommentId?: string | undefined;
                    }, zod.ZodTypeDef, {
                        id: string;
                        authorId: string;
                        issueId: string;
                        content: string;
                        createdAt?: Date | undefined;
                        updatedAt?: Date | undefined;
                        parentCommentId?: string | undefined;
                    }> | zod.ZodObject<{}, "strip", zod.ZodTypeAny, {}, {}>;
                }, "strip", zod.ZodTypeAny, {
                    data: {
                        id: string;
                        authorId: string;
                        issueId: string;
                        content: string;
                        createdAt?: Date | undefined;
                        updatedAt?: Date | undefined;
                        parentCommentId?: string | undefined;
                    } | {};
                }, {
                    data: {
                        id: string;
                        authorId: string;
                        issueId: string;
                        content: string;
                        createdAt?: Date | undefined;
                        updatedAt?: Date | undefined;
                        parentCommentId?: string | undefined;
                    } | {};
                }>;
                403: zod.ZodObject<{
                    title: zod.ZodString;
                    status: zod.ZodNumber;
                    detail: zod.ZodOptional<zod.ZodString>;
                    errors: zod.ZodOptional<zod.ZodArray<zod.ZodType<ErrorObject, zod.ZodTypeDef, ErrorObject>, "many">>;
                }, "strip", zod.ZodTypeAny, {
                    status: number;
                    title: string;
                    errors?: ErrorObject[] | undefined;
                    detail?: string | undefined;
                }, {
                    status: number;
                    title: string;
                    errors?: ErrorObject[] | undefined;
                    detail?: string | undefined;
                }>;
                404: zod.ZodObject<{
                    title: zod.ZodString;
                    status: zod.ZodNumber;
                    detail: zod.ZodOptional<zod.ZodString>;
                }, "strip", zod.ZodTypeAny, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }>;
                500: zod.ZodObject<{
                    title: zod.ZodString;
                    status: zod.ZodNumber;
                    detail: zod.ZodOptional<zod.ZodString>;
                }, "strip", zod.ZodTypeAny, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }>;
            };
        };
        getIssueComments: {
            metadata: {
                readonly isPublic: true;
                readonly permissions: {};
            };
            summary: "Get all issue comments";
            method: "GET";
            path: "/api/issues/:issueId/comments";
            headers: zod.ZodObject<{
                authorization: zod.ZodOptional<zod.ZodString>;
            }, "strip", zod.ZodTypeAny, {
                authorization?: string | undefined;
            }, {
                authorization?: string | undefined;
            }>;
            responses: {
                200: zod.ZodObject<{
                    data: zod.ZodType<({
                        id: string;
                        issueId: string;
                        author: {
                            id: string;
                            username: string;
                            reputation: number;
                            avatar: string | null;
                            roleDisplayName: string;
                        };
                        content: string;
                        createdAt?: Date | undefined;
                        updatedAt?: Date | undefined;
                        parentCommentId?: string | undefined;
                        moderator?: {
                            id: string;
                            displayRole: string;
                            displayRoleColor: string;
                        } | undefined;
                    } | {
                        id: string;
                        issueId: string;
                        author: {
                            id: string;
                            username: string;
                            reputation: number;
                            avatar: string | null;
                            roleDisplayName: string;
                        };
                        suspend: {
                            type: string;
                            reason: string;
                            by: string;
                            suspendedAt: Date;
                        };
                        createdAt?: Date | undefined;
                        updatedAt?: Date | undefined;
                        parentCommentId?: string | undefined;
                        moderator?: {
                            id: string;
                            displayRole: string;
                            displayRoleColor: string;
                        } | undefined;
                    } | {
                        id: string;
                        issueId: string;
                        author: {
                            id: string;
                            username: string;
                            reputation: number;
                            avatar: string | null;
                            roleDisplayName: string;
                        };
                        content: string;
                        createdAt?: Date | undefined;
                        updatedAt?: Date | undefined;
                        parentCommentId?: string | undefined;
                        suspend?: {
                            type: string;
                            reason: string;
                            by: string;
                            suspendedAt: Date;
                        } | undefined;
                        reports?: string[] | undefined;
                        moderator?: {
                            id: string;
                            displayRole: string;
                            displayRoleColor: string;
                        } | undefined;
                    })[], zod.ZodTypeDef, ({
                        id: string;
                        issueId: string;
                        author: {
                            id: string;
                            username: string;
                            reputation: number;
                            avatar: string | null;
                            roleDisplayName: string;
                        };
                        content: string;
                        createdAt?: Date | undefined;
                        updatedAt?: Date | undefined;
                        parentCommentId?: string | undefined;
                        moderator?: {
                            id: string;
                            displayRole: string;
                            displayRoleColor: string;
                        } | undefined;
                    } | {
                        id: string;
                        issueId: string;
                        author: {
                            id: string;
                            username: string;
                            reputation: number;
                            avatar: string | null;
                            roleDisplayName: string;
                        };
                        suspend: {
                            type: string;
                            reason: string;
                            by: string;
                            suspendedAt: Date;
                        };
                        createdAt?: Date | undefined;
                        updatedAt?: Date | undefined;
                        parentCommentId?: string | undefined;
                        moderator?: {
                            id: string;
                            displayRole: string;
                            displayRoleColor: string;
                        } | undefined;
                    } | {
                        id: string;
                        issueId: string;
                        author: {
                            id: string;
                            username: string;
                            reputation: number;
                            avatar: string | null;
                            roleDisplayName: string;
                        };
                        content: string;
                        createdAt?: Date | undefined;
                        updatedAt?: Date | undefined;
                        parentCommentId?: string | undefined;
                        suspend?: {
                            type: string;
                            reason: string;
                            by: string;
                            suspendedAt: Date;
                        } | undefined;
                        reports?: string[] | undefined;
                        moderator?: {
                            id: string;
                            displayRole: string;
                            displayRoleColor: string;
                        } | undefined;
                    })[]> | zod.ZodObject<{}, "strip", zod.ZodTypeAny, {}, {}>;
                }, "strip", zod.ZodTypeAny, {
                    data: ({
                        id: string;
                        issueId: string;
                        author: {
                            id: string;
                            username: string;
                            reputation: number;
                            avatar: string | null;
                            roleDisplayName: string;
                        };
                        content: string;
                        createdAt?: Date | undefined;
                        updatedAt?: Date | undefined;
                        parentCommentId?: string | undefined;
                        moderator?: {
                            id: string;
                            displayRole: string;
                            displayRoleColor: string;
                        } | undefined;
                    } | {
                        id: string;
                        issueId: string;
                        author: {
                            id: string;
                            username: string;
                            reputation: number;
                            avatar: string | null;
                            roleDisplayName: string;
                        };
                        suspend: {
                            type: string;
                            reason: string;
                            by: string;
                            suspendedAt: Date;
                        };
                        createdAt?: Date | undefined;
                        updatedAt?: Date | undefined;
                        parentCommentId?: string | undefined;
                        moderator?: {
                            id: string;
                            displayRole: string;
                            displayRoleColor: string;
                        } | undefined;
                    } | {
                        id: string;
                        issueId: string;
                        author: {
                            id: string;
                            username: string;
                            reputation: number;
                            avatar: string | null;
                            roleDisplayName: string;
                        };
                        content: string;
                        createdAt?: Date | undefined;
                        updatedAt?: Date | undefined;
                        parentCommentId?: string | undefined;
                        suspend?: {
                            type: string;
                            reason: string;
                            by: string;
                            suspendedAt: Date;
                        } | undefined;
                        reports?: string[] | undefined;
                        moderator?: {
                            id: string;
                            displayRole: string;
                            displayRoleColor: string;
                        } | undefined;
                    })[] | {};
                }, {
                    data: ({
                        id: string;
                        issueId: string;
                        author: {
                            id: string;
                            username: string;
                            reputation: number;
                            avatar: string | null;
                            roleDisplayName: string;
                        };
                        content: string;
                        createdAt?: Date | undefined;
                        updatedAt?: Date | undefined;
                        parentCommentId?: string | undefined;
                        moderator?: {
                            id: string;
                            displayRole: string;
                            displayRoleColor: string;
                        } | undefined;
                    } | {
                        id: string;
                        issueId: string;
                        author: {
                            id: string;
                            username: string;
                            reputation: number;
                            avatar: string | null;
                            roleDisplayName: string;
                        };
                        suspend: {
                            type: string;
                            reason: string;
                            by: string;
                            suspendedAt: Date;
                        };
                        createdAt?: Date | undefined;
                        updatedAt?: Date | undefined;
                        parentCommentId?: string | undefined;
                        moderator?: {
                            id: string;
                            displayRole: string;
                            displayRoleColor: string;
                        } | undefined;
                    } | {
                        id: string;
                        issueId: string;
                        author: {
                            id: string;
                            username: string;
                            reputation: number;
                            avatar: string | null;
                            roleDisplayName: string;
                        };
                        content: string;
                        createdAt?: Date | undefined;
                        updatedAt?: Date | undefined;
                        parentCommentId?: string | undefined;
                        suspend?: {
                            type: string;
                            reason: string;
                            by: string;
                            suspendedAt: Date;
                        } | undefined;
                        reports?: string[] | undefined;
                        moderator?: {
                            id: string;
                            displayRole: string;
                            displayRoleColor: string;
                        } | undefined;
                    })[] | {};
                }>;
                404: zod.ZodObject<{
                    title: zod.ZodString;
                    status: zod.ZodNumber;
                    detail: zod.ZodOptional<zod.ZodString>;
                }, "strip", zod.ZodTypeAny, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }>;
                500: zod.ZodObject<{
                    title: zod.ZodString;
                    status: zod.ZodNumber;
                    detail: zod.ZodOptional<zod.ZodString>;
                }, "strip", zod.ZodTypeAny, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }>;
            };
        };
    };
    issueSubscribes: {
        subscribe: {
            metadata: {
                readonly permissions: "subscribe:issue";
            };
            summary: "Susbcribe notification to the issue";
            method: "POST";
            body: zod.ZodObject<{
                issueId: zod.ZodString;
            }, "strip", zod.ZodTypeAny, {
                issueId: string;
            }, {
                issueId: string;
            }>;
            path: "/api/issues/:issueId/subscribe";
            headers: zod.ZodObject<{
                authorization: zod.ZodString;
            }, "strip", zod.ZodTypeAny, {
                authorization: string;
            }, {
                authorization: string;
            }>;
            responses: {
                201: zod.ZodObject<{
                    data: zod.ZodType<{
                        id: string;
                        memberId: string;
                        issueId: string;
                        createdAt: string;
                        updatedAt: string;
                    }, zod.ZodTypeDef, {
                        id: string;
                        memberId: string;
                        issueId: string;
                        createdAt: string;
                        updatedAt: string;
                    }> | zod.ZodObject<{}, "strip", zod.ZodTypeAny, {}, {}>;
                }, "strip", zod.ZodTypeAny, {
                    data: {
                        id: string;
                        memberId: string;
                        issueId: string;
                        createdAt: string;
                        updatedAt: string;
                    } | {};
                }, {
                    data: {
                        id: string;
                        memberId: string;
                        issueId: string;
                        createdAt: string;
                        updatedAt: string;
                    } | {};
                }>;
                404: zod.ZodObject<{
                    title: zod.ZodString;
                    status: zod.ZodNumber;
                    detail: zod.ZodOptional<zod.ZodString>;
                }, "strip", zod.ZodTypeAny, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }>;
                409: zod.ZodObject<{
                    title: zod.ZodString;
                    status: zod.ZodNumber;
                    detail: zod.ZodOptional<zod.ZodString>;
                }, "strip", zod.ZodTypeAny, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }>;
                500: zod.ZodObject<{
                    title: zod.ZodString;
                    status: zod.ZodNumber;
                    detail: zod.ZodOptional<zod.ZodString>;
                }, "strip", zod.ZodTypeAny, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }>;
            };
        };
        unsubscribe: {
            metadata: {
                readonly permissions: "subscribe:issue";
            };
            summary: "Unusubscribe issue notification to the issue";
            method: "POST";
            body: zod.ZodObject<{
                issueId: zod.ZodString;
            }, "strip", zod.ZodTypeAny, {
                issueId: string;
            }, {
                issueId: string;
            }>;
            path: "/api/issues/:issueId/unsubscribe";
            headers: zod.ZodObject<{
                authorization: zod.ZodString;
            }, "strip", zod.ZodTypeAny, {
                authorization: string;
            }, {
                authorization: string;
            }>;
            responses: {
                204: zod.ZodNullable<zod.ZodObject<{}, "strip", zod.ZodTypeAny, {}, {}>>;
                404: zod.ZodObject<{
                    title: zod.ZodString;
                    status: zod.ZodNumber;
                    detail: zod.ZodOptional<zod.ZodString>;
                }, "strip", zod.ZodTypeAny, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }>;
                500: zod.ZodObject<{
                    title: zod.ZodString;
                    status: zod.ZodNumber;
                    detail: zod.ZodOptional<zod.ZodString>;
                }, "strip", zod.ZodTypeAny, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }>;
            };
        };
        getMySubscribedIssues: {
            metadata: {
                readonly permissions: "subscribe:issue";
            };
            query: zod.ZodObject<{
                page: zod.ZodOptional<zod.ZodString>;
                limit: zod.ZodOptional<zod.ZodString>;
            }, "strip", zod.ZodTypeAny, {
                limit?: string | undefined;
                page?: string | undefined;
            }, {
                limit?: string | undefined;
                page?: string | undefined;
            }>;
            summary: "Get my subscribed issues";
            method: "GET";
            path: "/api/issues/subscribed";
            headers: zod.ZodObject<{
                authorization: zod.ZodString;
            }, "strip", zod.ZodTypeAny, {
                authorization: string;
            }, {
                authorization: string;
            }>;
            responses: {
                200: zod.ZodObject<{
                    data: zod.ZodType<{
                        id: string;
                        authorId: string;
                        memberId: string;
                        issueId: string;
                        createdAt: string;
                        updatedAt: string;
                    }[], zod.ZodTypeDef, {
                        id: string;
                        authorId: string;
                        memberId: string;
                        issueId: string;
                        createdAt: string;
                        updatedAt: string;
                    }[]> | zod.ZodObject<{}, "strip", zod.ZodTypeAny, {}, {}>;
                }, "strip", zod.ZodTypeAny, {
                    data: {
                        id: string;
                        authorId: string;
                        memberId: string;
                        issueId: string;
                        createdAt: string;
                        updatedAt: string;
                    }[] | {};
                }, {
                    data: {
                        id: string;
                        authorId: string;
                        memberId: string;
                        issueId: string;
                        createdAt: string;
                        updatedAt: string;
                    }[] | {};
                }>;
                500: zod.ZodObject<{
                    title: zod.ZodString;
                    status: zod.ZodNumber;
                    detail: zod.ZodOptional<zod.ZodString>;
                }, "strip", zod.ZodTypeAny, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }>;
            };
        };
    };
    notifications: {
        getCurrentMemberNotifications: {
            metadata: {
                readonly permissions: {};
            };
            summary: "Create issue confidence record by logged member";
            method: "GET";
            path: "/api/members/me/notifications";
            headers: zod.ZodObject<{
                authorization: zod.ZodString;
            }, "strip", zod.ZodTypeAny, {
                authorization: string;
            }, {
                authorization: string;
            }>;
            responses: {
                200: zod.ZodObject<{
                    data: zod.ZodType<{
                        id: string;
                        memberId: string;
                        type: string;
                        createdAt: string;
                        updatedAt: string;
                        template: string;
                        isRead: boolean;
                    }, zod.ZodTypeDef, {
                        id: string;
                        memberId: string;
                        type: string;
                        createdAt: string;
                        updatedAt: string;
                        template: string;
                        isRead: boolean;
                    }> | zod.ZodObject<{}, "strip", zod.ZodTypeAny, {}, {}>;
                }, "strip", zod.ZodTypeAny, {
                    data: {
                        id: string;
                        memberId: string;
                        type: string;
                        createdAt: string;
                        updatedAt: string;
                        template: string;
                        isRead: boolean;
                    } | {};
                }, {
                    data: {
                        id: string;
                        memberId: string;
                        type: string;
                        createdAt: string;
                        updatedAt: string;
                        template: string;
                        isRead: boolean;
                    } | {};
                }>;
                404: zod.ZodObject<{
                    title: zod.ZodString;
                    status: zod.ZodNumber;
                    detail: zod.ZodOptional<zod.ZodString>;
                }, "strip", zod.ZodTypeAny, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }>;
                403: zod.ZodObject<{
                    title: zod.ZodString;
                    status: zod.ZodNumber;
                    detail: zod.ZodOptional<zod.ZodString>;
                    errors: zod.ZodOptional<zod.ZodArray<zod.ZodType<ErrorObject, zod.ZodTypeDef, ErrorObject>, "many">>;
                }, "strip", zod.ZodTypeAny, {
                    status: number;
                    title: string;
                    errors?: ErrorObject[] | undefined;
                    detail?: string | undefined;
                }, {
                    status: number;
                    title: string;
                    errors?: ErrorObject[] | undefined;
                    detail?: string | undefined;
                }>;
                500: zod.ZodObject<{
                    title: zod.ZodString;
                    status: zod.ZodNumber;
                    detail: zod.ZodOptional<zod.ZodString>;
                }, "strip", zod.ZodTypeAny, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }>;
            };
        };
        readCurrentMemberNotification: {
            metadata: {
                readonly permissions: {};
            };
            summary: "Read current member notification";
            method: "POST";
            body: zod.ZodOptional<zod.ZodNullable<zod.ZodObject<{}, "strip", zod.ZodTypeAny, {}, {}>>>;
            path: "/api/members/me/notifications/:notificationId/read";
            headers: zod.ZodObject<{
                authorization: zod.ZodString;
            }, "strip", zod.ZodTypeAny, {
                authorization: string;
            }, {
                authorization: string;
            }>;
            responses: {
                200: zod.ZodObject<{
                    data: zod.ZodType<{
                        id: string;
                        memberId: string;
                        type: string;
                        createdAt: string;
                        updatedAt: string;
                        template: string;
                        isRead: boolean;
                    }, zod.ZodTypeDef, {
                        id: string;
                        memberId: string;
                        type: string;
                        createdAt: string;
                        updatedAt: string;
                        template: string;
                        isRead: boolean;
                    }> | zod.ZodObject<{}, "strip", zod.ZodTypeAny, {}, {}>;
                }, "strip", zod.ZodTypeAny, {
                    data: {
                        id: string;
                        memberId: string;
                        type: string;
                        createdAt: string;
                        updatedAt: string;
                        template: string;
                        isRead: boolean;
                    } | {};
                }, {
                    data: {
                        id: string;
                        memberId: string;
                        type: string;
                        createdAt: string;
                        updatedAt: string;
                        template: string;
                        isRead: boolean;
                    } | {};
                }>;
                400: zod.ZodObject<{
                    title: zod.ZodString;
                    status: zod.ZodNumber;
                    detail: zod.ZodOptional<zod.ZodString>;
                    errors: zod.ZodOptional<zod.ZodArray<zod.ZodType<ErrorObject, zod.ZodTypeDef, ErrorObject>, "many">>;
                }, "strip", zod.ZodTypeAny, {
                    status: number;
                    title: string;
                    errors?: ErrorObject[] | undefined;
                    detail?: string | undefined;
                }, {
                    status: number;
                    title: string;
                    errors?: ErrorObject[] | undefined;
                    detail?: string | undefined;
                }>;
                500: zod.ZodObject<{
                    title: zod.ZodString;
                    status: zod.ZodNumber;
                    detail: zod.ZodOptional<zod.ZodString>;
                }, "strip", zod.ZodTypeAny, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }>;
            };
        };
        readCurrentMemberAllNotifications: {
            metadata: {
                readonly permissions: {};
            };
            summary: "Read all current member notifications";
            method: "POST";
            body: zod.ZodOptional<zod.ZodNullable<zod.ZodObject<{}, "strip", zod.ZodTypeAny, {}, {}>>>;
            path: "/api/members/me/notifications/read-all";
            headers: zod.ZodObject<{
                authorization: zod.ZodString;
            }, "strip", zod.ZodTypeAny, {
                authorization: string;
            }, {
                authorization: string;
            }>;
            responses: {
                200: zod.ZodObject<{
                    data: zod.ZodType<{
                        id: string;
                        memberId: string;
                        type: string;
                        createdAt: string;
                        updatedAt: string;
                        template: string;
                        isRead: boolean;
                    }[], zod.ZodTypeDef, {
                        id: string;
                        memberId: string;
                        type: string;
                        createdAt: string;
                        updatedAt: string;
                        template: string;
                        isRead: boolean;
                    }[]> | zod.ZodObject<{}, "strip", zod.ZodTypeAny, {}, {}>;
                }, "strip", zod.ZodTypeAny, {
                    data: {
                        id: string;
                        memberId: string;
                        type: string;
                        createdAt: string;
                        updatedAt: string;
                        template: string;
                        isRead: boolean;
                    }[] | {};
                }, {
                    data: {
                        id: string;
                        memberId: string;
                        type: string;
                        createdAt: string;
                        updatedAt: string;
                        template: string;
                        isRead: boolean;
                    }[] | {};
                }>;
                400: zod.ZodObject<{
                    title: zod.ZodString;
                    status: zod.ZodNumber;
                    detail: zod.ZodOptional<zod.ZodString>;
                    errors: zod.ZodOptional<zod.ZodArray<zod.ZodType<ErrorObject, zod.ZodTypeDef, ErrorObject>, "many">>;
                }, "strip", zod.ZodTypeAny, {
                    status: number;
                    title: string;
                    errors?: ErrorObject[] | undefined;
                    detail?: string | undefined;
                }, {
                    status: number;
                    title: string;
                    errors?: ErrorObject[] | undefined;
                    detail?: string | undefined;
                }>;
                500: zod.ZodObject<{
                    title: zod.ZodString;
                    status: zod.ZodNumber;
                    detail: zod.ZodOptional<zod.ZodString>;
                }, "strip", zod.ZodTypeAny, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }>;
            };
        };
    };
    apiToken: {
        generateNewApiToken: {
            metadata: {
                readonly permissions: "create:apiToken";
            };
            summary: "Generate new api token";
            method: "POST";
            body: zod.ZodObject<{
                displayName: zod.ZodString;
                issueResourceAccess: zod.ZodArray<zod.ZodObject<{
                    projectId: zod.ZodString;
                    scopes: zod.ZodArray<zod.ZodString, "many">;
                }, "strip", zod.ZodTypeAny, {
                    projectId: string;
                    scopes: string[];
                }, {
                    projectId: string;
                    scopes: string[];
                }>, "many">;
                expiration: zod.ZodOptional<zod.ZodNullable<zod.ZodString>>;
            }, "strip", zod.ZodTypeAny, {
                displayName: string;
                issueResourceAccess: {
                    projectId: string;
                    scopes: string[];
                }[];
                expiration?: string | null | undefined;
            }, {
                displayName: string;
                issueResourceAccess: {
                    projectId: string;
                    scopes: string[];
                }[];
                expiration?: string | null | undefined;
            }>;
            path: "/api/api-tokens";
            headers: zod.ZodObject<{
                authorization: zod.ZodString;
            }, "strip", zod.ZodTypeAny, {
                authorization: string;
            }, {
                authorization: string;
            }>;
            responses: {
                200: zod.ZodObject<{
                    data: zod.ZodType<{
                        id: string;
                        createdAt: Date;
                        updatedAt: Date;
                        displayName: string;
                        expiration: Date | null;
                        resourceAccess: {
                            issue: {
                                projectId: string;
                                scopes: string[];
                            }[];
                        };
                        hash?: string | undefined;
                        token?: string | undefined;
                    }, zod.ZodTypeDef, {
                        id: string;
                        createdAt: Date;
                        updatedAt: Date;
                        displayName: string;
                        expiration: Date | null;
                        resourceAccess: {
                            issue: {
                                projectId: string;
                                scopes: string[];
                            }[];
                        };
                        hash?: string | undefined;
                        token?: string | undefined;
                    }> | zod.ZodObject<{}, "strip", zod.ZodTypeAny, {}, {}>;
                }, "strip", zod.ZodTypeAny, {
                    data: {
                        id: string;
                        createdAt: Date;
                        updatedAt: Date;
                        displayName: string;
                        expiration: Date | null;
                        resourceAccess: {
                            issue: {
                                projectId: string;
                                scopes: string[];
                            }[];
                        };
                        hash?: string | undefined;
                        token?: string | undefined;
                    } | {};
                }, {
                    data: {
                        id: string;
                        createdAt: Date;
                        updatedAt: Date;
                        displayName: string;
                        expiration: Date | null;
                        resourceAccess: {
                            issue: {
                                projectId: string;
                                scopes: string[];
                            }[];
                        };
                        hash?: string | undefined;
                        token?: string | undefined;
                    } | {};
                }>;
                409: zod.ZodObject<{
                    title: zod.ZodString;
                    status: zod.ZodNumber;
                    detail: zod.ZodOptional<zod.ZodString>;
                }, "strip", zod.ZodTypeAny, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }>;
                403: zod.ZodObject<{
                    title: zod.ZodString;
                    status: zod.ZodNumber;
                    detail: zod.ZodOptional<zod.ZodString>;
                    errors: zod.ZodOptional<zod.ZodArray<zod.ZodType<ErrorObject, zod.ZodTypeDef, ErrorObject>, "many">>;
                }, "strip", zod.ZodTypeAny, {
                    status: number;
                    title: string;
                    errors?: ErrorObject[] | undefined;
                    detail?: string | undefined;
                }, {
                    status: number;
                    title: string;
                    errors?: ErrorObject[] | undefined;
                    detail?: string | undefined;
                }>;
                500: zod.ZodObject<{
                    title: zod.ZodString;
                    status: zod.ZodNumber;
                    detail: zod.ZodOptional<zod.ZodString>;
                }, "strip", zod.ZodTypeAny, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }>;
            };
        };
        regenerateApiToken: {
            metadata: {
                readonly permissions: "create:apiToken";
            };
            summary: "Regenerate api token";
            method: "POST";
            body: zod.ZodOptional<zod.ZodNullable<zod.ZodObject<{}, "strip", zod.ZodTypeAny, {}, {}>>>;
            path: "/api/api-tokens/:id/regenerate";
            headers: zod.ZodObject<{
                authorization: zod.ZodString;
            }, "strip", zod.ZodTypeAny, {
                authorization: string;
            }, {
                authorization: string;
            }>;
            responses: {
                200: zod.ZodObject<{
                    data: zod.ZodType<{
                        id: string;
                        createdAt: Date;
                        updatedAt: Date;
                        displayName: string;
                        expiration: Date | null;
                        resourceAccess: {
                            issue: {
                                projectId: string;
                                scopes: string[];
                            }[];
                        };
                        hash?: string | undefined;
                        token?: string | undefined;
                    }, zod.ZodTypeDef, {
                        id: string;
                        createdAt: Date;
                        updatedAt: Date;
                        displayName: string;
                        expiration: Date | null;
                        resourceAccess: {
                            issue: {
                                projectId: string;
                                scopes: string[];
                            }[];
                        };
                        hash?: string | undefined;
                        token?: string | undefined;
                    }> | zod.ZodObject<{}, "strip", zod.ZodTypeAny, {}, {}>;
                }, "strip", zod.ZodTypeAny, {
                    data: {
                        id: string;
                        createdAt: Date;
                        updatedAt: Date;
                        displayName: string;
                        expiration: Date | null;
                        resourceAccess: {
                            issue: {
                                projectId: string;
                                scopes: string[];
                            }[];
                        };
                        hash?: string | undefined;
                        token?: string | undefined;
                    } | {};
                }, {
                    data: {
                        id: string;
                        createdAt: Date;
                        updatedAt: Date;
                        displayName: string;
                        expiration: Date | null;
                        resourceAccess: {
                            issue: {
                                projectId: string;
                                scopes: string[];
                            }[];
                        };
                        hash?: string | undefined;
                        token?: string | undefined;
                    } | {};
                }>;
                404: zod.ZodObject<{
                    title: zod.ZodString;
                    status: zod.ZodNumber;
                    detail: zod.ZodOptional<zod.ZodString>;
                }, "strip", zod.ZodTypeAny, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }>;
                403: zod.ZodObject<{
                    title: zod.ZodString;
                    status: zod.ZodNumber;
                    detail: zod.ZodOptional<zod.ZodString>;
                    errors: zod.ZodOptional<zod.ZodArray<zod.ZodType<ErrorObject, zod.ZodTypeDef, ErrorObject>, "many">>;
                }, "strip", zod.ZodTypeAny, {
                    status: number;
                    title: string;
                    errors?: ErrorObject[] | undefined;
                    detail?: string | undefined;
                }, {
                    status: number;
                    title: string;
                    errors?: ErrorObject[] | undefined;
                    detail?: string | undefined;
                }>;
                500: zod.ZodObject<{
                    title: zod.ZodString;
                    status: zod.ZodNumber;
                    detail: zod.ZodOptional<zod.ZodString>;
                }, "strip", zod.ZodTypeAny, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }>;
            };
        };
        editApiToken: {
            metadata: {
                permissions: "update:apiToken";
            };
            summary: "Edit api token";
            method: "POST";
            body: zod.ZodObject<{
                displayName: zod.ZodString;
            }, "strip", zod.ZodTypeAny, {
                displayName: string;
            }, {
                displayName: string;
            }>;
            path: "/api/api-tokens/:id/edit";
            headers: zod.ZodObject<{
                authorization: zod.ZodString;
            }, "strip", zod.ZodTypeAny, {
                authorization: string;
            }, {
                authorization: string;
            }>;
            responses: {
                200: zod.ZodObject<{
                    data: zod.ZodType<{
                        id: string;
                        createdAt: Date;
                        updatedAt: Date;
                        displayName: string;
                        expiration: Date | null;
                        resourceAccess: {
                            issue: {
                                projectId: string;
                                scopes: string[];
                            }[];
                        };
                        hash?: string | undefined;
                        token?: string | undefined;
                    }, zod.ZodTypeDef, {
                        id: string;
                        createdAt: Date;
                        updatedAt: Date;
                        displayName: string;
                        expiration: Date | null;
                        resourceAccess: {
                            issue: {
                                projectId: string;
                                scopes: string[];
                            }[];
                        };
                        hash?: string | undefined;
                        token?: string | undefined;
                    }> | zod.ZodObject<{}, "strip", zod.ZodTypeAny, {}, {}>;
                }, "strip", zod.ZodTypeAny, {
                    data: {
                        id: string;
                        createdAt: Date;
                        updatedAt: Date;
                        displayName: string;
                        expiration: Date | null;
                        resourceAccess: {
                            issue: {
                                projectId: string;
                                scopes: string[];
                            }[];
                        };
                        hash?: string | undefined;
                        token?: string | undefined;
                    } | {};
                }, {
                    data: {
                        id: string;
                        createdAt: Date;
                        updatedAt: Date;
                        displayName: string;
                        expiration: Date | null;
                        resourceAccess: {
                            issue: {
                                projectId: string;
                                scopes: string[];
                            }[];
                        };
                        hash?: string | undefined;
                        token?: string | undefined;
                    } | {};
                }>;
                403: zod.ZodObject<{
                    title: zod.ZodString;
                    status: zod.ZodNumber;
                    detail: zod.ZodOptional<zod.ZodString>;
                    errors: zod.ZodOptional<zod.ZodArray<zod.ZodType<ErrorObject, zod.ZodTypeDef, ErrorObject>, "many">>;
                }, "strip", zod.ZodTypeAny, {
                    status: number;
                    title: string;
                    errors?: ErrorObject[] | undefined;
                    detail?: string | undefined;
                }, {
                    status: number;
                    title: string;
                    errors?: ErrorObject[] | undefined;
                    detail?: string | undefined;
                }>;
                404: zod.ZodObject<{
                    title: zod.ZodString;
                    status: zod.ZodNumber;
                    detail: zod.ZodOptional<zod.ZodString>;
                }, "strip", zod.ZodTypeAny, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }>;
                409: zod.ZodObject<{
                    title: zod.ZodString;
                    status: zod.ZodNumber;
                    detail: zod.ZodOptional<zod.ZodString>;
                }, "strip", zod.ZodTypeAny, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }>;
                500: zod.ZodObject<{
                    title: zod.ZodString;
                    status: zod.ZodNumber;
                    detail: zod.ZodOptional<zod.ZodString>;
                }, "strip", zod.ZodTypeAny, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }>;
            };
        };
        deleteApiToken: {
            metadata: {
                permissions: "delete:apiToken";
            };
            summary: "Delete apiToken by id";
            method: "DELETE";
            body: zod.ZodOptional<zod.ZodNullable<zod.ZodObject<{}, "strip", zod.ZodTypeAny, {}, {}>>>;
            path: "/api/api-tokens/:id";
            headers: zod.ZodObject<{
                authorization: zod.ZodString;
            }, "strip", zod.ZodTypeAny, {
                authorization: string;
            }, {
                authorization: string;
            }>;
            responses: {
                204: zod.ZodNullable<zod.ZodObject<{}, "strip", zod.ZodTypeAny, {}, {}>>;
                404: zod.ZodObject<{
                    title: zod.ZodString;
                    status: zod.ZodNumber;
                    detail: zod.ZodOptional<zod.ZodString>;
                }, "strip", zod.ZodTypeAny, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }>;
                403: zod.ZodObject<{
                    title: zod.ZodString;
                    status: zod.ZodNumber;
                    detail: zod.ZodOptional<zod.ZodString>;
                    errors: zod.ZodOptional<zod.ZodArray<zod.ZodType<ErrorObject, zod.ZodTypeDef, ErrorObject>, "many">>;
                }, "strip", zod.ZodTypeAny, {
                    status: number;
                    title: string;
                    errors?: ErrorObject[] | undefined;
                    detail?: string | undefined;
                }, {
                    status: number;
                    title: string;
                    errors?: ErrorObject[] | undefined;
                    detail?: string | undefined;
                }>;
                500: zod.ZodObject<{
                    title: zod.ZodString;
                    status: zod.ZodNumber;
                    detail: zod.ZodOptional<zod.ZodString>;
                }, "strip", zod.ZodTypeAny, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }>;
            };
        };
        getApiTokens: {
            metadata: {
                permissions: "read:apiToken";
            };
            query: zod.ZodObject<{
                page: zod.ZodOptional<zod.ZodString>;
                limit: zod.ZodOptional<zod.ZodString>;
                search: zod.ZodOptional<zod.ZodString>;
            }, "strip", zod.ZodTypeAny, {
                search?: string | undefined;
                limit?: string | undefined;
                page?: string | undefined;
            }, {
                search?: string | undefined;
                limit?: string | undefined;
                page?: string | undefined;
            }>;
            summary: "Get all api tokens";
            method: "GET";
            path: "/api/api-tokens";
            headers: zod.ZodObject<{
                authorization: zod.ZodString;
            }, "strip", zod.ZodTypeAny, {
                authorization: string;
            }, {
                authorization: string;
            }>;
            responses: {
                200: zod.ZodObject<{
                    data: zod.ZodType<{
                        data: {
                            id: string;
                            createdAt: Date;
                            updatedAt: Date;
                            displayName: string;
                            expiration: Date | null;
                            resourceAccess: {
                                issue: {
                                    projectId: string;
                                    scopes: string[];
                                }[];
                            };
                            hash?: string | undefined;
                            token?: string | undefined;
                        }[];
                        count: number;
                    }, zod.ZodTypeDef, {
                        data: {
                            id: string;
                            createdAt: Date;
                            updatedAt: Date;
                            displayName: string;
                            expiration: Date | null;
                            resourceAccess: {
                                issue: {
                                    projectId: string;
                                    scopes: string[];
                                }[];
                            };
                            hash?: string | undefined;
                            token?: string | undefined;
                        }[];
                        count: number;
                    }> | zod.ZodObject<{}, "strip", zod.ZodTypeAny, {}, {}>;
                }, "strip", zod.ZodTypeAny, {
                    data: {
                        data: {
                            id: string;
                            createdAt: Date;
                            updatedAt: Date;
                            displayName: string;
                            expiration: Date | null;
                            resourceAccess: {
                                issue: {
                                    projectId: string;
                                    scopes: string[];
                                }[];
                            };
                            hash?: string | undefined;
                            token?: string | undefined;
                        }[];
                        count: number;
                    } | {};
                }, {
                    data: {
                        data: {
                            id: string;
                            createdAt: Date;
                            updatedAt: Date;
                            displayName: string;
                            expiration: Date | null;
                            resourceAccess: {
                                issue: {
                                    projectId: string;
                                    scopes: string[];
                                }[];
                            };
                            hash?: string | undefined;
                            token?: string | undefined;
                        }[];
                        count: number;
                    } | {};
                }>;
                401: zod.ZodObject<{
                    title: zod.ZodString;
                    status: zod.ZodNumber;
                    detail: zod.ZodOptional<zod.ZodString>;
                }, "strip", zod.ZodTypeAny, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }>;
                500: zod.ZodObject<{
                    title: zod.ZodString;
                    status: zod.ZodNumber;
                    detail: zod.ZodOptional<zod.ZodString>;
                }, "strip", zod.ZodTypeAny, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }>;
            };
        };
    };
    issueTags: {
        getIssueTags: {
            metadata: {
                readonly permissions: {};
            };
            query: zod.ZodObject<{
                page: zod.ZodOptional<zod.ZodString>;
                limit: zod.ZodOptional<zod.ZodString>;
                search: zod.ZodOptional<zod.ZodString>;
            }, "strip", zod.ZodTypeAny, {
                search?: string | undefined;
                limit?: string | undefined;
                page?: string | undefined;
            }, {
                search?: string | undefined;
                limit?: string | undefined;
                page?: string | undefined;
            }>;
            summary: "Get issue tags";
            method: "GET";
            path: "/api/issue-tags";
            headers: zod.ZodObject<{
                authorization: zod.ZodString;
            }, "strip", zod.ZodTypeAny, {
                authorization: string;
            }, {
                authorization: string;
            }>;
            responses: {
                200: zod.ZodObject<{
                    data: zod.ZodType<{
                        id: string;
                        createdAt: string;
                        updatedAt: string;
                        name: string;
                        description: string;
                        displayName: string;
                        color: string;
                        count: number;
                    }[], zod.ZodTypeDef, {
                        id: string;
                        createdAt: string;
                        updatedAt: string;
                        name: string;
                        description: string;
                        displayName: string;
                        color: string;
                        count: number;
                    }[]> | zod.ZodObject<{}, "strip", zod.ZodTypeAny, {}, {}>;
                }, "strip", zod.ZodTypeAny, {
                    data: {
                        id: string;
                        createdAt: string;
                        updatedAt: string;
                        name: string;
                        description: string;
                        displayName: string;
                        color: string;
                        count: number;
                    }[] | {};
                }, {
                    data: {
                        id: string;
                        createdAt: string;
                        updatedAt: string;
                        name: string;
                        description: string;
                        displayName: string;
                        color: string;
                        count: number;
                    }[] | {};
                }>;
                500: zod.ZodObject<{
                    title: zod.ZodString;
                    status: zod.ZodNumber;
                    detail: zod.ZodOptional<zod.ZodString>;
                }, "strip", zod.ZodTypeAny, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }>;
            };
        };
        getIssueTagByName: {
            metadata: {
                readonly permissions: {};
            };
            query: zod.ZodOptional<zod.ZodNullable<zod.ZodObject<{}, "strip", zod.ZodTypeAny, {}, {}>>>;
            summary: "Get issue tag by name";
            method: "GET";
            path: "/api/issue-tags/by/name/:name";
            headers: zod.ZodObject<{
                authorization: zod.ZodString;
            }, "strip", zod.ZodTypeAny, {
                authorization: string;
            }, {
                authorization: string;
            }>;
            responses: {
                200: zod.ZodObject<{
                    data: zod.ZodType<{
                        id: string;
                        createdAt: string;
                        updatedAt: string;
                        name: string;
                        description: string;
                        displayName: string;
                        color: string;
                        count: number;
                    }, zod.ZodTypeDef, {
                        id: string;
                        createdAt: string;
                        updatedAt: string;
                        name: string;
                        description: string;
                        displayName: string;
                        color: string;
                        count: number;
                    }> | zod.ZodObject<{}, "strip", zod.ZodTypeAny, {}, {}>;
                }, "strip", zod.ZodTypeAny, {
                    data: {
                        id: string;
                        createdAt: string;
                        updatedAt: string;
                        name: string;
                        description: string;
                        displayName: string;
                        color: string;
                        count: number;
                    } | {};
                }, {
                    data: {
                        id: string;
                        createdAt: string;
                        updatedAt: string;
                        name: string;
                        description: string;
                        displayName: string;
                        color: string;
                        count: number;
                    } | {};
                }>;
                404: zod.ZodObject<{
                    title: zod.ZodString;
                    status: zod.ZodNumber;
                    detail: zod.ZodOptional<zod.ZodString>;
                }, "strip", zod.ZodTypeAny, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }>;
                500: zod.ZodObject<{
                    title: zod.ZodString;
                    status: zod.ZodNumber;
                    detail: zod.ZodOptional<zod.ZodString>;
                }, "strip", zod.ZodTypeAny, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }>;
            };
        };
        createIssueTag: {
            metadata: {
                readonly permissions: "create:issueTag";
            };
            method: "POST";
            body: zod.ZodObject<{
                displayName: zod.ZodString;
                color: zod.ZodString;
                description: zod.ZodNullable<zod.ZodOptional<zod.ZodString>>;
            }, "strip", zod.ZodTypeAny, {
                displayName: string;
                color: string;
                description?: string | null | undefined;
            }, {
                displayName: string;
                color: string;
                description?: string | null | undefined;
            }>;
            path: "/api/issue-tags";
            headers: zod.ZodObject<{
                authorization: zod.ZodString;
            }, "strip", zod.ZodTypeAny, {
                authorization: string;
            }, {
                authorization: string;
            }>;
            responses: {
                200: zod.ZodObject<{
                    data: zod.ZodType<{
                        id: string;
                        name: string;
                        description: string;
                        displayName: string;
                        color: string;
                    }, zod.ZodTypeDef, {
                        id: string;
                        name: string;
                        description: string;
                        displayName: string;
                        color: string;
                    }> | zod.ZodObject<{}, "strip", zod.ZodTypeAny, {}, {}>;
                }, "strip", zod.ZodTypeAny, {
                    data: {
                        id: string;
                        name: string;
                        description: string;
                        displayName: string;
                        color: string;
                    } | {};
                }, {
                    data: {
                        id: string;
                        name: string;
                        description: string;
                        displayName: string;
                        color: string;
                    } | {};
                }>;
                403: zod.ZodObject<{
                    title: zod.ZodString;
                    status: zod.ZodNumber;
                    detail: zod.ZodOptional<zod.ZodString>;
                    errors: zod.ZodOptional<zod.ZodArray<zod.ZodType<ErrorObject, zod.ZodTypeDef, ErrorObject>, "many">>;
                }, "strip", zod.ZodTypeAny, {
                    status: number;
                    title: string;
                    errors?: ErrorObject[] | undefined;
                    detail?: string | undefined;
                }, {
                    status: number;
                    title: string;
                    errors?: ErrorObject[] | undefined;
                    detail?: string | undefined;
                }>;
                409: zod.ZodObject<{
                    title: zod.ZodString;
                    status: zod.ZodNumber;
                    detail: zod.ZodOptional<zod.ZodString>;
                }, "strip", zod.ZodTypeAny, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }>;
                500: zod.ZodObject<{
                    title: zod.ZodString;
                    status: zod.ZodNumber;
                    detail: zod.ZodOptional<zod.ZodString>;
                }, "strip", zod.ZodTypeAny, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }>;
            };
        };
        editIssueTag: {
            metadata: {
                readonly permissions: "update:issueTag";
            };
            method: "POST";
            body: zod.ZodObject<{
                displayName: zod.ZodString;
                color: zod.ZodString;
                description: zod.ZodNullable<zod.ZodString>;
            }, "strip", zod.ZodTypeAny, {
                description: string | null;
                displayName: string;
                color: string;
            }, {
                description: string | null;
                displayName: string;
                color: string;
            }>;
            path: "/api/issue-tags/:id/edit";
            headers: zod.ZodObject<{
                authorization: zod.ZodString;
            }, "strip", zod.ZodTypeAny, {
                authorization: string;
            }, {
                authorization: string;
            }>;
            responses: {
                200: zod.ZodObject<{
                    data: zod.ZodType<{
                        id: string;
                        name: string;
                        description: string;
                        displayName: string;
                        color: string;
                    }, zod.ZodTypeDef, {
                        id: string;
                        name: string;
                        description: string;
                        displayName: string;
                        color: string;
                    }> | zod.ZodObject<{}, "strip", zod.ZodTypeAny, {}, {}>;
                }, "strip", zod.ZodTypeAny, {
                    data: {
                        id: string;
                        name: string;
                        description: string;
                        displayName: string;
                        color: string;
                    } | {};
                }, {
                    data: {
                        id: string;
                        name: string;
                        description: string;
                        displayName: string;
                        color: string;
                    } | {};
                }>;
                403: zod.ZodObject<{
                    title: zod.ZodString;
                    status: zod.ZodNumber;
                    detail: zod.ZodOptional<zod.ZodString>;
                    errors: zod.ZodOptional<zod.ZodArray<zod.ZodType<ErrorObject, zod.ZodTypeDef, ErrorObject>, "many">>;
                }, "strip", zod.ZodTypeAny, {
                    status: number;
                    title: string;
                    errors?: ErrorObject[] | undefined;
                    detail?: string | undefined;
                }, {
                    status: number;
                    title: string;
                    errors?: ErrorObject[] | undefined;
                    detail?: string | undefined;
                }>;
                404: zod.ZodObject<{
                    title: zod.ZodString;
                    status: zod.ZodNumber;
                    detail: zod.ZodOptional<zod.ZodString>;
                }, "strip", zod.ZodTypeAny, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }>;
                409: zod.ZodObject<{
                    title: zod.ZodString;
                    status: zod.ZodNumber;
                    detail: zod.ZodOptional<zod.ZodString>;
                }, "strip", zod.ZodTypeAny, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }>;
                500: zod.ZodObject<{
                    title: zod.ZodString;
                    status: zod.ZodNumber;
                    detail: zod.ZodOptional<zod.ZodString>;
                }, "strip", zod.ZodTypeAny, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }>;
            };
        };
        deleteIssueTag: {
            metadata: {
                readonly permissions: "delete:issueTag";
            };
            method: "DELETE";
            body: zod.ZodOptional<zod.ZodNullable<zod.ZodObject<{}, "strip", zod.ZodTypeAny, {}, {}>>>;
            path: "/api/issue-tags/:id";
            headers: zod.ZodObject<{
                authorization: zod.ZodString;
            }, "strip", zod.ZodTypeAny, {
                authorization: string;
            }, {
                authorization: string;
            }>;
            responses: {
                204: zod.ZodNullable<zod.ZodObject<{}, "strip", zod.ZodTypeAny, {}, {}>>;
                404: zod.ZodObject<{
                    title: zod.ZodString;
                    status: zod.ZodNumber;
                    detail: zod.ZodOptional<zod.ZodString>;
                }, "strip", zod.ZodTypeAny, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }>;
                403: zod.ZodObject<{
                    title: zod.ZodString;
                    status: zod.ZodNumber;
                    detail: zod.ZodOptional<zod.ZodString>;
                    errors: zod.ZodOptional<zod.ZodArray<zod.ZodType<ErrorObject, zod.ZodTypeDef, ErrorObject>, "many">>;
                }, "strip", zod.ZodTypeAny, {
                    status: number;
                    title: string;
                    errors?: ErrorObject[] | undefined;
                    detail?: string | undefined;
                }, {
                    status: number;
                    title: string;
                    errors?: ErrorObject[] | undefined;
                    detail?: string | undefined;
                }>;
                500: zod.ZodObject<{
                    title: zod.ZodString;
                    status: zod.ZodNumber;
                    detail: zod.ZodOptional<zod.ZodString>;
                }, "strip", zod.ZodTypeAny, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }>;
            };
        };
    };
    issueActivity: {
        getIssueActivitiesByIssueId: {
            metadata: {
                readonly isPublic: true;
            };
            query: zod.ZodObject<{
                page: zod.ZodOptional<zod.ZodString>;
                limit: zod.ZodOptional<zod.ZodString>;
            }, "strip", zod.ZodTypeAny, {
                limit?: string | undefined;
                page?: string | undefined;
            }, {
                limit?: string | undefined;
                page?: string | undefined;
            }>;
            summary: "Get issue activities by issue Id";
            method: "GET";
            path: "/api/issues/:issueId/activities";
            headers: zod.ZodObject<{
                authorization: zod.ZodString;
            }, "strip", zod.ZodTypeAny, {
                authorization: string;
            }, {
                authorization: string;
            }>;
            responses: {
                200: zod.ZodObject<{
                    data: zod.ZodType<{
                        id: string;
                        memberId: string;
                        issueId: string;
                        type: "ISSUE_CREATE" | "ISSUE_FIELDS_CHANGE" | "ISSUE_STATE_CHANGE" | "ISSUE_ASSIGN" | "ISSUE_TAGS_UPDATE" | "ISSUE_COMMENT_REPLY" | "ISSUE_TITLE_UPDATE";
                        createdAt: string;
                        updatedAt: string;
                        projectId: string;
                        project: {
                            id: string;
                            name: string;
                            slug: string;
                            key: string;
                            displayName: string;
                        };
                        issue: {
                            id: string;
                            title: string;
                            key: string;
                            tags: string[];
                            state: string;
                            points: number;
                            commentsCount: number;
                            attachmentsCount: number;
                        };
                        context: Record<string, unknown>;
                        member: {
                            id: string;
                            username: string;
                            reputation: number;
                            avatar: string | null;
                            roleDisplayName: string;
                        };
                        assignMemberId?: string | undefined;
                        commentId?: string | undefined;
                        comment?: {
                            id: string;
                            authorId: string;
                            issueId: string;
                            content: string;
                            createdAt?: Date | undefined;
                            updatedAt?: Date | undefined;
                            parentCommentId?: string | undefined;
                        } | undefined;
                    }[], zod.ZodTypeDef, {
                        id: string;
                        memberId: string;
                        issueId: string;
                        type: "ISSUE_CREATE" | "ISSUE_FIELDS_CHANGE" | "ISSUE_STATE_CHANGE" | "ISSUE_ASSIGN" | "ISSUE_TAGS_UPDATE" | "ISSUE_COMMENT_REPLY" | "ISSUE_TITLE_UPDATE";
                        createdAt: string;
                        updatedAt: string;
                        projectId: string;
                        project: {
                            id: string;
                            name: string;
                            slug: string;
                            key: string;
                            displayName: string;
                        };
                        issue: {
                            id: string;
                            title: string;
                            key: string;
                            tags: string[];
                            state: string;
                            points: number;
                            commentsCount: number;
                            attachmentsCount: number;
                        };
                        context: Record<string, unknown>;
                        member: {
                            id: string;
                            username: string;
                            reputation: number;
                            avatar: string | null;
                            roleDisplayName: string;
                        };
                        assignMemberId?: string | undefined;
                        commentId?: string | undefined;
                        comment?: {
                            id: string;
                            authorId: string;
                            issueId: string;
                            content: string;
                            createdAt?: Date | undefined;
                            updatedAt?: Date | undefined;
                            parentCommentId?: string | undefined;
                        } | undefined;
                    }[]> | zod.ZodObject<{}, "strip", zod.ZodTypeAny, {}, {}>;
                }, "strip", zod.ZodTypeAny, {
                    data: {
                        id: string;
                        memberId: string;
                        issueId: string;
                        type: "ISSUE_CREATE" | "ISSUE_FIELDS_CHANGE" | "ISSUE_STATE_CHANGE" | "ISSUE_ASSIGN" | "ISSUE_TAGS_UPDATE" | "ISSUE_COMMENT_REPLY" | "ISSUE_TITLE_UPDATE";
                        createdAt: string;
                        updatedAt: string;
                        projectId: string;
                        project: {
                            id: string;
                            name: string;
                            slug: string;
                            key: string;
                            displayName: string;
                        };
                        issue: {
                            id: string;
                            title: string;
                            key: string;
                            tags: string[];
                            state: string;
                            points: number;
                            commentsCount: number;
                            attachmentsCount: number;
                        };
                        context: Record<string, unknown>;
                        member: {
                            id: string;
                            username: string;
                            reputation: number;
                            avatar: string | null;
                            roleDisplayName: string;
                        };
                        assignMemberId?: string | undefined;
                        commentId?: string | undefined;
                        comment?: {
                            id: string;
                            authorId: string;
                            issueId: string;
                            content: string;
                            createdAt?: Date | undefined;
                            updatedAt?: Date | undefined;
                            parentCommentId?: string | undefined;
                        } | undefined;
                    }[] | {};
                }, {
                    data: {
                        id: string;
                        memberId: string;
                        issueId: string;
                        type: "ISSUE_CREATE" | "ISSUE_FIELDS_CHANGE" | "ISSUE_STATE_CHANGE" | "ISSUE_ASSIGN" | "ISSUE_TAGS_UPDATE" | "ISSUE_COMMENT_REPLY" | "ISSUE_TITLE_UPDATE";
                        createdAt: string;
                        updatedAt: string;
                        projectId: string;
                        project: {
                            id: string;
                            name: string;
                            slug: string;
                            key: string;
                            displayName: string;
                        };
                        issue: {
                            id: string;
                            title: string;
                            key: string;
                            tags: string[];
                            state: string;
                            points: number;
                            commentsCount: number;
                            attachmentsCount: number;
                        };
                        context: Record<string, unknown>;
                        member: {
                            id: string;
                            username: string;
                            reputation: number;
                            avatar: string | null;
                            roleDisplayName: string;
                        };
                        assignMemberId?: string | undefined;
                        commentId?: string | undefined;
                        comment?: {
                            id: string;
                            authorId: string;
                            issueId: string;
                            content: string;
                            createdAt?: Date | undefined;
                            updatedAt?: Date | undefined;
                            parentCommentId?: string | undefined;
                        } | undefined;
                    }[] | {};
                }>;
                500: zod.ZodObject<{
                    title: zod.ZodString;
                    status: zod.ZodNumber;
                    detail: zod.ZodOptional<zod.ZodString>;
                }, "strip", zod.ZodTypeAny, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }, {
                    status: number;
                    title: string;
                    detail?: string | undefined;
                }>;
            };
        };
    };
};

declare const projectConfidenceContract: {
    getProjectConfidences: {
        metadata: {
            permissions: {
                OR: ("read:confidence:any" | "read:confidence:own")[];
            };
        };
        query: z.ZodObject<{
            /**
             * @type {string} - limit of records
             */
            limit: z.ZodOptional<z.ZodString>;
            /**
             * @type {string} - page number
             */
            page: z.ZodOptional<z.ZodString>;
            /**
             * @type {string} - type of confidence
             */
            projectId: z.ZodOptional<z.ZodString>;
            /**
             * @type {string} - author id
             */
            authorId: z.ZodOptional<z.ZodString>;
            /**
             * @type {string} - member id
             */
            memberId: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            authorId?: string | undefined;
            memberId?: string | undefined;
            limit?: string | undefined;
            page?: string | undefined;
            projectId?: string | undefined;
        }, {
            authorId?: string | undefined;
            memberId?: string | undefined;
            limit?: string | undefined;
            page?: string | undefined;
            projectId?: string | undefined;
        }>;
        summary: "Get project confidences by query";
        method: "GET";
        path: "/api/project-confidences";
        headers: z.ZodObject<{
            authorization: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            authorization: string;
        }, {
            authorization: string;
        }>;
        responses: {
            200: z.ZodObject<{
                data: z.ZodType<{
                    id: string;
                    authorId: string;
                    memberId: string;
                    createdAt: string;
                    updatedAt: string;
                    projectId: string;
                }, z.ZodTypeDef, {
                    id: string;
                    authorId: string;
                    memberId: string;
                    createdAt: string;
                    updatedAt: string;
                    projectId: string;
                }> | z.ZodObject<{}, "strip", z.ZodTypeAny, {}, {}>;
            }, "strip", z.ZodTypeAny, {
                data: {
                    id: string;
                    authorId: string;
                    memberId: string;
                    createdAt: string;
                    updatedAt: string;
                    projectId: string;
                } | {};
            }, {
                data: {
                    id: string;
                    authorId: string;
                    memberId: string;
                    createdAt: string;
                    updatedAt: string;
                    projectId: string;
                } | {};
            }>;
            500: z.ZodObject<{
                message: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                message: string;
            }, {
                message: string;
            }>;
        };
    };
    getProjectConfidenceById: {
        metadata: {
            permissions: {
                OR: ("read:confidence:any" | "read:confidence:own")[];
            };
        };
        summary: "Get project confidence by id";
        method: "GET";
        path: "/api/project-confidences/:confidenceId";
        headers: z.ZodObject<{
            authorization: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            authorization: string;
        }, {
            authorization: string;
        }>;
        responses: {
            200: z.ZodObject<{
                data: z.ZodType<{
                    id: string;
                    authorId: string;
                    memberId: string;
                    createdAt: string;
                    updatedAt: string;
                    projectId: string;
                }, z.ZodTypeDef, {
                    id: string;
                    authorId: string;
                    memberId: string;
                    createdAt: string;
                    updatedAt: string;
                    projectId: string;
                }> | z.ZodObject<{}, "strip", z.ZodTypeAny, {}, {}>;
            }, "strip", z.ZodTypeAny, {
                data: {
                    id: string;
                    authorId: string;
                    memberId: string;
                    createdAt: string;
                    updatedAt: string;
                    projectId: string;
                } | {};
            }, {
                data: {
                    id: string;
                    authorId: string;
                    memberId: string;
                    createdAt: string;
                    updatedAt: string;
                    projectId: string;
                } | {};
            }>;
            404: z.ZodObject<{
                title: z.ZodString;
                status: z.ZodNumber;
                detail: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                status: number;
                title: string;
                detail?: string | undefined;
            }, {
                status: number;
                title: string;
                detail?: string | undefined;
            }>;
            500: z.ZodObject<{
                title: z.ZodString;
                status: z.ZodNumber;
                detail: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                status: number;
                title: string;
                detail?: string | undefined;
            }, {
                status: number;
                title: string;
                detail?: string | undefined;
            }>;
        };
    };
    deleteProjectConfidence: {
        metadata: {
            permissions: {
                OR: ("delete:confidence:any" | "delete:confidence:own" | "manage:project:asModerator")[];
            };
        };
        summary: "Delete project confidence by memberId and projectId";
        method: "DELETE";
        body: z.ZodObject<{
            projectId: z.ZodString;
            memberId: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            memberId: string;
            projectId: string;
        }, {
            memberId: string;
            projectId: string;
        }>;
        path: "/api/project-confidences";
        headers: z.ZodObject<{
            authorization: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            authorization: string;
        }, {
            authorization: string;
        }>;
        responses: {
            204: z.ZodNullable<z.ZodObject<{}, "strip", z.ZodTypeAny, {}, {}>>;
            403: z.ZodObject<{
                title: z.ZodString;
                status: z.ZodNumber;
                detail: z.ZodOptional<z.ZodString>;
                errors: z.ZodOptional<z.ZodArray<z.ZodType<ErrorObject, z.ZodTypeDef, ErrorObject>, "many">>;
            }, "strip", z.ZodTypeAny, {
                status: number;
                title: string;
                errors?: ErrorObject[] | undefined;
                detail?: string | undefined;
            }, {
                status: number;
                title: string;
                errors?: ErrorObject[] | undefined;
                detail?: string | undefined;
            }>;
            409: z.ZodObject<{
                title: z.ZodString;
                status: z.ZodNumber;
                detail: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                status: number;
                title: string;
                detail?: string | undefined;
            }, {
                status: number;
                title: string;
                detail?: string | undefined;
            }>;
            500: z.ZodObject<{
                title: z.ZodString;
                status: z.ZodNumber;
                detail: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                status: number;
                title: string;
                detail?: string | undefined;
            }, {
                status: number;
                title: string;
                detail?: string | undefined;
            }>;
        };
    };
    createMyProjectConfidence: {
        metadata: {
            readonly permissions: "create:confidence:own";
        };
        summary: "Create project confidence record by logged member";
        method: "POST";
        body: z.ZodObject<{
            projectId: z.ZodString;
            memberId: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            memberId: string;
            projectId: string;
        }, {
            memberId: string;
            projectId: string;
        }>;
        path: "/api/members/me/project-confidences";
        headers: z.ZodObject<{
            authorization: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            authorization: string;
        }, {
            authorization: string;
        }>;
        responses: {
            200: z.ZodObject<{
                data: z.ZodType<{
                    id: string;
                    authorId: string;
                    memberId: string;
                    createdAt: string;
                    updatedAt: string;
                    projectId: string;
                }, z.ZodTypeDef, {
                    id: string;
                    authorId: string;
                    memberId: string;
                    createdAt: string;
                    updatedAt: string;
                    projectId: string;
                }> | z.ZodObject<{}, "strip", z.ZodTypeAny, {}, {}>;
            }, "strip", z.ZodTypeAny, {
                data: {
                    id: string;
                    authorId: string;
                    memberId: string;
                    createdAt: string;
                    updatedAt: string;
                    projectId: string;
                } | {};
            }, {
                data: {
                    id: string;
                    authorId: string;
                    memberId: string;
                    createdAt: string;
                    updatedAt: string;
                    projectId: string;
                } | {};
            }>;
            409: z.ZodObject<{
                title: z.ZodString;
                status: z.ZodNumber;
                detail: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                status: number;
                title: string;
                detail?: string | undefined;
            }, {
                status: number;
                title: string;
                detail?: string | undefined;
            }>;
            500: z.ZodObject<{
                title: z.ZodString;
                status: z.ZodNumber;
                detail: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                status: number;
                title: string;
                detail?: string | undefined;
            }, {
                status: number;
                title: string;
                detail?: string | undefined;
            }>;
        };
    };
    createProjectConfidence: {
        metadata: {
            readonly permissions: "create:confidence:any";
        };
        summary: "Create project confidence record managed by moderator or admin";
        method: "POST";
        body: z.ZodObject<{
            authorId: z.ZodString;
            memberId: z.ZodString;
            projectId: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            authorId: string;
            memberId: string;
            projectId: string;
        }, {
            authorId: string;
            memberId: string;
            projectId: string;
        }>;
        path: "/api/project-confidences";
        headers: z.ZodObject<{
            authorization: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            authorization: string;
        }, {
            authorization: string;
        }>;
        responses: {
            200: z.ZodObject<{
                data: z.ZodType<{
                    id: string;
                    authorId: string;
                    memberId: string;
                    createdAt: string;
                    updatedAt: string;
                    projectId: string;
                }, z.ZodTypeDef, {
                    id: string;
                    authorId: string;
                    memberId: string;
                    createdAt: string;
                    updatedAt: string;
                    projectId: string;
                }> | z.ZodObject<{}, "strip", z.ZodTypeAny, {}, {}>;
            }, "strip", z.ZodTypeAny, {
                data: {
                    id: string;
                    authorId: string;
                    memberId: string;
                    createdAt: string;
                    updatedAt: string;
                    projectId: string;
                } | {};
            }, {
                data: {
                    id: string;
                    authorId: string;
                    memberId: string;
                    createdAt: string;
                    updatedAt: string;
                    projectId: string;
                } | {};
            }>;
            409: z.ZodObject<{
                title: z.ZodString;
                status: z.ZodNumber;
                detail: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                status: number;
                title: string;
                detail?: string | undefined;
            }, {
                status: number;
                title: string;
                detail?: string | undefined;
            }>;
            500: z.ZodObject<{
                title: z.ZodString;
                status: z.ZodNumber;
                detail: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                status: number;
                title: string;
                detail?: string | undefined;
            }, {
                status: number;
                title: string;
                detail?: string | undefined;
            }>;
        };
    };
};

declare const projectConfidenceSchema: {
    BasicDTO: z.ZodObject<{
        id: z.ZodString;
        authorId: z.ZodString;
        memberId: z.ZodString;
        projectId: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        id: string;
        authorId: string;
        memberId: string;
        projectId: string;
    }, {
        id: string;
        authorId: string;
        memberId: string;
        projectId: string;
    }>;
    ConfidentialDTO: z.ZodObject<z.objectUtil.extendShape<{
        id: z.ZodString;
        authorId: z.ZodString;
        memberId: z.ZodString;
        projectId: z.ZodString;
    }, {
        createdAt: z.ZodString;
        updatedAt: z.ZodString;
    }>, "strip", z.ZodTypeAny, {
        id: string;
        authorId: string;
        memberId: string;
        createdAt: string;
        updatedAt: string;
        projectId: string;
    }, {
        id: string;
        authorId: string;
        memberId: string;
        createdAt: string;
        updatedAt: string;
        projectId: string;
    }>;
};

declare const issueConfidenceContract: {
    getIssueConfidences: {
        metadata: {
            permissions: {
                OR: ("read:confidence:any" | "read:confidence:own")[];
            };
        };
        query: z.ZodObject<{
            /**
             * @type {string} - limit of records
             */
            limit: z.ZodOptional<z.ZodString>;
            /**
             * @type {string} - page number
             */
            page: z.ZodOptional<z.ZodString>;
            /**
             * @type {string} - issue id to issue or issue
             */
            issueId: z.ZodOptional<z.ZodString>;
            /**
             * @type {string} - author id
             */
            authorId: z.ZodOptional<z.ZodString>;
            /**
             * @type {string} - member id
             */
            memberId: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            authorId?: string | undefined;
            memberId?: string | undefined;
            issueId?: string | undefined;
            limit?: string | undefined;
            page?: string | undefined;
        }, {
            authorId?: string | undefined;
            memberId?: string | undefined;
            issueId?: string | undefined;
            limit?: string | undefined;
            page?: string | undefined;
        }>;
        summary: "Get issue confidences by query";
        method: "GET";
        path: "/api/issue-confidences";
        headers: z.ZodObject<{
            authorization: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            authorization: string;
        }, {
            authorization: string;
        }>;
        responses: {
            200: z.ZodObject<{
                data: z.ZodType<{
                    id: string;
                    authorId: string;
                    memberId: string;
                    issueId: string;
                    createdAt: string;
                    updatedAt: string;
                }, z.ZodTypeDef, {
                    id: string;
                    authorId: string;
                    memberId: string;
                    issueId: string;
                    createdAt: string;
                    updatedAt: string;
                }> | z.ZodObject<{}, "strip", z.ZodTypeAny, {}, {}>;
            }, "strip", z.ZodTypeAny, {
                data: {
                    id: string;
                    authorId: string;
                    memberId: string;
                    issueId: string;
                    createdAt: string;
                    updatedAt: string;
                } | {};
            }, {
                data: {
                    id: string;
                    authorId: string;
                    memberId: string;
                    issueId: string;
                    createdAt: string;
                    updatedAt: string;
                } | {};
            }>;
            500: z.ZodObject<{
                message: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                message: string;
            }, {
                message: string;
            }>;
        };
    };
    getIssueConfidenceById: {
        metadata: {
            permissions: {
                OR: ("read:confidence:any" | "read:confidence:own")[];
            };
        };
        summary: "Get issue confidence by id";
        method: "GET";
        path: "/api/issue-confidences/:confidenceId";
        headers: z.ZodObject<{
            authorization: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            authorization: string;
        }, {
            authorization: string;
        }>;
        responses: {
            200: z.ZodObject<{
                data: z.ZodType<{
                    id: string;
                    authorId: string;
                    memberId: string;
                    issueId: string;
                    createdAt: string;
                    updatedAt: string;
                }, z.ZodTypeDef, {
                    id: string;
                    authorId: string;
                    memberId: string;
                    issueId: string;
                    createdAt: string;
                    updatedAt: string;
                }> | z.ZodObject<{}, "strip", z.ZodTypeAny, {}, {}>;
            }, "strip", z.ZodTypeAny, {
                data: {
                    id: string;
                    authorId: string;
                    memberId: string;
                    issueId: string;
                    createdAt: string;
                    updatedAt: string;
                } | {};
            }, {
                data: {
                    id: string;
                    authorId: string;
                    memberId: string;
                    issueId: string;
                    createdAt: string;
                    updatedAt: string;
                } | {};
            }>;
            404: z.ZodObject<{
                title: z.ZodString;
                status: z.ZodNumber;
                detail: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                status: number;
                title: string;
                detail?: string | undefined;
            }, {
                status: number;
                title: string;
                detail?: string | undefined;
            }>;
            500: z.ZodObject<{
                title: z.ZodString;
                status: z.ZodNumber;
                detail: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                status: number;
                title: string;
                detail?: string | undefined;
            }, {
                status: number;
                title: string;
                detail?: string | undefined;
            }>;
        };
    };
    deleteIssueConfidence: {
        metadata: {
            permissions: {
                OR: ("delete:confidence:any" | "delete:confidence:own" | "manage:project:asModerator")[];
            };
        };
        summary: "Delete issue confidence by memberId and issueId";
        method: "DELETE";
        body: z.ZodObject<{
            issueId: z.ZodString;
            memberId: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            memberId: string;
            issueId: string;
        }, {
            memberId: string;
            issueId: string;
        }>;
        path: "/api/issue-confidences";
        headers: z.ZodObject<{
            authorization: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            authorization: string;
        }, {
            authorization: string;
        }>;
        responses: {
            204: z.ZodNullable<z.ZodObject<{}, "strip", z.ZodTypeAny, {}, {}>>;
            403: z.ZodObject<{
                title: z.ZodString;
                status: z.ZodNumber;
                detail: z.ZodOptional<z.ZodString>;
                errors: z.ZodOptional<z.ZodArray<z.ZodType<ErrorObject, z.ZodTypeDef, ErrorObject>, "many">>;
            }, "strip", z.ZodTypeAny, {
                status: number;
                title: string;
                errors?: ErrorObject[] | undefined;
                detail?: string | undefined;
            }, {
                status: number;
                title: string;
                errors?: ErrorObject[] | undefined;
                detail?: string | undefined;
            }>;
            409: z.ZodObject<{
                title: z.ZodString;
                status: z.ZodNumber;
                detail: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                status: number;
                title: string;
                detail?: string | undefined;
            }, {
                status: number;
                title: string;
                detail?: string | undefined;
            }>;
            500: z.ZodObject<{
                title: z.ZodString;
                status: z.ZodNumber;
                detail: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                status: number;
                title: string;
                detail?: string | undefined;
            }, {
                status: number;
                title: string;
                detail?: string | undefined;
            }>;
        };
    };
    createMyIssueConfidence: {
        metadata: {
            readonly permissions: "create:confidence:own";
        };
        summary: "Create issue confidence record by logged member";
        method: "POST";
        body: z.ZodObject<{
            issueId: z.ZodString;
            memberId: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            memberId: string;
            issueId: string;
        }, {
            memberId: string;
            issueId: string;
        }>;
        path: "/api/members/me/issue-confidences";
        headers: z.ZodObject<{
            authorization: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            authorization: string;
        }, {
            authorization: string;
        }>;
        responses: {
            200: z.ZodObject<{
                data: z.ZodType<{
                    id: string;
                    authorId: string;
                    memberId: string;
                    issueId: string;
                    createdAt: string;
                    updatedAt: string;
                }, z.ZodTypeDef, {
                    id: string;
                    authorId: string;
                    memberId: string;
                    issueId: string;
                    createdAt: string;
                    updatedAt: string;
                }> | z.ZodObject<{}, "strip", z.ZodTypeAny, {}, {}>;
            }, "strip", z.ZodTypeAny, {
                data: {
                    id: string;
                    authorId: string;
                    memberId: string;
                    issueId: string;
                    createdAt: string;
                    updatedAt: string;
                } | {};
            }, {
                data: {
                    id: string;
                    authorId: string;
                    memberId: string;
                    issueId: string;
                    createdAt: string;
                    updatedAt: string;
                } | {};
            }>;
            409: z.ZodObject<{
                title: z.ZodString;
                status: z.ZodNumber;
                detail: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                status: number;
                title: string;
                detail?: string | undefined;
            }, {
                status: number;
                title: string;
                detail?: string | undefined;
            }>;
            500: z.ZodObject<{
                title: z.ZodString;
                status: z.ZodNumber;
                detail: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                status: number;
                title: string;
                detail?: string | undefined;
            }, {
                status: number;
                title: string;
                detail?: string | undefined;
            }>;
        };
    };
    createIssueConfidence: {
        metadata: {
            readonly permissions: "create:confidence:any";
        };
        summary: "Create project confidence record managed by moderator or admin";
        method: "POST";
        body: z.ZodObject<{
            authorId: z.ZodString;
            memberId: z.ZodString;
            issueId: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            authorId: string;
            memberId: string;
            issueId: string;
        }, {
            authorId: string;
            memberId: string;
            issueId: string;
        }>;
        path: "/api/issue-confidences";
        headers: z.ZodObject<{
            authorization: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            authorization: string;
        }, {
            authorization: string;
        }>;
        responses: {
            200: z.ZodObject<{
                data: z.ZodType<{
                    id: string;
                    memberId: {
                        id: string;
                        createdAt: Date;
                        reputation: number;
                        issuesCount: number;
                        repliesCount: number;
                        likesGiven: number;
                        solvedCount: number;
                    };
                    issueId: string;
                    author: {
                        id: string;
                        createdAt: Date;
                        reputation: number;
                        issuesCount: number;
                        repliesCount: number;
                        likesGiven: number;
                        solvedCount: number;
                    };
                }[], z.ZodTypeDef, {
                    id: string;
                    memberId: {
                        id: string;
                        createdAt: Date;
                        reputation: number;
                        issuesCount: number;
                        repliesCount: number;
                        likesGiven: number;
                        solvedCount: number;
                    };
                    issueId: string;
                    author: {
                        id: string;
                        createdAt: Date;
                        reputation: number;
                        issuesCount: number;
                        repliesCount: number;
                        likesGiven: number;
                        solvedCount: number;
                    };
                }[]> | z.ZodObject<{}, "strip", z.ZodTypeAny, {}, {}>;
            }, "strip", z.ZodTypeAny, {
                data: {
                    id: string;
                    memberId: {
                        id: string;
                        createdAt: Date;
                        reputation: number;
                        issuesCount: number;
                        repliesCount: number;
                        likesGiven: number;
                        solvedCount: number;
                    };
                    issueId: string;
                    author: {
                        id: string;
                        createdAt: Date;
                        reputation: number;
                        issuesCount: number;
                        repliesCount: number;
                        likesGiven: number;
                        solvedCount: number;
                    };
                }[] | {};
            }, {
                data: {
                    id: string;
                    memberId: {
                        id: string;
                        createdAt: Date;
                        reputation: number;
                        issuesCount: number;
                        repliesCount: number;
                        likesGiven: number;
                        solvedCount: number;
                    };
                    issueId: string;
                    author: {
                        id: string;
                        createdAt: Date;
                        reputation: number;
                        issuesCount: number;
                        repliesCount: number;
                        likesGiven: number;
                        solvedCount: number;
                    };
                }[] | {};
            }>;
            409: z.ZodObject<{
                title: z.ZodString;
                status: z.ZodNumber;
                detail: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                status: number;
                title: string;
                detail?: string | undefined;
            }, {
                status: number;
                title: string;
                detail?: string | undefined;
            }>;
            500: z.ZodObject<{
                title: z.ZodString;
                status: z.ZodNumber;
                detail: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                status: number;
                title: string;
                detail?: string | undefined;
            }, {
                status: number;
                title: string;
                detail?: string | undefined;
            }>;
        };
    };
};

declare const issueConfidenceSchema$1: {
    BasicDTO: z.ZodObject<{
        id: z.ZodString;
        authorId: z.ZodString;
        memberId: z.ZodString;
        issueId: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        id: string;
        authorId: string;
        memberId: string;
        issueId: string;
    }, {
        id: string;
        authorId: string;
        memberId: string;
        issueId: string;
    }>;
    ConfidentialDTO: z.ZodObject<z.objectUtil.extendShape<{
        id: z.ZodString;
        authorId: z.ZodString;
        memberId: z.ZodString;
        issueId: z.ZodString;
    }, {
        createdAt: z.ZodString;
        updatedAt: z.ZodString;
    }>, "strip", z.ZodTypeAny, {
        id: string;
        authorId: string;
        memberId: string;
        issueId: string;
        createdAt: string;
        updatedAt: string;
    }, {
        id: string;
        authorId: string;
        memberId: string;
        issueId: string;
        createdAt: string;
        updatedAt: string;
    }>;
};

declare const fileContract: {
    getMyFileById: {
        metadata: {
            readonly isPublic: true;
            readonly permissions: "read:file:own";
        };
        summary: "Get file by id";
        method: "GET";
        path: "/api/files/:fileId";
        headers: z.ZodOptional<z.ZodObject<{
            authorization: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            authorization: string;
        }, {
            authorization: string;
        }>>;
        responses: {
            200: z.ZodObject<{
                data: z.ZodType<{
                    id: string;
                    authorId: string;
                    createdAt: Date;
                    updatedAt: Date;
                    isDeleted: boolean;
                    name: string;
                    mimeType: "video/mp4', 'image/png" | "image/jpeg" | "image/gif" | "image/tiff" | "video/ogg" | "video/webm";
                    size: number;
                    slug: string;
                    url: string;
                    key: string;
                    isConfirmed: boolean;
                    alt: string;
                    tags: string[];
                    unassociatedAt?: Date | null | undefined;
                }, z.ZodTypeDef, {
                    id: string;
                    authorId: string;
                    createdAt: Date;
                    updatedAt: Date;
                    isDeleted: boolean;
                    name: string;
                    mimeType: "video/mp4', 'image/png" | "image/jpeg" | "image/gif" | "image/tiff" | "video/ogg" | "video/webm";
                    size: number;
                    slug: string;
                    url: string;
                    key: string;
                    isConfirmed: boolean;
                    alt: string;
                    tags: string[];
                    unassociatedAt?: Date | null | undefined;
                }> | z.ZodObject<{}, "strip", z.ZodTypeAny, {}, {}>;
            }, "strip", z.ZodTypeAny, {
                data: {
                    id: string;
                    authorId: string;
                    createdAt: Date;
                    updatedAt: Date;
                    isDeleted: boolean;
                    name: string;
                    mimeType: "video/mp4', 'image/png" | "image/jpeg" | "image/gif" | "image/tiff" | "video/ogg" | "video/webm";
                    size: number;
                    slug: string;
                    url: string;
                    key: string;
                    isConfirmed: boolean;
                    alt: string;
                    tags: string[];
                    unassociatedAt?: Date | null | undefined;
                } | {};
            }, {
                data: {
                    id: string;
                    authorId: string;
                    createdAt: Date;
                    updatedAt: Date;
                    isDeleted: boolean;
                    name: string;
                    mimeType: "video/mp4', 'image/png" | "image/jpeg" | "image/gif" | "image/tiff" | "video/ogg" | "video/webm";
                    size: number;
                    slug: string;
                    url: string;
                    key: string;
                    isConfirmed: boolean;
                    alt: string;
                    tags: string[];
                    unassociatedAt?: Date | null | undefined;
                } | {};
            }>;
            404: z.ZodObject<{
                title: z.ZodString;
                status: z.ZodNumber;
                detail: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                status: number;
                title: string;
                detail?: string | undefined;
            }, {
                status: number;
                title: string;
                detail?: string | undefined;
            }>;
            500: z.ZodObject<{
                message: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                message: string;
            }, {
                message: string;
            }>;
        };
    };
    uploadMyFiles: {
        metadata: {
            readonly permissions: "create:file:own";
        };
        summary: "Upload my files to the storage";
        method: "POST";
        contentType: "multipart/form-data";
        body: _ts_rest_core.ContractPlainType<{
            /**
             * @type {File[]} - files to upload
             */
            files: File[];
            /**
             * @type {string} - alternative text for the file
             */
            alt?: string;
            /**
             * @type {string} - visibility of the file
             */
            visibility: string;
            /**
             * @type {string[]} - tags of the file
             */
            tags?: string[];
        }>;
        path: "/api/members/me/files";
        headers: z.ZodObject<{
            authorization: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            authorization: string;
        }, {
            authorization: string;
        }>;
        responses: {
            200: z.ZodObject<{
                data: z.ZodType<{
                    id: string;
                    authorId: string;
                    createdAt: Date;
                    updatedAt: Date;
                    isDeleted: boolean;
                    name: string;
                    mimeType: "video/mp4', 'image/png" | "image/jpeg" | "image/gif" | "image/tiff" | "video/ogg" | "video/webm";
                    size: number;
                    slug: string;
                    key: string;
                    isConfirmed: boolean;
                    alt: string;
                    tags: string[];
                    url?: string | undefined;
                    unassociatedAt?: Date | null | undefined;
                }[], z.ZodTypeDef, {
                    id: string;
                    authorId: string;
                    createdAt: Date;
                    updatedAt: Date;
                    isDeleted: boolean;
                    name: string;
                    mimeType: "video/mp4', 'image/png" | "image/jpeg" | "image/gif" | "image/tiff" | "video/ogg" | "video/webm";
                    size: number;
                    slug: string;
                    key: string;
                    isConfirmed: boolean;
                    alt: string;
                    tags: string[];
                    url?: string | undefined;
                    unassociatedAt?: Date | null | undefined;
                }[]> | z.ZodObject<{}, "strip", z.ZodTypeAny, {}, {}>;
            }, "strip", z.ZodTypeAny, {
                data: {
                    id: string;
                    authorId: string;
                    createdAt: Date;
                    updatedAt: Date;
                    isDeleted: boolean;
                    name: string;
                    mimeType: "video/mp4', 'image/png" | "image/jpeg" | "image/gif" | "image/tiff" | "video/ogg" | "video/webm";
                    size: number;
                    slug: string;
                    key: string;
                    isConfirmed: boolean;
                    alt: string;
                    tags: string[];
                    url?: string | undefined;
                    unassociatedAt?: Date | null | undefined;
                }[] | {};
            }, {
                data: {
                    id: string;
                    authorId: string;
                    createdAt: Date;
                    updatedAt: Date;
                    isDeleted: boolean;
                    name: string;
                    mimeType: "video/mp4', 'image/png" | "image/jpeg" | "image/gif" | "image/tiff" | "video/ogg" | "video/webm";
                    size: number;
                    slug: string;
                    key: string;
                    isConfirmed: boolean;
                    alt: string;
                    tags: string[];
                    url?: string | undefined;
                    unassociatedAt?: Date | null | undefined;
                }[] | {};
            }>;
            403: z.ZodObject<{
                title: z.ZodString;
                status: z.ZodNumber;
                detail: z.ZodOptional<z.ZodString>;
                errors: z.ZodOptional<z.ZodArray<z.ZodType<ErrorObject, z.ZodTypeDef, ErrorObject>, "many">>;
            }, "strip", z.ZodTypeAny, {
                status: number;
                title: string;
                errors?: ErrorObject[] | undefined;
                detail?: string | undefined;
            }, {
                status: number;
                title: string;
                errors?: ErrorObject[] | undefined;
                detail?: string | undefined;
            }>;
            500: z.ZodObject<{
                message: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                message: string;
            }, {
                message: string;
            }>;
        };
    };
};

declare const fileSchema: {
    PublicDTO: zod.ZodObject<{
        id: zod.ZodString;
        name: zod.ZodString;
        mimeType: zod.ZodEnum<["video/mp4', 'image/png", "image/jpeg", "image/gif", "image/tiff", "video/ogg", "video/webm"]>;
        size: zod.ZodNumber;
        slug: zod.ZodString;
        url: zod.ZodOptional<zod.ZodString>;
        key: zod.ZodString;
        isConfirmed: zod.ZodBoolean;
        alt: zod.ZodString;
        tags: zod.ZodArray<zod.ZodString, "many">;
    }, "strip", zod.ZodTypeAny, {
        id: string;
        name: string;
        mimeType: "video/mp4', 'image/png" | "image/jpeg" | "image/gif" | "image/tiff" | "video/ogg" | "video/webm";
        size: number;
        slug: string;
        key: string;
        isConfirmed: boolean;
        alt: string;
        tags: string[];
        url?: string | undefined;
    }, {
        id: string;
        name: string;
        mimeType: "video/mp4', 'image/png" | "image/jpeg" | "image/gif" | "image/tiff" | "video/ogg" | "video/webm";
        size: number;
        slug: string;
        key: string;
        isConfirmed: boolean;
        alt: string;
        tags: string[];
        url?: string | undefined;
    }>;
    PubliclDetailsDTO: zod.ZodObject<zod.objectUtil.extendShape<{
        id: zod.ZodString;
        name: zod.ZodString;
        mimeType: zod.ZodEnum<["video/mp4', 'image/png", "image/jpeg", "image/gif", "image/tiff", "video/ogg", "video/webm"]>;
        size: zod.ZodNumber;
        slug: zod.ZodString;
        url: zod.ZodOptional<zod.ZodString>;
        key: zod.ZodString;
        isConfirmed: zod.ZodBoolean;
        alt: zod.ZodString;
        tags: zod.ZodArray<zod.ZodString, "many">;
    }, {
        url: zod.ZodString;
    }>, "strip", zod.ZodTypeAny, {
        id: string;
        name: string;
        mimeType: "video/mp4', 'image/png" | "image/jpeg" | "image/gif" | "image/tiff" | "video/ogg" | "video/webm";
        size: number;
        slug: string;
        url: string;
        key: string;
        isConfirmed: boolean;
        alt: string;
        tags: string[];
    }, {
        id: string;
        name: string;
        mimeType: "video/mp4', 'image/png" | "image/jpeg" | "image/gif" | "image/tiff" | "video/ogg" | "video/webm";
        size: number;
        slug: string;
        url: string;
        key: string;
        isConfirmed: boolean;
        alt: string;
        tags: string[];
    }>;
    RegularDTO: zod.ZodObject<{
        id: zod.ZodString;
        name: zod.ZodString;
        mimeType: zod.ZodEnum<["video/mp4', 'image/png", "image/jpeg", "image/gif", "image/tiff", "video/ogg", "video/webm"]>;
        size: zod.ZodNumber;
        slug: zod.ZodString;
        url: zod.ZodOptional<zod.ZodString>;
        key: zod.ZodString;
        isConfirmed: zod.ZodBoolean;
        alt: zod.ZodString;
        tags: zod.ZodArray<zod.ZodString, "many">;
    }, "strip", zod.ZodTypeAny, {
        id: string;
        name: string;
        mimeType: "video/mp4', 'image/png" | "image/jpeg" | "image/gif" | "image/tiff" | "video/ogg" | "video/webm";
        size: number;
        slug: string;
        key: string;
        isConfirmed: boolean;
        alt: string;
        tags: string[];
        url?: string | undefined;
    }, {
        id: string;
        name: string;
        mimeType: "video/mp4', 'image/png" | "image/jpeg" | "image/gif" | "image/tiff" | "video/ogg" | "video/webm";
        size: number;
        slug: string;
        key: string;
        isConfirmed: boolean;
        alt: string;
        tags: string[];
        url?: string | undefined;
    }>;
    RegularDetailsDTO: zod.ZodObject<zod.objectUtil.extendShape<{
        id: zod.ZodString;
        name: zod.ZodString;
        mimeType: zod.ZodEnum<["video/mp4', 'image/png", "image/jpeg", "image/gif", "image/tiff", "video/ogg", "video/webm"]>;
        size: zod.ZodNumber;
        slug: zod.ZodString;
        url: zod.ZodOptional<zod.ZodString>;
        key: zod.ZodString;
        isConfirmed: zod.ZodBoolean;
        alt: zod.ZodString;
        tags: zod.ZodArray<zod.ZodString, "many">;
    }, {
        url: zod.ZodString;
    }>, "strip", zod.ZodTypeAny, {
        id: string;
        name: string;
        mimeType: "video/mp4', 'image/png" | "image/jpeg" | "image/gif" | "image/tiff" | "video/ogg" | "video/webm";
        size: number;
        slug: string;
        url: string;
        key: string;
        isConfirmed: boolean;
        alt: string;
        tags: string[];
    }, {
        id: string;
        name: string;
        mimeType: "video/mp4', 'image/png" | "image/jpeg" | "image/gif" | "image/tiff" | "video/ogg" | "video/webm";
        size: number;
        slug: string;
        url: string;
        key: string;
        isConfirmed: boolean;
        alt: string;
        tags: string[];
    }>;
    ConfidentialDTO: zod.ZodObject<zod.objectUtil.extendShape<{
        id: zod.ZodString;
        name: zod.ZodString;
        mimeType: zod.ZodEnum<["video/mp4', 'image/png", "image/jpeg", "image/gif", "image/tiff", "video/ogg", "video/webm"]>;
        size: zod.ZodNumber;
        slug: zod.ZodString;
        url: zod.ZodOptional<zod.ZodString>;
        key: zod.ZodString;
        isConfirmed: zod.ZodBoolean;
        alt: zod.ZodString;
        tags: zod.ZodArray<zod.ZodString, "many">;
    }, {
        isDeleted: zod.ZodBoolean;
        authorId: zod.ZodString;
        unassociatedAt: zod.ZodOptional<zod.ZodNullable<zod.ZodDate>>;
        createdAt: zod.ZodDate;
        updatedAt: zod.ZodDate;
    }>, "strip", zod.ZodTypeAny, {
        id: string;
        authorId: string;
        createdAt: Date;
        updatedAt: Date;
        isDeleted: boolean;
        name: string;
        mimeType: "video/mp4', 'image/png" | "image/jpeg" | "image/gif" | "image/tiff" | "video/ogg" | "video/webm";
        size: number;
        slug: string;
        key: string;
        isConfirmed: boolean;
        alt: string;
        tags: string[];
        url?: string | undefined;
        unassociatedAt?: Date | null | undefined;
    }, {
        id: string;
        authorId: string;
        createdAt: Date;
        updatedAt: Date;
        isDeleted: boolean;
        name: string;
        mimeType: "video/mp4', 'image/png" | "image/jpeg" | "image/gif" | "image/tiff" | "video/ogg" | "video/webm";
        size: number;
        slug: string;
        key: string;
        isConfirmed: boolean;
        alt: string;
        tags: string[];
        url?: string | undefined;
        unassociatedAt?: Date | null | undefined;
    }>;
    ConfidentialDetailsDTO: zod.ZodObject<zod.objectUtil.extendShape<zod.objectUtil.extendShape<{
        id: zod.ZodString;
        name: zod.ZodString;
        mimeType: zod.ZodEnum<["video/mp4', 'image/png", "image/jpeg", "image/gif", "image/tiff", "video/ogg", "video/webm"]>;
        size: zod.ZodNumber;
        slug: zod.ZodString;
        url: zod.ZodOptional<zod.ZodString>;
        key: zod.ZodString;
        isConfirmed: zod.ZodBoolean;
        alt: zod.ZodString;
        tags: zod.ZodArray<zod.ZodString, "many">;
    }, {
        isDeleted: zod.ZodBoolean;
        authorId: zod.ZodString;
        unassociatedAt: zod.ZodOptional<zod.ZodNullable<zod.ZodDate>>;
        createdAt: zod.ZodDate;
        updatedAt: zod.ZodDate;
    }>, {
        url: zod.ZodString;
    }>, "strip", zod.ZodTypeAny, {
        id: string;
        authorId: string;
        createdAt: Date;
        updatedAt: Date;
        isDeleted: boolean;
        name: string;
        mimeType: "video/mp4', 'image/png" | "image/jpeg" | "image/gif" | "image/tiff" | "video/ogg" | "video/webm";
        size: number;
        slug: string;
        url: string;
        key: string;
        isConfirmed: boolean;
        alt: string;
        tags: string[];
        unassociatedAt?: Date | null | undefined;
    }, {
        id: string;
        authorId: string;
        createdAt: Date;
        updatedAt: Date;
        isDeleted: boolean;
        name: string;
        mimeType: "video/mp4', 'image/png" | "image/jpeg" | "image/gif" | "image/tiff" | "video/ogg" | "video/webm";
        size: number;
        slug: string;
        url: string;
        key: string;
        isConfirmed: boolean;
        alt: string;
        tags: string[];
        unassociatedAt?: Date | null | undefined;
    }>;
};

declare const memberContract: {
    getCurrentMember: {
        metadata: {
            permissions: "read:memberConfidential:own";
        };
        summary: "Get the current member";
        method: "GET";
        path: "/api/members/me";
        headers: z.ZodObject<{
            authorization: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            authorization: string;
        }, {
            authorization: string;
        }>;
        responses: {
            200: z.ZodObject<{
                data: z.ZodType<{
                    id: string;
                    createdAt: Date;
                    updatedAt: Date;
                    userId: string;
                    reputation: number;
                    issuesCount: number;
                    repliesCount: number;
                    likesGiven: number;
                    solvedCount: number;
                    reportsCount: number;
                    reportedOwnIssuesCount: number;
                    reportedOwnRepliesCount: number;
                }, z.ZodTypeDef, {
                    id: string;
                    createdAt: Date;
                    updatedAt: Date;
                    userId: string;
                    reputation: number;
                    issuesCount: number;
                    repliesCount: number;
                    likesGiven: number;
                    solvedCount: number;
                    reportsCount: number;
                    reportedOwnIssuesCount: number;
                    reportedOwnRepliesCount: number;
                }> | z.ZodObject<{}, "strip", z.ZodTypeAny, {}, {}>;
            }, "strip", z.ZodTypeAny, {
                data: {
                    id: string;
                    createdAt: Date;
                    updatedAt: Date;
                    userId: string;
                    reputation: number;
                    issuesCount: number;
                    repliesCount: number;
                    likesGiven: number;
                    solvedCount: number;
                    reportsCount: number;
                    reportedOwnIssuesCount: number;
                    reportedOwnRepliesCount: number;
                } | {};
            }, {
                data: {
                    id: string;
                    createdAt: Date;
                    updatedAt: Date;
                    userId: string;
                    reputation: number;
                    issuesCount: number;
                    repliesCount: number;
                    likesGiven: number;
                    solvedCount: number;
                    reportsCount: number;
                    reportedOwnIssuesCount: number;
                    reportedOwnRepliesCount: number;
                } | {};
            }>;
            500: z.ZodObject<{
                title: z.ZodString;
                status: z.ZodNumber;
                detail: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                status: number;
                title: string;
                detail?: string | undefined;
            }, {
                status: number;
                title: string;
                detail?: string | undefined;
            }>;
        };
    };
    geMemberByUsername: {
        metadata: {
            isPublic: boolean;
            permissions: {};
        };
        summary: "Get a member by username";
        method: "GET";
        path: "/api/members/by/username/:username";
        headers: z.ZodOptional<z.ZodObject<{
            authorization: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            authorization: string;
        }, {
            authorization: string;
        }>>;
        responses: {
            200: z.ZodObject<{
                data: z.ZodType<{
                    id: string;
                    createdAt: Date;
                    reputation: number;
                    issuesCount: number;
                    repliesCount: number;
                    likesGiven: number;
                    solvedCount: number;
                } | {
                    id: string;
                    createdAt: Date;
                    updatedAt: Date;
                    userId: string;
                    reputation: number;
                    issuesCount: number;
                    repliesCount: number;
                    likesGiven: number;
                    solvedCount: number;
                    reportsCount: number;
                    reportedOwnIssuesCount: number;
                    reportedOwnRepliesCount: number;
                }, z.ZodTypeDef, {
                    id: string;
                    createdAt: Date;
                    reputation: number;
                    issuesCount: number;
                    repliesCount: number;
                    likesGiven: number;
                    solvedCount: number;
                } | {
                    id: string;
                    createdAt: Date;
                    updatedAt: Date;
                    userId: string;
                    reputation: number;
                    issuesCount: number;
                    repliesCount: number;
                    likesGiven: number;
                    solvedCount: number;
                    reportsCount: number;
                    reportedOwnIssuesCount: number;
                    reportedOwnRepliesCount: number;
                }> | z.ZodObject<{}, "strip", z.ZodTypeAny, {}, {}>;
            }, "strip", z.ZodTypeAny, {
                data: {
                    id: string;
                    createdAt: Date;
                    reputation: number;
                    issuesCount: number;
                    repliesCount: number;
                    likesGiven: number;
                    solvedCount: number;
                } | {
                    id: string;
                    createdAt: Date;
                    updatedAt: Date;
                    userId: string;
                    reputation: number;
                    issuesCount: number;
                    repliesCount: number;
                    likesGiven: number;
                    solvedCount: number;
                    reportsCount: number;
                    reportedOwnIssuesCount: number;
                    reportedOwnRepliesCount: number;
                } | {};
            }, {
                data: {
                    id: string;
                    createdAt: Date;
                    reputation: number;
                    issuesCount: number;
                    repliesCount: number;
                    likesGiven: number;
                    solvedCount: number;
                } | {
                    id: string;
                    createdAt: Date;
                    updatedAt: Date;
                    userId: string;
                    reputation: number;
                    issuesCount: number;
                    repliesCount: number;
                    likesGiven: number;
                    solvedCount: number;
                    reportsCount: number;
                    reportedOwnIssuesCount: number;
                    reportedOwnRepliesCount: number;
                } | {};
            }>;
            404: z.ZodObject<{
                title: z.ZodString;
                status: z.ZodNumber;
                detail: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                status: number;
                title: string;
                detail?: string | undefined;
            }, {
                status: number;
                title: string;
                detail?: string | undefined;
            }>;
            500: z.ZodObject<{
                title: z.ZodString;
                status: z.ZodNumber;
                detail: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                status: number;
                title: string;
                detail?: string | undefined;
            }, {
                status: number;
                title: string;
                detail?: string | undefined;
            }>;
        };
    };
    getMemberById: {
        metadata: {
            isPublic: boolean;
            permissions: {};
        };
        summary: "Get a member by id";
        method: "GET";
        path: "/api/members/by/id/:memberId";
        headers: z.ZodOptional<z.ZodObject<{
            authorization: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            authorization: string;
        }, {
            authorization: string;
        }>>;
        responses: {
            200: z.ZodObject<{
                data: z.ZodType<{
                    id: string;
                    createdAt: Date;
                    reputation: number;
                    issuesCount: number;
                    repliesCount: number;
                    likesGiven: number;
                    solvedCount: number;
                } | {
                    id: string;
                    createdAt: Date;
                    updatedAt: Date;
                    userId: string;
                    reputation: number;
                    issuesCount: number;
                    repliesCount: number;
                    likesGiven: number;
                    solvedCount: number;
                    reportsCount: number;
                    reportedOwnIssuesCount: number;
                    reportedOwnRepliesCount: number;
                }, z.ZodTypeDef, {
                    id: string;
                    createdAt: Date;
                    reputation: number;
                    issuesCount: number;
                    repliesCount: number;
                    likesGiven: number;
                    solvedCount: number;
                } | {
                    id: string;
                    createdAt: Date;
                    updatedAt: Date;
                    userId: string;
                    reputation: number;
                    issuesCount: number;
                    repliesCount: number;
                    likesGiven: number;
                    solvedCount: number;
                    reportsCount: number;
                    reportedOwnIssuesCount: number;
                    reportedOwnRepliesCount: number;
                }> | z.ZodObject<{}, "strip", z.ZodTypeAny, {}, {}>;
            }, "strip", z.ZodTypeAny, {
                data: {
                    id: string;
                    createdAt: Date;
                    reputation: number;
                    issuesCount: number;
                    repliesCount: number;
                    likesGiven: number;
                    solvedCount: number;
                } | {
                    id: string;
                    createdAt: Date;
                    updatedAt: Date;
                    userId: string;
                    reputation: number;
                    issuesCount: number;
                    repliesCount: number;
                    likesGiven: number;
                    solvedCount: number;
                    reportsCount: number;
                    reportedOwnIssuesCount: number;
                    reportedOwnRepliesCount: number;
                } | {};
            }, {
                data: {
                    id: string;
                    createdAt: Date;
                    reputation: number;
                    issuesCount: number;
                    repliesCount: number;
                    likesGiven: number;
                    solvedCount: number;
                } | {
                    id: string;
                    createdAt: Date;
                    updatedAt: Date;
                    userId: string;
                    reputation: number;
                    issuesCount: number;
                    repliesCount: number;
                    likesGiven: number;
                    solvedCount: number;
                    reportsCount: number;
                    reportedOwnIssuesCount: number;
                    reportedOwnRepliesCount: number;
                } | {};
            }>;
            404: z.ZodObject<{
                title: z.ZodString;
                status: z.ZodNumber;
                detail: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                status: number;
                title: string;
                detail?: string | undefined;
            }, {
                status: number;
                title: string;
                detail?: string | undefined;
            }>;
            500: z.ZodObject<{
                title: z.ZodString;
                status: z.ZodNumber;
                detail: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                status: number;
                title: string;
                detail?: string | undefined;
            }, {
                status: number;
                title: string;
                detail?: string | undefined;
            }>;
        };
    };
    getMembers: {
        metadata: {
            isPublic: boolean;
        };
        query: z.ZodObject<{
            /**
             * @type {string} - page number, default is 1
             */
            page: z.ZodOptional<z.ZodString>;
            /**
             * @type {string} - limit of items per page, default and max is 50
             */
            limit: z.ZodOptional<z.ZodString>;
            /**
             * @type {string} - search string, includes username, email, roleName, roleDisplayName
             */
            search: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            search?: string | undefined;
            limit?: string | undefined;
            page?: string | undefined;
        }, {
            search?: string | undefined;
            limit?: string | undefined;
            page?: string | undefined;
        }>;
        summary: "Get all members";
        method: "GET";
        path: "/api/members";
        headers: z.ZodOptional<z.ZodObject<{
            authorization: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            authorization: string;
        }, {
            authorization: string;
        }>>;
        responses: {
            200: z.ZodObject<{
                data: z.ZodType<{
                    id: string;
                    createdAt: Date;
                    reputation: number;
                    issuesCount: number;
                    repliesCount: number;
                    likesGiven: number;
                    solvedCount: number;
                }[], z.ZodTypeDef, {
                    id: string;
                    createdAt: Date;
                    reputation: number;
                    issuesCount: number;
                    repliesCount: number;
                    likesGiven: number;
                    solvedCount: number;
                }[]> | z.ZodObject<{}, "strip", z.ZodTypeAny, {}, {}>;
            }, "strip", z.ZodTypeAny, {
                data: {
                    id: string;
                    createdAt: Date;
                    reputation: number;
                    issuesCount: number;
                    repliesCount: number;
                    likesGiven: number;
                    solvedCount: number;
                }[] | {};
            }, {
                data: {
                    id: string;
                    createdAt: Date;
                    reputation: number;
                    issuesCount: number;
                    repliesCount: number;
                    likesGiven: number;
                    solvedCount: number;
                }[] | {};
            }>;
            500: z.ZodObject<{
                title: z.ZodString;
                status: z.ZodNumber;
                detail: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                status: number;
                title: string;
                detail?: string | undefined;
            }, {
                status: number;
                title: string;
                detail?: string | undefined;
            }>;
        };
    };
};

declare const memberSchema: {
    PublicDTO: z.ZodObject<{
        id: z.ZodString;
        reputation: z.ZodNumber;
        issuesCount: z.ZodNumber;
        repliesCount: z.ZodNumber;
        likesGiven: z.ZodNumber;
        solvedCount: z.ZodNumber;
        createdAt: z.ZodDate;
    }, "strip", z.ZodTypeAny, {
        id: string;
        createdAt: Date;
        reputation: number;
        issuesCount: number;
        repliesCount: number;
        likesGiven: number;
        solvedCount: number;
    }, {
        id: string;
        createdAt: Date;
        reputation: number;
        issuesCount: number;
        repliesCount: number;
        likesGiven: number;
        solvedCount: number;
    }>;
    BasicDTO: z.ZodObject<{
        id: z.ZodString;
        reputation: z.ZodNumber;
        issuesCount: z.ZodNumber;
        repliesCount: z.ZodNumber;
        likesGiven: z.ZodNumber;
        solvedCount: z.ZodNumber;
        createdAt: z.ZodDate;
    }, "strip", z.ZodTypeAny, {
        id: string;
        createdAt: Date;
        reputation: number;
        issuesCount: number;
        repliesCount: number;
        likesGiven: number;
        solvedCount: number;
    }, {
        id: string;
        createdAt: Date;
        reputation: number;
        issuesCount: number;
        repliesCount: number;
        likesGiven: number;
        solvedCount: number;
    }>;
    ConfidentialDTO: z.ZodObject<z.objectUtil.extendShape<{
        id: z.ZodString;
        reputation: z.ZodNumber;
        issuesCount: z.ZodNumber;
        repliesCount: z.ZodNumber;
        likesGiven: z.ZodNumber;
        solvedCount: z.ZodNumber;
        createdAt: z.ZodDate;
    }, {
        userId: z.ZodString;
        reportsCount: z.ZodNumber;
        reportedOwnIssuesCount: z.ZodNumber;
        reportedOwnRepliesCount: z.ZodNumber;
        updatedAt: z.ZodDate;
    }>, "strip", z.ZodTypeAny, {
        id: string;
        createdAt: Date;
        updatedAt: Date;
        userId: string;
        reputation: number;
        issuesCount: number;
        repliesCount: number;
        likesGiven: number;
        solvedCount: number;
        reportsCount: number;
        reportedOwnIssuesCount: number;
        reportedOwnRepliesCount: number;
    }, {
        id: string;
        createdAt: Date;
        updatedAt: Date;
        userId: string;
        reputation: number;
        issuesCount: number;
        repliesCount: number;
        likesGiven: number;
        solvedCount: number;
        reportsCount: number;
        reportedOwnIssuesCount: number;
        reportedOwnRepliesCount: number;
    }>;
    PublicMemberDetailsDTO: z.ZodObject<{
        id: z.ZodString;
        avatar: z.ZodObject<{
            id: z.ZodString;
            name: z.ZodString;
            mimeType: z.ZodEnum<["video/mp4', 'image/png", "image/jpeg", "image/gif", "image/tiff", "video/ogg", "video/webm"]>;
            size: z.ZodNumber;
            slug: z.ZodString;
            url: z.ZodOptional<z.ZodString>;
            key: z.ZodString;
            isConfirmed: z.ZodBoolean;
            alt: z.ZodString;
            tags: z.ZodArray<z.ZodString, "many">;
        }, "strip", z.ZodTypeAny, {
            id: string;
            name: string;
            mimeType: "video/mp4', 'image/png" | "image/jpeg" | "image/gif" | "image/tiff" | "video/ogg" | "video/webm";
            size: number;
            slug: string;
            key: string;
            isConfirmed: boolean;
            alt: string;
            tags: string[];
            url?: string | undefined;
        }, {
            id: string;
            name: string;
            mimeType: "video/mp4', 'image/png" | "image/jpeg" | "image/gif" | "image/tiff" | "video/ogg" | "video/webm";
            size: number;
            slug: string;
            key: string;
            isConfirmed: boolean;
            alt: string;
            tags: string[];
            url?: string | undefined;
        }>;
        user: z.ZodObject<{
            username: z.ZodString;
            avatarId: z.ZodOptional<z.ZodString>;
            roleId: z.ZodString;
            isVerified: z.ZodBoolean;
            isDeleted: z.ZodBoolean;
            isSuspended: z.ZodBoolean;
            createdAt: z.ZodOptional<z.ZodDate>;
        }, "strip", z.ZodTypeAny, {
            username: string;
            roleId: string;
            isVerified: boolean;
            isDeleted: boolean;
            isSuspended: boolean;
            createdAt?: Date | undefined;
            avatarId?: string | undefined;
        }, {
            username: string;
            roleId: string;
            isVerified: boolean;
            isDeleted: boolean;
            isSuspended: boolean;
            createdAt?: Date | undefined;
            avatarId?: string | undefined;
        }>;
        role: z.ZodObject<{
            username: z.ZodString;
            avatarId: z.ZodOptional<z.ZodString>;
            roleId: z.ZodString;
            isVerified: z.ZodBoolean;
            isDeleted: z.ZodBoolean;
            isSuspended: z.ZodBoolean;
            createdAt: z.ZodOptional<z.ZodDate>;
        }, "strip", z.ZodTypeAny, {
            username: string;
            roleId: string;
            isVerified: boolean;
            isDeleted: boolean;
            isSuspended: boolean;
            createdAt?: Date | undefined;
            avatarId?: string | undefined;
        }, {
            username: string;
            roleId: string;
            isVerified: boolean;
            isDeleted: boolean;
            isSuspended: boolean;
            createdAt?: Date | undefined;
            avatarId?: string | undefined;
        }>;
        reputation: z.ZodNumber;
        issuesCount: z.ZodNumber;
        repliesCount: z.ZodNumber;
        likesGiven: z.ZodNumber;
        solvedCount: z.ZodNumber;
        isVerified: z.ZodBoolean;
        isDeleted: z.ZodBoolean;
        isSuspended: z.ZodBoolean;
        createdAt: z.ZodDate;
    }, "strip", z.ZodTypeAny, {
        id: string;
        createdAt: Date;
        isVerified: boolean;
        isDeleted: boolean;
        isSuspended: boolean;
        reputation: number;
        issuesCount: number;
        repliesCount: number;
        likesGiven: number;
        solvedCount: number;
        avatar: {
            id: string;
            name: string;
            mimeType: "video/mp4', 'image/png" | "image/jpeg" | "image/gif" | "image/tiff" | "video/ogg" | "video/webm";
            size: number;
            slug: string;
            key: string;
            isConfirmed: boolean;
            alt: string;
            tags: string[];
            url?: string | undefined;
        };
        user: {
            username: string;
            roleId: string;
            isVerified: boolean;
            isDeleted: boolean;
            isSuspended: boolean;
            createdAt?: Date | undefined;
            avatarId?: string | undefined;
        };
        role: {
            username: string;
            roleId: string;
            isVerified: boolean;
            isDeleted: boolean;
            isSuspended: boolean;
            createdAt?: Date | undefined;
            avatarId?: string | undefined;
        };
    }, {
        id: string;
        createdAt: Date;
        isVerified: boolean;
        isDeleted: boolean;
        isSuspended: boolean;
        reputation: number;
        issuesCount: number;
        repliesCount: number;
        likesGiven: number;
        solvedCount: number;
        avatar: {
            id: string;
            name: string;
            mimeType: "video/mp4', 'image/png" | "image/jpeg" | "image/gif" | "image/tiff" | "video/ogg" | "video/webm";
            size: number;
            slug: string;
            key: string;
            isConfirmed: boolean;
            alt: string;
            tags: string[];
            url?: string | undefined;
        };
        user: {
            username: string;
            roleId: string;
            isVerified: boolean;
            isDeleted: boolean;
            isSuspended: boolean;
            createdAt?: Date | undefined;
            avatarId?: string | undefined;
        };
        role: {
            username: string;
            roleId: string;
            isVerified: boolean;
            isDeleted: boolean;
            isSuspended: boolean;
            createdAt?: Date | undefined;
            avatarId?: string | undefined;
        };
    }>;
    RegularMemberDetailsDTO: z.ZodObject<z.objectUtil.extendShape<Omit<{
        id: z.ZodString;
        avatar: z.ZodObject<{
            id: z.ZodString;
            name: z.ZodString;
            mimeType: z.ZodEnum<["video/mp4', 'image/png", "image/jpeg", "image/gif", "image/tiff", "video/ogg", "video/webm"]>;
            size: z.ZodNumber;
            slug: z.ZodString;
            url: z.ZodOptional<z.ZodString>;
            key: z.ZodString;
            isConfirmed: z.ZodBoolean;
            alt: z.ZodString;
            tags: z.ZodArray<z.ZodString, "many">;
        }, "strip", z.ZodTypeAny, {
            id: string;
            name: string;
            mimeType: "video/mp4', 'image/png" | "image/jpeg" | "image/gif" | "image/tiff" | "video/ogg" | "video/webm";
            size: number;
            slug: string;
            key: string;
            isConfirmed: boolean;
            alt: string;
            tags: string[];
            url?: string | undefined;
        }, {
            id: string;
            name: string;
            mimeType: "video/mp4', 'image/png" | "image/jpeg" | "image/gif" | "image/tiff" | "video/ogg" | "video/webm";
            size: number;
            slug: string;
            key: string;
            isConfirmed: boolean;
            alt: string;
            tags: string[];
            url?: string | undefined;
        }>;
        user: z.ZodObject<{
            username: z.ZodString;
            avatarId: z.ZodOptional<z.ZodString>;
            roleId: z.ZodString;
            isVerified: z.ZodBoolean;
            isDeleted: z.ZodBoolean;
            isSuspended: z.ZodBoolean;
            createdAt: z.ZodOptional<z.ZodDate>;
        }, "strip", z.ZodTypeAny, {
            username: string;
            roleId: string;
            isVerified: boolean;
            isDeleted: boolean;
            isSuspended: boolean;
            createdAt?: Date | undefined;
            avatarId?: string | undefined;
        }, {
            username: string;
            roleId: string;
            isVerified: boolean;
            isDeleted: boolean;
            isSuspended: boolean;
            createdAt?: Date | undefined;
            avatarId?: string | undefined;
        }>;
        role: z.ZodObject<{
            username: z.ZodString;
            avatarId: z.ZodOptional<z.ZodString>;
            roleId: z.ZodString;
            isVerified: z.ZodBoolean;
            isDeleted: z.ZodBoolean;
            isSuspended: z.ZodBoolean;
            createdAt: z.ZodOptional<z.ZodDate>;
        }, "strip", z.ZodTypeAny, {
            username: string;
            roleId: string;
            isVerified: boolean;
            isDeleted: boolean;
            isSuspended: boolean;
            createdAt?: Date | undefined;
            avatarId?: string | undefined;
        }, {
            username: string;
            roleId: string;
            isVerified: boolean;
            isDeleted: boolean;
            isSuspended: boolean;
            createdAt?: Date | undefined;
            avatarId?: string | undefined;
        }>;
        reputation: z.ZodNumber;
        issuesCount: z.ZodNumber;
        repliesCount: z.ZodNumber;
        likesGiven: z.ZodNumber;
        solvedCount: z.ZodNumber;
        isVerified: z.ZodBoolean;
        isDeleted: z.ZodBoolean;
        isSuspended: z.ZodBoolean;
        createdAt: z.ZodDate;
    }, "avatar" | "user" | "role">, {
        avatar: z.ZodObject<{
            username: z.ZodString;
            avatarId: z.ZodOptional<z.ZodString>;
            roleId: z.ZodString;
            isVerified: z.ZodBoolean;
            isDeleted: z.ZodBoolean;
            isSuspended: z.ZodBoolean;
            createdAt: z.ZodOptional<z.ZodDate>;
        }, "strip", z.ZodTypeAny, {
            username: string;
            roleId: string;
            isVerified: boolean;
            isDeleted: boolean;
            isSuspended: boolean;
            createdAt?: Date | undefined;
            avatarId?: string | undefined;
        }, {
            username: string;
            roleId: string;
            isVerified: boolean;
            isDeleted: boolean;
            isSuspended: boolean;
            createdAt?: Date | undefined;
            avatarId?: string | undefined;
        }>;
        role: z.ZodObject<{
            username: z.ZodString;
            avatarId: z.ZodOptional<z.ZodString>;
            roleId: z.ZodString;
            isVerified: z.ZodBoolean;
            isDeleted: z.ZodBoolean;
            isSuspended: z.ZodBoolean;
            createdAt: z.ZodOptional<z.ZodDate>;
        }, "strip", z.ZodTypeAny, {
            username: string;
            roleId: string;
            isVerified: boolean;
            isDeleted: boolean;
            isSuspended: boolean;
            createdAt?: Date | undefined;
            avatarId?: string | undefined;
        }, {
            username: string;
            roleId: string;
            isVerified: boolean;
            isDeleted: boolean;
            isSuspended: boolean;
            createdAt?: Date | undefined;
            avatarId?: string | undefined;
        }>;
        user: z.ZodObject<{
            username: z.ZodString;
            avatarId: z.ZodOptional<z.ZodString>;
            roleId: z.ZodString;
            isVerified: z.ZodBoolean;
            isDeleted: z.ZodBoolean;
            isSuspended: z.ZodBoolean;
            createdAt: z.ZodOptional<z.ZodDate>;
        }, "strip", z.ZodTypeAny, {
            username: string;
            roleId: string;
            isVerified: boolean;
            isDeleted: boolean;
            isSuspended: boolean;
            createdAt?: Date | undefined;
            avatarId?: string | undefined;
        }, {
            username: string;
            roleId: string;
            isVerified: boolean;
            isDeleted: boolean;
            isSuspended: boolean;
            createdAt?: Date | undefined;
            avatarId?: string | undefined;
        }>;
    }>, "strip", z.ZodTypeAny, {
        id: string;
        createdAt: Date;
        isVerified: boolean;
        isDeleted: boolean;
        isSuspended: boolean;
        reputation: number;
        issuesCount: number;
        repliesCount: number;
        likesGiven: number;
        solvedCount: number;
        avatar: {
            username: string;
            roleId: string;
            isVerified: boolean;
            isDeleted: boolean;
            isSuspended: boolean;
            createdAt?: Date | undefined;
            avatarId?: string | undefined;
        };
        user: {
            username: string;
            roleId: string;
            isVerified: boolean;
            isDeleted: boolean;
            isSuspended: boolean;
            createdAt?: Date | undefined;
            avatarId?: string | undefined;
        };
        role: {
            username: string;
            roleId: string;
            isVerified: boolean;
            isDeleted: boolean;
            isSuspended: boolean;
            createdAt?: Date | undefined;
            avatarId?: string | undefined;
        };
    }, {
        id: string;
        createdAt: Date;
        isVerified: boolean;
        isDeleted: boolean;
        isSuspended: boolean;
        reputation: number;
        issuesCount: number;
        repliesCount: number;
        likesGiven: number;
        solvedCount: number;
        avatar: {
            username: string;
            roleId: string;
            isVerified: boolean;
            isDeleted: boolean;
            isSuspended: boolean;
            createdAt?: Date | undefined;
            avatarId?: string | undefined;
        };
        user: {
            username: string;
            roleId: string;
            isVerified: boolean;
            isDeleted: boolean;
            isSuspended: boolean;
            createdAt?: Date | undefined;
            avatarId?: string | undefined;
        };
        role: {
            username: string;
            roleId: string;
            isVerified: boolean;
            isDeleted: boolean;
            isSuspended: boolean;
            createdAt?: Date | undefined;
            avatarId?: string | undefined;
        };
    }>;
    ConfidentialMemberDetailsDTO: z.ZodObject<z.objectUtil.extendShape<Omit<z.objectUtil.extendShape<Omit<{
        id: z.ZodString;
        avatar: z.ZodObject<{
            id: z.ZodString;
            name: z.ZodString;
            mimeType: z.ZodEnum<["video/mp4', 'image/png", "image/jpeg", "image/gif", "image/tiff", "video/ogg", "video/webm"]>;
            size: z.ZodNumber;
            slug: z.ZodString;
            url: z.ZodOptional<z.ZodString>;
            key: z.ZodString;
            isConfirmed: z.ZodBoolean;
            alt: z.ZodString;
            tags: z.ZodArray<z.ZodString, "many">;
        }, "strip", z.ZodTypeAny, {
            id: string;
            name: string;
            mimeType: "video/mp4', 'image/png" | "image/jpeg" | "image/gif" | "image/tiff" | "video/ogg" | "video/webm";
            size: number;
            slug: string;
            key: string;
            isConfirmed: boolean;
            alt: string;
            tags: string[];
            url?: string | undefined;
        }, {
            id: string;
            name: string;
            mimeType: "video/mp4', 'image/png" | "image/jpeg" | "image/gif" | "image/tiff" | "video/ogg" | "video/webm";
            size: number;
            slug: string;
            key: string;
            isConfirmed: boolean;
            alt: string;
            tags: string[];
            url?: string | undefined;
        }>;
        user: z.ZodObject<{
            username: z.ZodString;
            avatarId: z.ZodOptional<z.ZodString>;
            roleId: z.ZodString;
            isVerified: z.ZodBoolean;
            isDeleted: z.ZodBoolean;
            isSuspended: z.ZodBoolean;
            createdAt: z.ZodOptional<z.ZodDate>;
        }, "strip", z.ZodTypeAny, {
            username: string;
            roleId: string;
            isVerified: boolean;
            isDeleted: boolean;
            isSuspended: boolean;
            createdAt?: Date | undefined;
            avatarId?: string | undefined;
        }, {
            username: string;
            roleId: string;
            isVerified: boolean;
            isDeleted: boolean;
            isSuspended: boolean;
            createdAt?: Date | undefined;
            avatarId?: string | undefined;
        }>;
        role: z.ZodObject<{
            username: z.ZodString;
            avatarId: z.ZodOptional<z.ZodString>;
            roleId: z.ZodString;
            isVerified: z.ZodBoolean;
            isDeleted: z.ZodBoolean;
            isSuspended: z.ZodBoolean;
            createdAt: z.ZodOptional<z.ZodDate>;
        }, "strip", z.ZodTypeAny, {
            username: string;
            roleId: string;
            isVerified: boolean;
            isDeleted: boolean;
            isSuspended: boolean;
            createdAt?: Date | undefined;
            avatarId?: string | undefined;
        }, {
            username: string;
            roleId: string;
            isVerified: boolean;
            isDeleted: boolean;
            isSuspended: boolean;
            createdAt?: Date | undefined;
            avatarId?: string | undefined;
        }>;
        reputation: z.ZodNumber;
        issuesCount: z.ZodNumber;
        repliesCount: z.ZodNumber;
        likesGiven: z.ZodNumber;
        solvedCount: z.ZodNumber;
        isVerified: z.ZodBoolean;
        isDeleted: z.ZodBoolean;
        isSuspended: z.ZodBoolean;
        createdAt: z.ZodDate;
    }, "avatar" | "user" | "role">, {
        avatar: z.ZodObject<{
            username: z.ZodString;
            avatarId: z.ZodOptional<z.ZodString>;
            roleId: z.ZodString;
            isVerified: z.ZodBoolean;
            isDeleted: z.ZodBoolean;
            isSuspended: z.ZodBoolean;
            createdAt: z.ZodOptional<z.ZodDate>;
        }, "strip", z.ZodTypeAny, {
            username: string;
            roleId: string;
            isVerified: boolean;
            isDeleted: boolean;
            isSuspended: boolean;
            createdAt?: Date | undefined;
            avatarId?: string | undefined;
        }, {
            username: string;
            roleId: string;
            isVerified: boolean;
            isDeleted: boolean;
            isSuspended: boolean;
            createdAt?: Date | undefined;
            avatarId?: string | undefined;
        }>;
        role: z.ZodObject<{
            username: z.ZodString;
            avatarId: z.ZodOptional<z.ZodString>;
            roleId: z.ZodString;
            isVerified: z.ZodBoolean;
            isDeleted: z.ZodBoolean;
            isSuspended: z.ZodBoolean;
            createdAt: z.ZodOptional<z.ZodDate>;
        }, "strip", z.ZodTypeAny, {
            username: string;
            roleId: string;
            isVerified: boolean;
            isDeleted: boolean;
            isSuspended: boolean;
            createdAt?: Date | undefined;
            avatarId?: string | undefined;
        }, {
            username: string;
            roleId: string;
            isVerified: boolean;
            isDeleted: boolean;
            isSuspended: boolean;
            createdAt?: Date | undefined;
            avatarId?: string | undefined;
        }>;
        user: z.ZodObject<{
            username: z.ZodString;
            avatarId: z.ZodOptional<z.ZodString>;
            roleId: z.ZodString;
            isVerified: z.ZodBoolean;
            isDeleted: z.ZodBoolean;
            isSuspended: z.ZodBoolean;
            createdAt: z.ZodOptional<z.ZodDate>;
        }, "strip", z.ZodTypeAny, {
            username: string;
            roleId: string;
            isVerified: boolean;
            isDeleted: boolean;
            isSuspended: boolean;
            createdAt?: Date | undefined;
            avatarId?: string | undefined;
        }, {
            username: string;
            roleId: string;
            isVerified: boolean;
            isDeleted: boolean;
            isSuspended: boolean;
            createdAt?: Date | undefined;
            avatarId?: string | undefined;
        }>;
    }>, "avatar" | "user" | "role">, {
        role: z.ZodObject<z.objectUtil.extendShape<{
            username: z.ZodString;
            avatarId: z.ZodOptional<z.ZodString>;
            roleId: z.ZodString;
            isVerified: z.ZodBoolean;
            isDeleted: z.ZodBoolean;
            isSuspended: z.ZodBoolean;
            createdAt: z.ZodOptional<z.ZodDate>;
        }, {
            userId: z.ZodString;
            email: z.ZodString;
            newEmail: z.ZodOptional<z.ZodString>;
            passwordChangedAt: z.ZodOptional<z.ZodDate>;
            storageId: z.ZodString;
            updatedAt: z.ZodOptional<z.ZodDate>;
        }>, "strip", z.ZodTypeAny, {
            username: string;
            roleId: string;
            isVerified: boolean;
            isDeleted: boolean;
            isSuspended: boolean;
            userId: string;
            email: string;
            storageId: string;
            createdAt?: Date | undefined;
            updatedAt?: Date | undefined;
            avatarId?: string | undefined;
            newEmail?: string | undefined;
            passwordChangedAt?: Date | undefined;
        }, {
            username: string;
            roleId: string;
            isVerified: boolean;
            isDeleted: boolean;
            isSuspended: boolean;
            userId: string;
            email: string;
            storageId: string;
            createdAt?: Date | undefined;
            updatedAt?: Date | undefined;
            avatarId?: string | undefined;
            newEmail?: string | undefined;
            passwordChangedAt?: Date | undefined;
        }>;
        avatar: z.ZodObject<z.objectUtil.extendShape<{
            username: z.ZodString;
            avatarId: z.ZodOptional<z.ZodString>;
            roleId: z.ZodString;
            isVerified: z.ZodBoolean;
            isDeleted: z.ZodBoolean;
            isSuspended: z.ZodBoolean;
            createdAt: z.ZodOptional<z.ZodDate>;
        }, {
            userId: z.ZodString;
            email: z.ZodString;
            newEmail: z.ZodOptional<z.ZodString>;
            passwordChangedAt: z.ZodOptional<z.ZodDate>;
            storageId: z.ZodString;
            updatedAt: z.ZodOptional<z.ZodDate>;
        }>, "strip", z.ZodTypeAny, {
            username: string;
            roleId: string;
            isVerified: boolean;
            isDeleted: boolean;
            isSuspended: boolean;
            userId: string;
            email: string;
            storageId: string;
            createdAt?: Date | undefined;
            updatedAt?: Date | undefined;
            avatarId?: string | undefined;
            newEmail?: string | undefined;
            passwordChangedAt?: Date | undefined;
        }, {
            username: string;
            roleId: string;
            isVerified: boolean;
            isDeleted: boolean;
            isSuspended: boolean;
            userId: string;
            email: string;
            storageId: string;
            createdAt?: Date | undefined;
            updatedAt?: Date | undefined;
            avatarId?: string | undefined;
            newEmail?: string | undefined;
            passwordChangedAt?: Date | undefined;
        }>;
        user: z.ZodObject<z.objectUtil.extendShape<{
            username: z.ZodString;
            avatarId: z.ZodOptional<z.ZodString>;
            roleId: z.ZodString;
            isVerified: z.ZodBoolean;
            isDeleted: z.ZodBoolean;
            isSuspended: z.ZodBoolean;
            createdAt: z.ZodOptional<z.ZodDate>;
        }, {
            userId: z.ZodString;
            email: z.ZodString;
            newEmail: z.ZodOptional<z.ZodString>;
            passwordChangedAt: z.ZodOptional<z.ZodDate>;
            storageId: z.ZodString;
            updatedAt: z.ZodOptional<z.ZodDate>;
        }>, "strip", z.ZodTypeAny, {
            username: string;
            roleId: string;
            isVerified: boolean;
            isDeleted: boolean;
            isSuspended: boolean;
            userId: string;
            email: string;
            storageId: string;
            createdAt?: Date | undefined;
            updatedAt?: Date | undefined;
            avatarId?: string | undefined;
            newEmail?: string | undefined;
            passwordChangedAt?: Date | undefined;
        }, {
            username: string;
            roleId: string;
            isVerified: boolean;
            isDeleted: boolean;
            isSuspended: boolean;
            userId: string;
            email: string;
            storageId: string;
            createdAt?: Date | undefined;
            updatedAt?: Date | undefined;
            avatarId?: string | undefined;
            newEmail?: string | undefined;
            passwordChangedAt?: Date | undefined;
        }>;
        reportsCount: z.ZodNumber;
        reportedOwnIssuesCount: z.ZodNumber;
        reportedOwnRepliesCount: z.ZodNumber;
        userId: z.ZodString;
    }>, "strip", z.ZodTypeAny, {
        id: string;
        createdAt: Date;
        isVerified: boolean;
        isDeleted: boolean;
        isSuspended: boolean;
        userId: string;
        reputation: number;
        issuesCount: number;
        repliesCount: number;
        likesGiven: number;
        solvedCount: number;
        reportsCount: number;
        reportedOwnIssuesCount: number;
        reportedOwnRepliesCount: number;
        avatar: {
            username: string;
            roleId: string;
            isVerified: boolean;
            isDeleted: boolean;
            isSuspended: boolean;
            userId: string;
            email: string;
            storageId: string;
            createdAt?: Date | undefined;
            updatedAt?: Date | undefined;
            avatarId?: string | undefined;
            newEmail?: string | undefined;
            passwordChangedAt?: Date | undefined;
        };
        user: {
            username: string;
            roleId: string;
            isVerified: boolean;
            isDeleted: boolean;
            isSuspended: boolean;
            userId: string;
            email: string;
            storageId: string;
            createdAt?: Date | undefined;
            updatedAt?: Date | undefined;
            avatarId?: string | undefined;
            newEmail?: string | undefined;
            passwordChangedAt?: Date | undefined;
        };
        role: {
            username: string;
            roleId: string;
            isVerified: boolean;
            isDeleted: boolean;
            isSuspended: boolean;
            userId: string;
            email: string;
            storageId: string;
            createdAt?: Date | undefined;
            updatedAt?: Date | undefined;
            avatarId?: string | undefined;
            newEmail?: string | undefined;
            passwordChangedAt?: Date | undefined;
        };
    }, {
        id: string;
        createdAt: Date;
        isVerified: boolean;
        isDeleted: boolean;
        isSuspended: boolean;
        userId: string;
        reputation: number;
        issuesCount: number;
        repliesCount: number;
        likesGiven: number;
        solvedCount: number;
        reportsCount: number;
        reportedOwnIssuesCount: number;
        reportedOwnRepliesCount: number;
        avatar: {
            username: string;
            roleId: string;
            isVerified: boolean;
            isDeleted: boolean;
            isSuspended: boolean;
            userId: string;
            email: string;
            storageId: string;
            createdAt?: Date | undefined;
            updatedAt?: Date | undefined;
            avatarId?: string | undefined;
            newEmail?: string | undefined;
            passwordChangedAt?: Date | undefined;
        };
        user: {
            username: string;
            roleId: string;
            isVerified: boolean;
            isDeleted: boolean;
            isSuspended: boolean;
            userId: string;
            email: string;
            storageId: string;
            createdAt?: Date | undefined;
            updatedAt?: Date | undefined;
            avatarId?: string | undefined;
            newEmail?: string | undefined;
            passwordChangedAt?: Date | undefined;
        };
        role: {
            username: string;
            roleId: string;
            isVerified: boolean;
            isDeleted: boolean;
            isSuspended: boolean;
            userId: string;
            email: string;
            storageId: string;
            createdAt?: Date | undefined;
            updatedAt?: Date | undefined;
            avatarId?: string | undefined;
            newEmail?: string | undefined;
            passwordChangedAt?: Date | undefined;
        };
    }>;
    PublicMemberDetailsShortDTO: z.ZodObject<{
        id: z.ZodString;
        avatar: z.ZodNullable<z.ZodString>;
        username: z.ZodString;
        roleDisplayName: z.ZodString;
        reputation: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        id: string;
        username: string;
        reputation: number;
        avatar: string | null;
        roleDisplayName: string;
    }, {
        id: string;
        username: string;
        reputation: number;
        avatar: string | null;
        roleDisplayName: string;
    }>;
    RegularMemberDetailsShortDTO: z.ZodObject<{
        id: z.ZodString;
        avatar: z.ZodNullable<z.ZodString>;
        username: z.ZodString;
        roleDisplayName: z.ZodString;
        reputation: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        id: string;
        username: string;
        reputation: number;
        avatar: string | null;
        roleDisplayName: string;
    }, {
        id: string;
        username: string;
        reputation: number;
        avatar: string | null;
        roleDisplayName: string;
    }>;
    ConfidentialMemberDetailsShortDTO: z.ZodObject<{
        id: z.ZodString;
        avatar: z.ZodNullable<z.ZodString>;
        username: z.ZodString;
        roleDisplayName: z.ZodString;
        reputation: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        id: string;
        username: string;
        reputation: number;
        avatar: string | null;
        roleDisplayName: string;
    }, {
        id: string;
        username: string;
        reputation: number;
        avatar: string | null;
        roleDisplayName: string;
    }>;
};

declare const projectContract: {
    getProjects: {
        metadata: {
            readonly isPublic: true;
            readonly permissions: {};
        };
        query: z.ZodObject<{
            /**
             * @type {string} - page number, default is 1
             */
            page: z.ZodOptional<z.ZodString>;
            /**
             * @type {string} - limit of items per page, default is 50
             */
            limit: z.ZodOptional<z.ZodString>;
            /**
             * @type {Array} - array of project group ids
             * @items {string}
             */
            groupIds: z.ZodOptional<z.ZodString>;
            /**
             * @type {string} - search string
             */
            search: z.ZodOptional<z.ZodString>;
            /**
             * @type {string} - author id
             */
            authorId: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            authorId?: string | undefined;
            search?: string | undefined;
            limit?: string | undefined;
            page?: string | undefined;
            groupIds?: string | undefined;
        }, {
            authorId?: string | undefined;
            search?: string | undefined;
            limit?: string | undefined;
            page?: string | undefined;
            groupIds?: string | undefined;
        }>;
        summary: "Get all projects";
        method: "GET";
        path: "/api/projects";
        headers: z.ZodOptional<z.ZodObject<{
            authorization: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            authorization: string;
        }, {
            authorization: string;
        }>>;
        responses: {
            200: z.ZodObject<{
                data: z.ZodType<{
                    data: ({
                        id: string;
                        name: string;
                        slug: string;
                        key: string;
                        issuesCount: number;
                        description: string;
                        visibility: "PUBLIC" | "PRIVATE";
                        displayName: string;
                        state: "ACTIVE" | "DRAFT" | "ARCHIVED";
                        group: {
                            id: string;
                            name: string;
                            slug: string;
                            description: string;
                            displayName: string;
                            bannerId: string | null;
                        };
                        banner: {
                            id: string;
                            name: string;
                            mimeType: "video/mp4', 'image/png" | "image/jpeg" | "image/gif" | "image/tiff" | "video/ogg" | "video/webm";
                            size: number;
                            slug: string;
                            url: string;
                            key: string;
                            isConfirmed: boolean;
                            alt: string;
                            tags: string[];
                        };
                        formId: string | null;
                    } | {
                        id: string;
                        createdAt: Date;
                        updatedAt: Date;
                        storageId: string;
                        name: string;
                        slug: string;
                        key: string;
                        issuesCount: number;
                        author: {
                            id: string;
                            createdAt: Date;
                            reputation: number;
                            issuesCount: number;
                            repliesCount: number;
                            likesGiven: number;
                            solvedCount: number;
                        };
                        description: string;
                        visibility: "PUBLIC" | "PRIVATE";
                        displayName: string;
                        state: "ACTIVE" | "DRAFT" | "ARCHIVED";
                        group: {
                            id: string;
                            name: string;
                            slug: string;
                            description: string;
                            displayName: string;
                            bannerId: string | null;
                        };
                        banner: {
                            id: string;
                            authorId: string;
                            createdAt: Date;
                            updatedAt: Date;
                            isDeleted: boolean;
                            name: string;
                            mimeType: "video/mp4', 'image/png" | "image/jpeg" | "image/gif" | "image/tiff" | "video/ogg" | "video/webm";
                            size: number;
                            slug: string;
                            url: string;
                            key: string;
                            isConfirmed: boolean;
                            alt: string;
                            tags: string[];
                            unassociatedAt?: Date | null | undefined;
                        };
                        formId: string | null;
                        keyArt: {
                            id: string;
                            authorId: string;
                            createdAt: Date;
                            updatedAt: Date;
                            isDeleted: boolean;
                            name: string;
                            mimeType: "video/mp4', 'image/png" | "image/jpeg" | "image/gif" | "image/tiff" | "video/ogg" | "video/webm";
                            size: number;
                            slug: string;
                            url: string;
                            key: string;
                            isConfirmed: boolean;
                            alt: string;
                            tags: string[];
                            unassociatedAt?: Date | null | undefined;
                        };
                        moderatorsList: {
                            id: string;
                            username: string;
                            reputation: number;
                            avatar: string | null;
                            roleDisplayName: string;
                        }[];
                    })[];
                    count: number;
                }, z.ZodTypeDef, {
                    data: ({
                        id: string;
                        name: string;
                        slug: string;
                        key: string;
                        issuesCount: number;
                        description: string;
                        visibility: "PUBLIC" | "PRIVATE";
                        displayName: string;
                        state: "ACTIVE" | "DRAFT" | "ARCHIVED";
                        group: {
                            id: string;
                            name: string;
                            slug: string;
                            description: string;
                            displayName: string;
                            bannerId: string | null;
                        };
                        banner: {
                            id: string;
                            name: string;
                            mimeType: "video/mp4', 'image/png" | "image/jpeg" | "image/gif" | "image/tiff" | "video/ogg" | "video/webm";
                            size: number;
                            slug: string;
                            url: string;
                            key: string;
                            isConfirmed: boolean;
                            alt: string;
                            tags: string[];
                        };
                        formId: string | null;
                    } | {
                        id: string;
                        createdAt: Date;
                        updatedAt: Date;
                        storageId: string;
                        name: string;
                        slug: string;
                        key: string;
                        issuesCount: number;
                        author: {
                            id: string;
                            createdAt: Date;
                            reputation: number;
                            issuesCount: number;
                            repliesCount: number;
                            likesGiven: number;
                            solvedCount: number;
                        };
                        description: string;
                        visibility: "PUBLIC" | "PRIVATE";
                        displayName: string;
                        state: "ACTIVE" | "DRAFT" | "ARCHIVED";
                        group: {
                            id: string;
                            name: string;
                            slug: string;
                            description: string;
                            displayName: string;
                            bannerId: string | null;
                        };
                        banner: {
                            id: string;
                            authorId: string;
                            createdAt: Date;
                            updatedAt: Date;
                            isDeleted: boolean;
                            name: string;
                            mimeType: "video/mp4', 'image/png" | "image/jpeg" | "image/gif" | "image/tiff" | "video/ogg" | "video/webm";
                            size: number;
                            slug: string;
                            url: string;
                            key: string;
                            isConfirmed: boolean;
                            alt: string;
                            tags: string[];
                            unassociatedAt?: Date | null | undefined;
                        };
                        formId: string | null;
                        keyArt: {
                            id: string;
                            authorId: string;
                            createdAt: Date;
                            updatedAt: Date;
                            isDeleted: boolean;
                            name: string;
                            mimeType: "video/mp4', 'image/png" | "image/jpeg" | "image/gif" | "image/tiff" | "video/ogg" | "video/webm";
                            size: number;
                            slug: string;
                            url: string;
                            key: string;
                            isConfirmed: boolean;
                            alt: string;
                            tags: string[];
                            unassociatedAt?: Date | null | undefined;
                        };
                        moderatorsList: {
                            id: string;
                            username: string;
                            reputation: number;
                            avatar: string | null;
                            roleDisplayName: string;
                        }[];
                    })[];
                    count: number;
                }> | z.ZodObject<{}, "strip", z.ZodTypeAny, {}, {}>;
            }, "strip", z.ZodTypeAny, {
                data: {
                    data: ({
                        id: string;
                        name: string;
                        slug: string;
                        key: string;
                        issuesCount: number;
                        description: string;
                        visibility: "PUBLIC" | "PRIVATE";
                        displayName: string;
                        state: "ACTIVE" | "DRAFT" | "ARCHIVED";
                        group: {
                            id: string;
                            name: string;
                            slug: string;
                            description: string;
                            displayName: string;
                            bannerId: string | null;
                        };
                        banner: {
                            id: string;
                            name: string;
                            mimeType: "video/mp4', 'image/png" | "image/jpeg" | "image/gif" | "image/tiff" | "video/ogg" | "video/webm";
                            size: number;
                            slug: string;
                            url: string;
                            key: string;
                            isConfirmed: boolean;
                            alt: string;
                            tags: string[];
                        };
                        formId: string | null;
                    } | {
                        id: string;
                        createdAt: Date;
                        updatedAt: Date;
                        storageId: string;
                        name: string;
                        slug: string;
                        key: string;
                        issuesCount: number;
                        author: {
                            id: string;
                            createdAt: Date;
                            reputation: number;
                            issuesCount: number;
                            repliesCount: number;
                            likesGiven: number;
                            solvedCount: number;
                        };
                        description: string;
                        visibility: "PUBLIC" | "PRIVATE";
                        displayName: string;
                        state: "ACTIVE" | "DRAFT" | "ARCHIVED";
                        group: {
                            id: string;
                            name: string;
                            slug: string;
                            description: string;
                            displayName: string;
                            bannerId: string | null;
                        };
                        banner: {
                            id: string;
                            authorId: string;
                            createdAt: Date;
                            updatedAt: Date;
                            isDeleted: boolean;
                            name: string;
                            mimeType: "video/mp4', 'image/png" | "image/jpeg" | "image/gif" | "image/tiff" | "video/ogg" | "video/webm";
                            size: number;
                            slug: string;
                            url: string;
                            key: string;
                            isConfirmed: boolean;
                            alt: string;
                            tags: string[];
                            unassociatedAt?: Date | null | undefined;
                        };
                        formId: string | null;
                        keyArt: {
                            id: string;
                            authorId: string;
                            createdAt: Date;
                            updatedAt: Date;
                            isDeleted: boolean;
                            name: string;
                            mimeType: "video/mp4', 'image/png" | "image/jpeg" | "image/gif" | "image/tiff" | "video/ogg" | "video/webm";
                            size: number;
                            slug: string;
                            url: string;
                            key: string;
                            isConfirmed: boolean;
                            alt: string;
                            tags: string[];
                            unassociatedAt?: Date | null | undefined;
                        };
                        moderatorsList: {
                            id: string;
                            username: string;
                            reputation: number;
                            avatar: string | null;
                            roleDisplayName: string;
                        }[];
                    })[];
                    count: number;
                } | {};
            }, {
                data: {
                    data: ({
                        id: string;
                        name: string;
                        slug: string;
                        key: string;
                        issuesCount: number;
                        description: string;
                        visibility: "PUBLIC" | "PRIVATE";
                        displayName: string;
                        state: "ACTIVE" | "DRAFT" | "ARCHIVED";
                        group: {
                            id: string;
                            name: string;
                            slug: string;
                            description: string;
                            displayName: string;
                            bannerId: string | null;
                        };
                        banner: {
                            id: string;
                            name: string;
                            mimeType: "video/mp4', 'image/png" | "image/jpeg" | "image/gif" | "image/tiff" | "video/ogg" | "video/webm";
                            size: number;
                            slug: string;
                            url: string;
                            key: string;
                            isConfirmed: boolean;
                            alt: string;
                            tags: string[];
                        };
                        formId: string | null;
                    } | {
                        id: string;
                        createdAt: Date;
                        updatedAt: Date;
                        storageId: string;
                        name: string;
                        slug: string;
                        key: string;
                        issuesCount: number;
                        author: {
                            id: string;
                            createdAt: Date;
                            reputation: number;
                            issuesCount: number;
                            repliesCount: number;
                            likesGiven: number;
                            solvedCount: number;
                        };
                        description: string;
                        visibility: "PUBLIC" | "PRIVATE";
                        displayName: string;
                        state: "ACTIVE" | "DRAFT" | "ARCHIVED";
                        group: {
                            id: string;
                            name: string;
                            slug: string;
                            description: string;
                            displayName: string;
                            bannerId: string | null;
                        };
                        banner: {
                            id: string;
                            authorId: string;
                            createdAt: Date;
                            updatedAt: Date;
                            isDeleted: boolean;
                            name: string;
                            mimeType: "video/mp4', 'image/png" | "image/jpeg" | "image/gif" | "image/tiff" | "video/ogg" | "video/webm";
                            size: number;
                            slug: string;
                            url: string;
                            key: string;
                            isConfirmed: boolean;
                            alt: string;
                            tags: string[];
                            unassociatedAt?: Date | null | undefined;
                        };
                        formId: string | null;
                        keyArt: {
                            id: string;
                            authorId: string;
                            createdAt: Date;
                            updatedAt: Date;
                            isDeleted: boolean;
                            name: string;
                            mimeType: "video/mp4', 'image/png" | "image/jpeg" | "image/gif" | "image/tiff" | "video/ogg" | "video/webm";
                            size: number;
                            slug: string;
                            url: string;
                            key: string;
                            isConfirmed: boolean;
                            alt: string;
                            tags: string[];
                            unassociatedAt?: Date | null | undefined;
                        };
                        moderatorsList: {
                            id: string;
                            username: string;
                            reputation: number;
                            avatar: string | null;
                            roleDisplayName: string;
                        }[];
                    })[];
                    count: number;
                } | {};
            }>;
        };
    };
    getProjectById: {
        metadata: {
            readonly isPublic: true;
            readonly permissions: {};
        };
        summary: "Get project by id";
        method: "GET";
        path: "/api/projects/by/id/:projectId";
        headers: z.ZodOptional<z.ZodObject<{
            authorization: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            authorization: string;
        }, {
            authorization: string;
        }>>;
        responses: {
            200: z.ZodObject<{
                data: z.ZodType<{
                    id: string;
                    name: string;
                    slug: string;
                    key: string;
                    issuesCount: number;
                    description: string;
                    visibility: "PUBLIC" | "PRIVATE";
                    displayName: string;
                    state: "ACTIVE" | "DRAFT" | "ARCHIVED";
                    group: {
                        id: string;
                        name: string;
                        slug: string;
                        description: string;
                        displayName: string;
                        bannerId: string | null;
                    };
                    banner: {
                        id: string;
                        name: string;
                        mimeType: "video/mp4', 'image/png" | "image/jpeg" | "image/gif" | "image/tiff" | "video/ogg" | "video/webm";
                        size: number;
                        slug: string;
                        url: string;
                        key: string;
                        isConfirmed: boolean;
                        alt: string;
                        tags: string[];
                    };
                    formId: string | null;
                } | {
                    id: string;
                    createdAt: Date;
                    updatedAt: Date;
                    storageId: string;
                    name: string;
                    slug: string;
                    key: string;
                    issuesCount: number;
                    author: {
                        id: string;
                        createdAt: Date;
                        reputation: number;
                        issuesCount: number;
                        repliesCount: number;
                        likesGiven: number;
                        solvedCount: number;
                    };
                    description: string;
                    visibility: "PUBLIC" | "PRIVATE";
                    displayName: string;
                    state: "ACTIVE" | "DRAFT" | "ARCHIVED";
                    group: {
                        id: string;
                        name: string;
                        slug: string;
                        description: string;
                        displayName: string;
                        bannerId: string | null;
                    };
                    banner: {
                        id: string;
                        authorId: string;
                        createdAt: Date;
                        updatedAt: Date;
                        isDeleted: boolean;
                        name: string;
                        mimeType: "video/mp4', 'image/png" | "image/jpeg" | "image/gif" | "image/tiff" | "video/ogg" | "video/webm";
                        size: number;
                        slug: string;
                        url: string;
                        key: string;
                        isConfirmed: boolean;
                        alt: string;
                        tags: string[];
                        unassociatedAt?: Date | null | undefined;
                    };
                    formId: string | null;
                    keyArt: {
                        id: string;
                        authorId: string;
                        createdAt: Date;
                        updatedAt: Date;
                        isDeleted: boolean;
                        name: string;
                        mimeType: "video/mp4', 'image/png" | "image/jpeg" | "image/gif" | "image/tiff" | "video/ogg" | "video/webm";
                        size: number;
                        slug: string;
                        url: string;
                        key: string;
                        isConfirmed: boolean;
                        alt: string;
                        tags: string[];
                        unassociatedAt?: Date | null | undefined;
                    };
                    moderatorsList: {
                        id: string;
                        username: string;
                        reputation: number;
                        avatar: string | null;
                        roleDisplayName: string;
                    }[];
                }, z.ZodTypeDef, {
                    id: string;
                    name: string;
                    slug: string;
                    key: string;
                    issuesCount: number;
                    description: string;
                    visibility: "PUBLIC" | "PRIVATE";
                    displayName: string;
                    state: "ACTIVE" | "DRAFT" | "ARCHIVED";
                    group: {
                        id: string;
                        name: string;
                        slug: string;
                        description: string;
                        displayName: string;
                        bannerId: string | null;
                    };
                    banner: {
                        id: string;
                        name: string;
                        mimeType: "video/mp4', 'image/png" | "image/jpeg" | "image/gif" | "image/tiff" | "video/ogg" | "video/webm";
                        size: number;
                        slug: string;
                        url: string;
                        key: string;
                        isConfirmed: boolean;
                        alt: string;
                        tags: string[];
                    };
                    formId: string | null;
                } | {
                    id: string;
                    createdAt: Date;
                    updatedAt: Date;
                    storageId: string;
                    name: string;
                    slug: string;
                    key: string;
                    issuesCount: number;
                    author: {
                        id: string;
                        createdAt: Date;
                        reputation: number;
                        issuesCount: number;
                        repliesCount: number;
                        likesGiven: number;
                        solvedCount: number;
                    };
                    description: string;
                    visibility: "PUBLIC" | "PRIVATE";
                    displayName: string;
                    state: "ACTIVE" | "DRAFT" | "ARCHIVED";
                    group: {
                        id: string;
                        name: string;
                        slug: string;
                        description: string;
                        displayName: string;
                        bannerId: string | null;
                    };
                    banner: {
                        id: string;
                        authorId: string;
                        createdAt: Date;
                        updatedAt: Date;
                        isDeleted: boolean;
                        name: string;
                        mimeType: "video/mp4', 'image/png" | "image/jpeg" | "image/gif" | "image/tiff" | "video/ogg" | "video/webm";
                        size: number;
                        slug: string;
                        url: string;
                        key: string;
                        isConfirmed: boolean;
                        alt: string;
                        tags: string[];
                        unassociatedAt?: Date | null | undefined;
                    };
                    formId: string | null;
                    keyArt: {
                        id: string;
                        authorId: string;
                        createdAt: Date;
                        updatedAt: Date;
                        isDeleted: boolean;
                        name: string;
                        mimeType: "video/mp4', 'image/png" | "image/jpeg" | "image/gif" | "image/tiff" | "video/ogg" | "video/webm";
                        size: number;
                        slug: string;
                        url: string;
                        key: string;
                        isConfirmed: boolean;
                        alt: string;
                        tags: string[];
                        unassociatedAt?: Date | null | undefined;
                    };
                    moderatorsList: {
                        id: string;
                        username: string;
                        reputation: number;
                        avatar: string | null;
                        roleDisplayName: string;
                    }[];
                }> | z.ZodObject<{}, "strip", z.ZodTypeAny, {}, {}>;
            }, "strip", z.ZodTypeAny, {
                data: {
                    id: string;
                    name: string;
                    slug: string;
                    key: string;
                    issuesCount: number;
                    description: string;
                    visibility: "PUBLIC" | "PRIVATE";
                    displayName: string;
                    state: "ACTIVE" | "DRAFT" | "ARCHIVED";
                    group: {
                        id: string;
                        name: string;
                        slug: string;
                        description: string;
                        displayName: string;
                        bannerId: string | null;
                    };
                    banner: {
                        id: string;
                        name: string;
                        mimeType: "video/mp4', 'image/png" | "image/jpeg" | "image/gif" | "image/tiff" | "video/ogg" | "video/webm";
                        size: number;
                        slug: string;
                        url: string;
                        key: string;
                        isConfirmed: boolean;
                        alt: string;
                        tags: string[];
                    };
                    formId: string | null;
                } | {
                    id: string;
                    createdAt: Date;
                    updatedAt: Date;
                    storageId: string;
                    name: string;
                    slug: string;
                    key: string;
                    issuesCount: number;
                    author: {
                        id: string;
                        createdAt: Date;
                        reputation: number;
                        issuesCount: number;
                        repliesCount: number;
                        likesGiven: number;
                        solvedCount: number;
                    };
                    description: string;
                    visibility: "PUBLIC" | "PRIVATE";
                    displayName: string;
                    state: "ACTIVE" | "DRAFT" | "ARCHIVED";
                    group: {
                        id: string;
                        name: string;
                        slug: string;
                        description: string;
                        displayName: string;
                        bannerId: string | null;
                    };
                    banner: {
                        id: string;
                        authorId: string;
                        createdAt: Date;
                        updatedAt: Date;
                        isDeleted: boolean;
                        name: string;
                        mimeType: "video/mp4', 'image/png" | "image/jpeg" | "image/gif" | "image/tiff" | "video/ogg" | "video/webm";
                        size: number;
                        slug: string;
                        url: string;
                        key: string;
                        isConfirmed: boolean;
                        alt: string;
                        tags: string[];
                        unassociatedAt?: Date | null | undefined;
                    };
                    formId: string | null;
                    keyArt: {
                        id: string;
                        authorId: string;
                        createdAt: Date;
                        updatedAt: Date;
                        isDeleted: boolean;
                        name: string;
                        mimeType: "video/mp4', 'image/png" | "image/jpeg" | "image/gif" | "image/tiff" | "video/ogg" | "video/webm";
                        size: number;
                        slug: string;
                        url: string;
                        key: string;
                        isConfirmed: boolean;
                        alt: string;
                        tags: string[];
                        unassociatedAt?: Date | null | undefined;
                    };
                    moderatorsList: {
                        id: string;
                        username: string;
                        reputation: number;
                        avatar: string | null;
                        roleDisplayName: string;
                    }[];
                } | {};
            }, {
                data: {
                    id: string;
                    name: string;
                    slug: string;
                    key: string;
                    issuesCount: number;
                    description: string;
                    visibility: "PUBLIC" | "PRIVATE";
                    displayName: string;
                    state: "ACTIVE" | "DRAFT" | "ARCHIVED";
                    group: {
                        id: string;
                        name: string;
                        slug: string;
                        description: string;
                        displayName: string;
                        bannerId: string | null;
                    };
                    banner: {
                        id: string;
                        name: string;
                        mimeType: "video/mp4', 'image/png" | "image/jpeg" | "image/gif" | "image/tiff" | "video/ogg" | "video/webm";
                        size: number;
                        slug: string;
                        url: string;
                        key: string;
                        isConfirmed: boolean;
                        alt: string;
                        tags: string[];
                    };
                    formId: string | null;
                } | {
                    id: string;
                    createdAt: Date;
                    updatedAt: Date;
                    storageId: string;
                    name: string;
                    slug: string;
                    key: string;
                    issuesCount: number;
                    author: {
                        id: string;
                        createdAt: Date;
                        reputation: number;
                        issuesCount: number;
                        repliesCount: number;
                        likesGiven: number;
                        solvedCount: number;
                    };
                    description: string;
                    visibility: "PUBLIC" | "PRIVATE";
                    displayName: string;
                    state: "ACTIVE" | "DRAFT" | "ARCHIVED";
                    group: {
                        id: string;
                        name: string;
                        slug: string;
                        description: string;
                        displayName: string;
                        bannerId: string | null;
                    };
                    banner: {
                        id: string;
                        authorId: string;
                        createdAt: Date;
                        updatedAt: Date;
                        isDeleted: boolean;
                        name: string;
                        mimeType: "video/mp4', 'image/png" | "image/jpeg" | "image/gif" | "image/tiff" | "video/ogg" | "video/webm";
                        size: number;
                        slug: string;
                        url: string;
                        key: string;
                        isConfirmed: boolean;
                        alt: string;
                        tags: string[];
                        unassociatedAt?: Date | null | undefined;
                    };
                    formId: string | null;
                    keyArt: {
                        id: string;
                        authorId: string;
                        createdAt: Date;
                        updatedAt: Date;
                        isDeleted: boolean;
                        name: string;
                        mimeType: "video/mp4', 'image/png" | "image/jpeg" | "image/gif" | "image/tiff" | "video/ogg" | "video/webm";
                        size: number;
                        slug: string;
                        url: string;
                        key: string;
                        isConfirmed: boolean;
                        alt: string;
                        tags: string[];
                        unassociatedAt?: Date | null | undefined;
                    };
                    moderatorsList: {
                        id: string;
                        username: string;
                        reputation: number;
                        avatar: string | null;
                        roleDisplayName: string;
                    }[];
                } | {};
            }>;
            404: z.ZodObject<{
                title: z.ZodString;
                status: z.ZodNumber;
                detail: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                status: number;
                title: string;
                detail?: string | undefined;
            }, {
                status: number;
                title: string;
                detail?: string | undefined;
            }>;
            500: z.ZodObject<{
                title: z.ZodString;
                status: z.ZodNumber;
                detail: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                status: number;
                title: string;
                detail?: string | undefined;
            }, {
                status: number;
                title: string;
                detail?: string | undefined;
            }>;
        };
    };
    getProjectBySlug: {
        metadata: {
            readonly isPublic: true;
            readonly permissions: {};
        };
        summary: "Get project by slug";
        method: "GET";
        path: "/api/projects/by/slug/:slug";
        headers: z.ZodOptional<z.ZodObject<{
            authorization: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            authorization: string;
        }, {
            authorization: string;
        }>>;
        responses: {
            200: z.ZodObject<{
                data: z.ZodType<{
                    id: string;
                    name: string;
                    slug: string;
                    key: string;
                    issuesCount: number;
                    description: string;
                    visibility: "PUBLIC" | "PRIVATE";
                    displayName: string;
                    state: "ACTIVE" | "DRAFT" | "ARCHIVED";
                    group: {
                        id: string;
                        name: string;
                        slug: string;
                        description: string;
                        displayName: string;
                        bannerId: string | null;
                    };
                    banner: {
                        id: string;
                        name: string;
                        mimeType: "video/mp4', 'image/png" | "image/jpeg" | "image/gif" | "image/tiff" | "video/ogg" | "video/webm";
                        size: number;
                        slug: string;
                        url: string;
                        key: string;
                        isConfirmed: boolean;
                        alt: string;
                        tags: string[];
                    };
                    formId: string | null;
                } | {
                    id: string;
                    createdAt: Date;
                    updatedAt: Date;
                    storageId: string;
                    name: string;
                    slug: string;
                    key: string;
                    issuesCount: number;
                    author: {
                        id: string;
                        createdAt: Date;
                        reputation: number;
                        issuesCount: number;
                        repliesCount: number;
                        likesGiven: number;
                        solvedCount: number;
                    };
                    description: string;
                    visibility: "PUBLIC" | "PRIVATE";
                    displayName: string;
                    state: "ACTIVE" | "DRAFT" | "ARCHIVED";
                    group: {
                        id: string;
                        name: string;
                        slug: string;
                        description: string;
                        displayName: string;
                        bannerId: string | null;
                    };
                    banner: {
                        id: string;
                        authorId: string;
                        createdAt: Date;
                        updatedAt: Date;
                        isDeleted: boolean;
                        name: string;
                        mimeType: "video/mp4', 'image/png" | "image/jpeg" | "image/gif" | "image/tiff" | "video/ogg" | "video/webm";
                        size: number;
                        slug: string;
                        url: string;
                        key: string;
                        isConfirmed: boolean;
                        alt: string;
                        tags: string[];
                        unassociatedAt?: Date | null | undefined;
                    };
                    formId: string | null;
                    keyArt: {
                        id: string;
                        authorId: string;
                        createdAt: Date;
                        updatedAt: Date;
                        isDeleted: boolean;
                        name: string;
                        mimeType: "video/mp4', 'image/png" | "image/jpeg" | "image/gif" | "image/tiff" | "video/ogg" | "video/webm";
                        size: number;
                        slug: string;
                        url: string;
                        key: string;
                        isConfirmed: boolean;
                        alt: string;
                        tags: string[];
                        unassociatedAt?: Date | null | undefined;
                    };
                    moderatorsList: {
                        id: string;
                        username: string;
                        reputation: number;
                        avatar: string | null;
                        roleDisplayName: string;
                    }[];
                }, z.ZodTypeDef, {
                    id: string;
                    name: string;
                    slug: string;
                    key: string;
                    issuesCount: number;
                    description: string;
                    visibility: "PUBLIC" | "PRIVATE";
                    displayName: string;
                    state: "ACTIVE" | "DRAFT" | "ARCHIVED";
                    group: {
                        id: string;
                        name: string;
                        slug: string;
                        description: string;
                        displayName: string;
                        bannerId: string | null;
                    };
                    banner: {
                        id: string;
                        name: string;
                        mimeType: "video/mp4', 'image/png" | "image/jpeg" | "image/gif" | "image/tiff" | "video/ogg" | "video/webm";
                        size: number;
                        slug: string;
                        url: string;
                        key: string;
                        isConfirmed: boolean;
                        alt: string;
                        tags: string[];
                    };
                    formId: string | null;
                } | {
                    id: string;
                    createdAt: Date;
                    updatedAt: Date;
                    storageId: string;
                    name: string;
                    slug: string;
                    key: string;
                    issuesCount: number;
                    author: {
                        id: string;
                        createdAt: Date;
                        reputation: number;
                        issuesCount: number;
                        repliesCount: number;
                        likesGiven: number;
                        solvedCount: number;
                    };
                    description: string;
                    visibility: "PUBLIC" | "PRIVATE";
                    displayName: string;
                    state: "ACTIVE" | "DRAFT" | "ARCHIVED";
                    group: {
                        id: string;
                        name: string;
                        slug: string;
                        description: string;
                        displayName: string;
                        bannerId: string | null;
                    };
                    banner: {
                        id: string;
                        authorId: string;
                        createdAt: Date;
                        updatedAt: Date;
                        isDeleted: boolean;
                        name: string;
                        mimeType: "video/mp4', 'image/png" | "image/jpeg" | "image/gif" | "image/tiff" | "video/ogg" | "video/webm";
                        size: number;
                        slug: string;
                        url: string;
                        key: string;
                        isConfirmed: boolean;
                        alt: string;
                        tags: string[];
                        unassociatedAt?: Date | null | undefined;
                    };
                    formId: string | null;
                    keyArt: {
                        id: string;
                        authorId: string;
                        createdAt: Date;
                        updatedAt: Date;
                        isDeleted: boolean;
                        name: string;
                        mimeType: "video/mp4', 'image/png" | "image/jpeg" | "image/gif" | "image/tiff" | "video/ogg" | "video/webm";
                        size: number;
                        slug: string;
                        url: string;
                        key: string;
                        isConfirmed: boolean;
                        alt: string;
                        tags: string[];
                        unassociatedAt?: Date | null | undefined;
                    };
                    moderatorsList: {
                        id: string;
                        username: string;
                        reputation: number;
                        avatar: string | null;
                        roleDisplayName: string;
                    }[];
                }> | z.ZodObject<{}, "strip", z.ZodTypeAny, {}, {}>;
            }, "strip", z.ZodTypeAny, {
                data: {
                    id: string;
                    name: string;
                    slug: string;
                    key: string;
                    issuesCount: number;
                    description: string;
                    visibility: "PUBLIC" | "PRIVATE";
                    displayName: string;
                    state: "ACTIVE" | "DRAFT" | "ARCHIVED";
                    group: {
                        id: string;
                        name: string;
                        slug: string;
                        description: string;
                        displayName: string;
                        bannerId: string | null;
                    };
                    banner: {
                        id: string;
                        name: string;
                        mimeType: "video/mp4', 'image/png" | "image/jpeg" | "image/gif" | "image/tiff" | "video/ogg" | "video/webm";
                        size: number;
                        slug: string;
                        url: string;
                        key: string;
                        isConfirmed: boolean;
                        alt: string;
                        tags: string[];
                    };
                    formId: string | null;
                } | {
                    id: string;
                    createdAt: Date;
                    updatedAt: Date;
                    storageId: string;
                    name: string;
                    slug: string;
                    key: string;
                    issuesCount: number;
                    author: {
                        id: string;
                        createdAt: Date;
                        reputation: number;
                        issuesCount: number;
                        repliesCount: number;
                        likesGiven: number;
                        solvedCount: number;
                    };
                    description: string;
                    visibility: "PUBLIC" | "PRIVATE";
                    displayName: string;
                    state: "ACTIVE" | "DRAFT" | "ARCHIVED";
                    group: {
                        id: string;
                        name: string;
                        slug: string;
                        description: string;
                        displayName: string;
                        bannerId: string | null;
                    };
                    banner: {
                        id: string;
                        authorId: string;
                        createdAt: Date;
                        updatedAt: Date;
                        isDeleted: boolean;
                        name: string;
                        mimeType: "video/mp4', 'image/png" | "image/jpeg" | "image/gif" | "image/tiff" | "video/ogg" | "video/webm";
                        size: number;
                        slug: string;
                        url: string;
                        key: string;
                        isConfirmed: boolean;
                        alt: string;
                        tags: string[];
                        unassociatedAt?: Date | null | undefined;
                    };
                    formId: string | null;
                    keyArt: {
                        id: string;
                        authorId: string;
                        createdAt: Date;
                        updatedAt: Date;
                        isDeleted: boolean;
                        name: string;
                        mimeType: "video/mp4', 'image/png" | "image/jpeg" | "image/gif" | "image/tiff" | "video/ogg" | "video/webm";
                        size: number;
                        slug: string;
                        url: string;
                        key: string;
                        isConfirmed: boolean;
                        alt: string;
                        tags: string[];
                        unassociatedAt?: Date | null | undefined;
                    };
                    moderatorsList: {
                        id: string;
                        username: string;
                        reputation: number;
                        avatar: string | null;
                        roleDisplayName: string;
                    }[];
                } | {};
            }, {
                data: {
                    id: string;
                    name: string;
                    slug: string;
                    key: string;
                    issuesCount: number;
                    description: string;
                    visibility: "PUBLIC" | "PRIVATE";
                    displayName: string;
                    state: "ACTIVE" | "DRAFT" | "ARCHIVED";
                    group: {
                        id: string;
                        name: string;
                        slug: string;
                        description: string;
                        displayName: string;
                        bannerId: string | null;
                    };
                    banner: {
                        id: string;
                        name: string;
                        mimeType: "video/mp4', 'image/png" | "image/jpeg" | "image/gif" | "image/tiff" | "video/ogg" | "video/webm";
                        size: number;
                        slug: string;
                        url: string;
                        key: string;
                        isConfirmed: boolean;
                        alt: string;
                        tags: string[];
                    };
                    formId: string | null;
                } | {
                    id: string;
                    createdAt: Date;
                    updatedAt: Date;
                    storageId: string;
                    name: string;
                    slug: string;
                    key: string;
                    issuesCount: number;
                    author: {
                        id: string;
                        createdAt: Date;
                        reputation: number;
                        issuesCount: number;
                        repliesCount: number;
                        likesGiven: number;
                        solvedCount: number;
                    };
                    description: string;
                    visibility: "PUBLIC" | "PRIVATE";
                    displayName: string;
                    state: "ACTIVE" | "DRAFT" | "ARCHIVED";
                    group: {
                        id: string;
                        name: string;
                        slug: string;
                        description: string;
                        displayName: string;
                        bannerId: string | null;
                    };
                    banner: {
                        id: string;
                        authorId: string;
                        createdAt: Date;
                        updatedAt: Date;
                        isDeleted: boolean;
                        name: string;
                        mimeType: "video/mp4', 'image/png" | "image/jpeg" | "image/gif" | "image/tiff" | "video/ogg" | "video/webm";
                        size: number;
                        slug: string;
                        url: string;
                        key: string;
                        isConfirmed: boolean;
                        alt: string;
                        tags: string[];
                        unassociatedAt?: Date | null | undefined;
                    };
                    formId: string | null;
                    keyArt: {
                        id: string;
                        authorId: string;
                        createdAt: Date;
                        updatedAt: Date;
                        isDeleted: boolean;
                        name: string;
                        mimeType: "video/mp4', 'image/png" | "image/jpeg" | "image/gif" | "image/tiff" | "video/ogg" | "video/webm";
                        size: number;
                        slug: string;
                        url: string;
                        key: string;
                        isConfirmed: boolean;
                        alt: string;
                        tags: string[];
                        unassociatedAt?: Date | null | undefined;
                    };
                    moderatorsList: {
                        id: string;
                        username: string;
                        reputation: number;
                        avatar: string | null;
                        roleDisplayName: string;
                    }[];
                } | {};
            }>;
            404: z.ZodObject<{
                title: z.ZodString;
                status: z.ZodNumber;
                detail: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                status: number;
                title: string;
                detail?: string | undefined;
            }, {
                status: number;
                title: string;
                detail?: string | undefined;
            }>;
            500: z.ZodObject<{
                title: z.ZodString;
                status: z.ZodNumber;
                detail: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                status: number;
                title: string;
                detail?: string | undefined;
            }, {
                status: number;
                title: string;
                detail?: string | undefined;
            }>;
        };
    };
    createProject: {
        metadata: {
            readonly permissions: "create:project";
        };
        summary: "Get project by id";
        method: "POST";
        body: z.ZodObject<{
            /**
             * @type {string} - id of the project group
             */
            groupId: z.ZodString;
            /**
             * @type {string} - display name of the project
             */
            displayName: z.ZodString;
            /**
             * @type {string} - slug
             */
            slug: z.ZodString;
            /**
             * @type {string} - file id for the project banner
             * bannerId of the file, which the user is authoring
             * allowed: jpeg, png, gif, tiff
             *
             */
            bannerId: z.ZodNullable<z.ZodString>;
            /**
             * @type {string} - file id for the project key art
             * keyArtId of the file, which the user is authoring
             * allowed: jpeg, png, gif, tiff
             *
             */
            keyArtId: z.ZodNullable<z.ZodString>;
            /**
             * @type {string} - key that is prefix for all project issues
             */
            key: z.ZodString;
            /**
             * @type {string} - description
             */
            description: z.ZodString;
            /**
             * @type {string} -  visibility, whether project is public or private
             */
            visibility: z.ZodEnum<["PUBLIC", "PRIVATE"]>;
        }, "strip", z.ZodTypeAny, {
            slug: string;
            key: string;
            description: string;
            visibility: "PUBLIC" | "PRIVATE";
            displayName: string;
            bannerId: string | null;
            groupId: string;
            keyArtId: string | null;
        }, {
            slug: string;
            key: string;
            description: string;
            visibility: "PUBLIC" | "PRIVATE";
            displayName: string;
            bannerId: string | null;
            groupId: string;
            keyArtId: string | null;
        }>;
        path: "/api/projects";
        headers: z.ZodObject<{
            authorization: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            authorization: string;
        }, {
            authorization: string;
        }>;
        responses: {
            200: z.ZodObject<{
                data: z.ZodType<{
                    id: string;
                    authorId: string;
                    createdAt: Date;
                    updatedAt: Date;
                    storageId: string;
                    name: string;
                    slug: string;
                    key: string;
                    issuesCount: number;
                    description: string;
                    visibility: "PUBLIC" | "PRIVATE";
                    displayName: string;
                    state: "ACTIVE" | "DRAFT" | "ARCHIVED";
                    bannerId: string | null;
                    banner: {
                        id: string;
                        name: string;
                        mimeType: "video/mp4', 'image/png" | "image/jpeg" | "image/gif" | "image/tiff" | "video/ogg" | "video/webm";
                        size: number;
                        slug: string;
                        url: string;
                        key: string;
                        isConfirmed: boolean;
                        alt: string;
                        tags: string[];
                    };
                    groupId: string;
                    formId: string | null;
                    keyArtId: string | null;
                }, z.ZodTypeDef, {
                    id: string;
                    authorId: string;
                    createdAt: Date;
                    updatedAt: Date;
                    storageId: string;
                    name: string;
                    slug: string;
                    key: string;
                    issuesCount: number;
                    description: string;
                    visibility: "PUBLIC" | "PRIVATE";
                    displayName: string;
                    state: "ACTIVE" | "DRAFT" | "ARCHIVED";
                    bannerId: string | null;
                    banner: {
                        id: string;
                        name: string;
                        mimeType: "video/mp4', 'image/png" | "image/jpeg" | "image/gif" | "image/tiff" | "video/ogg" | "video/webm";
                        size: number;
                        slug: string;
                        url: string;
                        key: string;
                        isConfirmed: boolean;
                        alt: string;
                        tags: string[];
                    };
                    groupId: string;
                    formId: string | null;
                    keyArtId: string | null;
                }> | z.ZodObject<{}, "strip", z.ZodTypeAny, {}, {}>;
            }, "strip", z.ZodTypeAny, {
                data: {
                    id: string;
                    authorId: string;
                    createdAt: Date;
                    updatedAt: Date;
                    storageId: string;
                    name: string;
                    slug: string;
                    key: string;
                    issuesCount: number;
                    description: string;
                    visibility: "PUBLIC" | "PRIVATE";
                    displayName: string;
                    state: "ACTIVE" | "DRAFT" | "ARCHIVED";
                    bannerId: string | null;
                    banner: {
                        id: string;
                        name: string;
                        mimeType: "video/mp4', 'image/png" | "image/jpeg" | "image/gif" | "image/tiff" | "video/ogg" | "video/webm";
                        size: number;
                        slug: string;
                        url: string;
                        key: string;
                        isConfirmed: boolean;
                        alt: string;
                        tags: string[];
                    };
                    groupId: string;
                    formId: string | null;
                    keyArtId: string | null;
                } | {};
            }, {
                data: {
                    id: string;
                    authorId: string;
                    createdAt: Date;
                    updatedAt: Date;
                    storageId: string;
                    name: string;
                    slug: string;
                    key: string;
                    issuesCount: number;
                    description: string;
                    visibility: "PUBLIC" | "PRIVATE";
                    displayName: string;
                    state: "ACTIVE" | "DRAFT" | "ARCHIVED";
                    bannerId: string | null;
                    banner: {
                        id: string;
                        name: string;
                        mimeType: "video/mp4', 'image/png" | "image/jpeg" | "image/gif" | "image/tiff" | "video/ogg" | "video/webm";
                        size: number;
                        slug: string;
                        url: string;
                        key: string;
                        isConfirmed: boolean;
                        alt: string;
                        tags: string[];
                    };
                    groupId: string;
                    formId: string | null;
                    keyArtId: string | null;
                } | {};
            }>;
            404: z.ZodObject<{
                title: z.ZodString;
                status: z.ZodNumber;
                detail: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                status: number;
                title: string;
                detail?: string | undefined;
            }, {
                status: number;
                title: string;
                detail?: string | undefined;
            }>;
            409: z.ZodObject<{
                title: z.ZodString;
                status: z.ZodNumber;
                detail: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                status: number;
                title: string;
                detail?: string | undefined;
            }, {
                status: number;
                title: string;
                detail?: string | undefined;
            }>;
            403: z.ZodObject<{
                title: z.ZodString;
                status: z.ZodNumber;
                detail: z.ZodOptional<z.ZodString>;
                errors: z.ZodOptional<z.ZodArray<z.ZodType<ErrorObject, z.ZodTypeDef, ErrorObject>, "many">>;
            }, "strip", z.ZodTypeAny, {
                status: number;
                title: string;
                errors?: ErrorObject[] | undefined;
                detail?: string | undefined;
            }, {
                status: number;
                title: string;
                errors?: ErrorObject[] | undefined;
                detail?: string | undefined;
            }>;
            500: z.ZodObject<{
                title: z.ZodString;
                status: z.ZodNumber;
                detail: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                status: number;
                title: string;
                detail?: string | undefined;
            }, {
                status: number;
                title: string;
                detail?: string | undefined;
            }>;
        };
    };
    editProjectGeneralSettingsById: {
        metadata: {
            readonly permissions: {
                readonly OR: readonly ["update:project:any", "update:project:own"];
            };
        };
        summary: "Edit project";
        method: "POST";
        body: z.ZodObject<{
            /**
             * @type {string} - display name of the project
             */
            displayName: z.ZodOptional<z.ZodString>;
            /**
             * @type {string} - slug
             */
            slug: z.ZodOptional<z.ZodString>;
            /**
             * @type {string} - key identifier for project issues
             */
            key: z.ZodOptional<z.ZodString>;
            /**
             * @type {string} - file id for the project banner
             */
            bannerId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            /**
             * @type {string} - file id for the project key art
             */
            keyArtId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            /**
             * @type {string} - description
             */
            description: z.ZodOptional<z.ZodString>;
            /**
             * @type {string} -  visibility, whether project is public or private
             */
            visibility: z.ZodOptional<z.ZodEnum<["PUBLIC", "PRIVATE"]>>;
        }, "strip", z.ZodTypeAny, {
            slug?: string | undefined;
            key?: string | undefined;
            description?: string | undefined;
            visibility?: "PUBLIC" | "PRIVATE" | undefined;
            displayName?: string | undefined;
            bannerId?: string | null | undefined;
            keyArtId?: string | null | undefined;
        }, {
            slug?: string | undefined;
            key?: string | undefined;
            description?: string | undefined;
            visibility?: "PUBLIC" | "PRIVATE" | undefined;
            displayName?: string | undefined;
            bannerId?: string | null | undefined;
            keyArtId?: string | null | undefined;
        }>;
        path: "/api/projects/by/id/:projectId/edit";
        headers: z.ZodObject<{
            authorization: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            authorization: string;
        }, {
            authorization: string;
        }>;
        responses: {
            200: z.ZodObject<{
                data: z.ZodType<{
                    id: string;
                    authorId: string;
                    createdAt: Date;
                    updatedAt: Date;
                    storageId: string;
                    name: string;
                    slug: string;
                    key: string;
                    issuesCount: number;
                    description: string;
                    visibility: "PUBLIC" | "PRIVATE";
                    displayName: string;
                    state: "ACTIVE" | "DRAFT" | "ARCHIVED";
                    bannerId: string | null;
                    banner: {
                        id: string;
                        name: string;
                        mimeType: "video/mp4', 'image/png" | "image/jpeg" | "image/gif" | "image/tiff" | "video/ogg" | "video/webm";
                        size: number;
                        slug: string;
                        url: string;
                        key: string;
                        isConfirmed: boolean;
                        alt: string;
                        tags: string[];
                    };
                    groupId: string;
                    formId: string | null;
                    keyArtId: string | null;
                }, z.ZodTypeDef, {
                    id: string;
                    authorId: string;
                    createdAt: Date;
                    updatedAt: Date;
                    storageId: string;
                    name: string;
                    slug: string;
                    key: string;
                    issuesCount: number;
                    description: string;
                    visibility: "PUBLIC" | "PRIVATE";
                    displayName: string;
                    state: "ACTIVE" | "DRAFT" | "ARCHIVED";
                    bannerId: string | null;
                    banner: {
                        id: string;
                        name: string;
                        mimeType: "video/mp4', 'image/png" | "image/jpeg" | "image/gif" | "image/tiff" | "video/ogg" | "video/webm";
                        size: number;
                        slug: string;
                        url: string;
                        key: string;
                        isConfirmed: boolean;
                        alt: string;
                        tags: string[];
                    };
                    groupId: string;
                    formId: string | null;
                    keyArtId: string | null;
                }> | z.ZodObject<{}, "strip", z.ZodTypeAny, {}, {}>;
            }, "strip", z.ZodTypeAny, {
                data: {
                    id: string;
                    authorId: string;
                    createdAt: Date;
                    updatedAt: Date;
                    storageId: string;
                    name: string;
                    slug: string;
                    key: string;
                    issuesCount: number;
                    description: string;
                    visibility: "PUBLIC" | "PRIVATE";
                    displayName: string;
                    state: "ACTIVE" | "DRAFT" | "ARCHIVED";
                    bannerId: string | null;
                    banner: {
                        id: string;
                        name: string;
                        mimeType: "video/mp4', 'image/png" | "image/jpeg" | "image/gif" | "image/tiff" | "video/ogg" | "video/webm";
                        size: number;
                        slug: string;
                        url: string;
                        key: string;
                        isConfirmed: boolean;
                        alt: string;
                        tags: string[];
                    };
                    groupId: string;
                    formId: string | null;
                    keyArtId: string | null;
                } | {};
            }, {
                data: {
                    id: string;
                    authorId: string;
                    createdAt: Date;
                    updatedAt: Date;
                    storageId: string;
                    name: string;
                    slug: string;
                    key: string;
                    issuesCount: number;
                    description: string;
                    visibility: "PUBLIC" | "PRIVATE";
                    displayName: string;
                    state: "ACTIVE" | "DRAFT" | "ARCHIVED";
                    bannerId: string | null;
                    banner: {
                        id: string;
                        name: string;
                        mimeType: "video/mp4', 'image/png" | "image/jpeg" | "image/gif" | "image/tiff" | "video/ogg" | "video/webm";
                        size: number;
                        slug: string;
                        url: string;
                        key: string;
                        isConfirmed: boolean;
                        alt: string;
                        tags: string[];
                    };
                    groupId: string;
                    formId: string | null;
                    keyArtId: string | null;
                } | {};
            }>;
            409: z.ZodObject<{
                title: z.ZodString;
                status: z.ZodNumber;
                detail: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                status: number;
                title: string;
                detail?: string | undefined;
            }, {
                status: number;
                title: string;
                detail?: string | undefined;
            }>;
            403: z.ZodObject<{
                title: z.ZodString;
                status: z.ZodNumber;
                detail: z.ZodOptional<z.ZodString>;
                errors: z.ZodOptional<z.ZodArray<z.ZodType<ErrorObject, z.ZodTypeDef, ErrorObject>, "many">>;
            }, "strip", z.ZodTypeAny, {
                status: number;
                title: string;
                errors?: ErrorObject[] | undefined;
                detail?: string | undefined;
            }, {
                status: number;
                title: string;
                errors?: ErrorObject[] | undefined;
                detail?: string | undefined;
            }>;
            500: z.ZodObject<{
                title: z.ZodString;
                status: z.ZodNumber;
                detail: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                status: number;
                title: string;
                detail?: string | undefined;
            }, {
                status: number;
                title: string;
                detail?: string | undefined;
            }>;
        };
    };
    changeProjectStateById: {
        metadata: {
            permissions: {
                readonly OR: readonly ["manage:project:asModerator", "update:project:any", "update:project:own"];
            };
        };
        method: "POST";
        body: z.ZodObject<{
            state: z.ZodEnum<["ACTIVE", "DRAFT", "ARCHIVED"]>;
        }, "strip", z.ZodTypeAny, {
            state: "ACTIVE" | "DRAFT" | "ARCHIVED";
        }, {
            state: "ACTIVE" | "DRAFT" | "ARCHIVED";
        }>;
        path: "/api/projects/by/id/:projectId/state";
        headers: z.ZodObject<{
            authorization: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            authorization: string;
        }, {
            authorization: string;
        }>;
        responses: {
            200: z.ZodObject<{
                data: z.ZodType<{
                    id: string;
                    authorId: string;
                    createdAt: Date;
                    updatedAt: Date;
                    storageId: string;
                    name: string;
                    slug: string;
                    key: string;
                    issuesCount: number;
                    description: string;
                    visibility: "PUBLIC" | "PRIVATE";
                    displayName: string;
                    state: "ACTIVE" | "DRAFT" | "ARCHIVED";
                    bannerId: string | null;
                    banner: {
                        id: string;
                        name: string;
                        mimeType: "video/mp4', 'image/png" | "image/jpeg" | "image/gif" | "image/tiff" | "video/ogg" | "video/webm";
                        size: number;
                        slug: string;
                        url: string;
                        key: string;
                        isConfirmed: boolean;
                        alt: string;
                        tags: string[];
                    };
                    groupId: string;
                    formId: string | null;
                    keyArtId: string | null;
                }, z.ZodTypeDef, {
                    id: string;
                    authorId: string;
                    createdAt: Date;
                    updatedAt: Date;
                    storageId: string;
                    name: string;
                    slug: string;
                    key: string;
                    issuesCount: number;
                    description: string;
                    visibility: "PUBLIC" | "PRIVATE";
                    displayName: string;
                    state: "ACTIVE" | "DRAFT" | "ARCHIVED";
                    bannerId: string | null;
                    banner: {
                        id: string;
                        name: string;
                        mimeType: "video/mp4', 'image/png" | "image/jpeg" | "image/gif" | "image/tiff" | "video/ogg" | "video/webm";
                        size: number;
                        slug: string;
                        url: string;
                        key: string;
                        isConfirmed: boolean;
                        alt: string;
                        tags: string[];
                    };
                    groupId: string;
                    formId: string | null;
                    keyArtId: string | null;
                }> | z.ZodObject<{}, "strip", z.ZodTypeAny, {}, {}>;
            }, "strip", z.ZodTypeAny, {
                data: {
                    id: string;
                    authorId: string;
                    createdAt: Date;
                    updatedAt: Date;
                    storageId: string;
                    name: string;
                    slug: string;
                    key: string;
                    issuesCount: number;
                    description: string;
                    visibility: "PUBLIC" | "PRIVATE";
                    displayName: string;
                    state: "ACTIVE" | "DRAFT" | "ARCHIVED";
                    bannerId: string | null;
                    banner: {
                        id: string;
                        name: string;
                        mimeType: "video/mp4', 'image/png" | "image/jpeg" | "image/gif" | "image/tiff" | "video/ogg" | "video/webm";
                        size: number;
                        slug: string;
                        url: string;
                        key: string;
                        isConfirmed: boolean;
                        alt: string;
                        tags: string[];
                    };
                    groupId: string;
                    formId: string | null;
                    keyArtId: string | null;
                } | {};
            }, {
                data: {
                    id: string;
                    authorId: string;
                    createdAt: Date;
                    updatedAt: Date;
                    storageId: string;
                    name: string;
                    slug: string;
                    key: string;
                    issuesCount: number;
                    description: string;
                    visibility: "PUBLIC" | "PRIVATE";
                    displayName: string;
                    state: "ACTIVE" | "DRAFT" | "ARCHIVED";
                    bannerId: string | null;
                    banner: {
                        id: string;
                        name: string;
                        mimeType: "video/mp4', 'image/png" | "image/jpeg" | "image/gif" | "image/tiff" | "video/ogg" | "video/webm";
                        size: number;
                        slug: string;
                        url: string;
                        key: string;
                        isConfirmed: boolean;
                        alt: string;
                        tags: string[];
                    };
                    groupId: string;
                    formId: string | null;
                    keyArtId: string | null;
                } | {};
            }>;
            401: z.ZodObject<{
                title: z.ZodString;
                status: z.ZodNumber;
                detail: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                status: number;
                title: string;
                detail?: string | undefined;
            }, {
                status: number;
                title: string;
                detail?: string | undefined;
            }>;
            404: z.ZodObject<{
                title: z.ZodString;
                status: z.ZodNumber;
                detail: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                status: number;
                title: string;
                detail?: string | undefined;
            }, {
                status: number;
                title: string;
                detail?: string | undefined;
            }>;
            403: z.ZodObject<{
                title: z.ZodString;
                status: z.ZodNumber;
                detail: z.ZodOptional<z.ZodString>;
                errors: z.ZodOptional<z.ZodArray<z.ZodType<ErrorObject, z.ZodTypeDef, ErrorObject>, "many">>;
            }, "strip", z.ZodTypeAny, {
                status: number;
                title: string;
                errors?: ErrorObject[] | undefined;
                detail?: string | undefined;
            }, {
                status: number;
                title: string;
                errors?: ErrorObject[] | undefined;
                detail?: string | undefined;
            }>;
            500: z.ZodObject<{
                title: z.ZodString;
                status: z.ZodNumber;
                detail: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                status: number;
                title: string;
                detail?: string | undefined;
            }, {
                status: number;
                title: string;
                detail?: string | undefined;
            }>;
        };
    };
    manageProjectModerators: {
        metadata: {
            permissions: {
                readonly OR: readonly ["manage:project:asModerator", "update:project:any", "update:project:own"];
            };
        };
        method: "POST";
        body: z.ZodObject<{
            rules: z.ZodArray<z.ZodObject<{
                /**
                 * @type {string} - id of the project moderator
                 */
                id: z.ZodOptional<z.ZodNullable<z.ZodString>>;
                /**
                 * @type {Array} - array of member ids
                 * @items {string}
                 */
                memberIds: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
                /**
                 * @type {Object} - actions
                 * @property {Object} comments - permissions over comments
                 * @property {boolean} comments.block - moderator can block comment
                 * @property {boolean} comments.delete - moderator can delete comment
                 * @property {Object} issues - permissions over issues
                 * @property {boolean} issues.block - moderator can block issue
                 * @property {boolean} issues.delete - moderator can delete issue
                 * @property {boolean} issues.updateState - moderator can update issue state
                 * @property {boolean} issues.updateVisibility - moderator can update visibility
                 * @property {boolean} issues.updateFields - moderator can update fields
                 * @property {boolean} issues.updateTags - moderator can update tags
                 * @property {boolean} issues.updateConfidents - moderator can update issue confidents
                 *
                 * @property {Object} project - permissions over project
                 * @property {boolean} project.updateGeneralSettings - moderator can update project general settings
                 * @property {boolean} project.changeState - moderator can change project state
                 * @property {boolean} project.updateForm -  moderator can update project form
                 * @property {boolean} project.updateModerators - moderator can update project moderators
                 * @property {boolean} project.updateConfidents - moderator can update project confidents
                 */
                actions: z.ZodOptional<z.ZodObject<{
                    comments: z.ZodObject<{
                        block: z.ZodBoolean;
                        delete: z.ZodBoolean;
                    }, "strip", z.ZodTypeAny, {
                        block: boolean;
                        delete: boolean;
                    }, {
                        block: boolean;
                        delete: boolean;
                    }>;
                    issues: z.ZodObject<{
                        block: z.ZodBoolean;
                        delete: z.ZodBoolean;
                        updateState: z.ZodBoolean;
                        updateFields: z.ZodBoolean;
                        updateHiddenFields: z.ZodBoolean;
                        updateInternalFields: z.ZodBoolean;
                        updateVisibility: z.ZodBoolean;
                        updateTags: z.ZodBoolean;
                        updateConfidents: z.ZodBoolean;
                    }, "strip", z.ZodTypeAny, {
                        block: boolean;
                        delete: boolean;
                        updateState: boolean;
                        updateFields: boolean;
                        updateVisibility: boolean;
                        updateTags: boolean;
                        updateHiddenFields: boolean;
                        updateInternalFields: boolean;
                        updateConfidents: boolean;
                    }, {
                        block: boolean;
                        delete: boolean;
                        updateState: boolean;
                        updateFields: boolean;
                        updateVisibility: boolean;
                        updateTags: boolean;
                        updateHiddenFields: boolean;
                        updateInternalFields: boolean;
                        updateConfidents: boolean;
                    }>;
                    project: z.ZodObject<{
                        updateGeneralSettings: z.ZodBoolean;
                        updateState: z.ZodBoolean;
                        updateForm: z.ZodBoolean;
                        updateModerators: z.ZodBoolean;
                        updateConfidents: z.ZodBoolean;
                    }, "strip", z.ZodTypeAny, {
                        updateState: boolean;
                        updateConfidents: boolean;
                        updateGeneralSettings: boolean;
                        updateForm: boolean;
                        updateModerators: boolean;
                    }, {
                        updateState: boolean;
                        updateConfidents: boolean;
                        updateGeneralSettings: boolean;
                        updateForm: boolean;
                        updateModerators: boolean;
                    }>;
                }, "strip", z.ZodTypeAny, {
                    issues: {
                        block: boolean;
                        delete: boolean;
                        updateState: boolean;
                        updateFields: boolean;
                        updateVisibility: boolean;
                        updateTags: boolean;
                        updateHiddenFields: boolean;
                        updateInternalFields: boolean;
                        updateConfidents: boolean;
                    };
                    project: {
                        updateState: boolean;
                        updateConfidents: boolean;
                        updateGeneralSettings: boolean;
                        updateForm: boolean;
                        updateModerators: boolean;
                    };
                    comments: {
                        block: boolean;
                        delete: boolean;
                    };
                }, {
                    issues: {
                        block: boolean;
                        delete: boolean;
                        updateState: boolean;
                        updateFields: boolean;
                        updateVisibility: boolean;
                        updateTags: boolean;
                        updateHiddenFields: boolean;
                        updateInternalFields: boolean;
                        updateConfidents: boolean;
                    };
                    project: {
                        updateState: boolean;
                        updateConfidents: boolean;
                        updateGeneralSettings: boolean;
                        updateForm: boolean;
                        updateModerators: boolean;
                    };
                    comments: {
                        block: boolean;
                        delete: boolean;
                    };
                }>>;
                /**
                 * @type {string} - display role name
                 */
                displayRole: z.ZodString;
                /**
                 * @type {string} - display role color
                 */
                displayRoleColor: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                displayRole: string;
                displayRoleColor: string;
                id?: string | null | undefined;
                memberIds?: string[] | undefined;
                actions?: {
                    issues: {
                        block: boolean;
                        delete: boolean;
                        updateState: boolean;
                        updateFields: boolean;
                        updateVisibility: boolean;
                        updateTags: boolean;
                        updateHiddenFields: boolean;
                        updateInternalFields: boolean;
                        updateConfidents: boolean;
                    };
                    project: {
                        updateState: boolean;
                        updateConfidents: boolean;
                        updateGeneralSettings: boolean;
                        updateForm: boolean;
                        updateModerators: boolean;
                    };
                    comments: {
                        block: boolean;
                        delete: boolean;
                    };
                } | undefined;
            }, {
                displayRole: string;
                displayRoleColor: string;
                id?: string | null | undefined;
                memberIds?: string[] | undefined;
                actions?: {
                    issues: {
                        block: boolean;
                        delete: boolean;
                        updateState: boolean;
                        updateFields: boolean;
                        updateVisibility: boolean;
                        updateTags: boolean;
                        updateHiddenFields: boolean;
                        updateInternalFields: boolean;
                        updateConfidents: boolean;
                    };
                    project: {
                        updateState: boolean;
                        updateConfidents: boolean;
                        updateGeneralSettings: boolean;
                        updateForm: boolean;
                        updateModerators: boolean;
                    };
                    comments: {
                        block: boolean;
                        delete: boolean;
                    };
                } | undefined;
            }>, "many">;
        }, "strip", z.ZodTypeAny, {
            rules: {
                displayRole: string;
                displayRoleColor: string;
                id?: string | null | undefined;
                memberIds?: string[] | undefined;
                actions?: {
                    issues: {
                        block: boolean;
                        delete: boolean;
                        updateState: boolean;
                        updateFields: boolean;
                        updateVisibility: boolean;
                        updateTags: boolean;
                        updateHiddenFields: boolean;
                        updateInternalFields: boolean;
                        updateConfidents: boolean;
                    };
                    project: {
                        updateState: boolean;
                        updateConfidents: boolean;
                        updateGeneralSettings: boolean;
                        updateForm: boolean;
                        updateModerators: boolean;
                    };
                    comments: {
                        block: boolean;
                        delete: boolean;
                    };
                } | undefined;
            }[];
        }, {
            rules: {
                displayRole: string;
                displayRoleColor: string;
                id?: string | null | undefined;
                memberIds?: string[] | undefined;
                actions?: {
                    issues: {
                        block: boolean;
                        delete: boolean;
                        updateState: boolean;
                        updateFields: boolean;
                        updateVisibility: boolean;
                        updateTags: boolean;
                        updateHiddenFields: boolean;
                        updateInternalFields: boolean;
                        updateConfidents: boolean;
                    };
                    project: {
                        updateState: boolean;
                        updateConfidents: boolean;
                        updateGeneralSettings: boolean;
                        updateForm: boolean;
                        updateModerators: boolean;
                    };
                    comments: {
                        block: boolean;
                        delete: boolean;
                    };
                } | undefined;
            }[];
        }>;
        path: "/api/projects/by/id/:projectId/moderators/manage";
        headers: z.ZodObject<{
            authorization: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            authorization: string;
        }, {
            authorization: string;
        }>;
        responses: {
            200: z.ZodObject<{
                data: z.ZodType<{
                    id: string;
                    createdAt: string;
                    updatedAt: string;
                    projectId: string;
                    displayRole: string;
                    displayRoleColor: string;
                    memberIds: string[];
                    actions: {
                        issues: {
                            block: boolean;
                            delete: boolean;
                            updateState: boolean;
                            updateFields: boolean;
                            updateVisibility: boolean;
                            updateTags: boolean;
                        };
                        comments: {
                            block: boolean;
                            delete: boolean;
                        };
                        issueConfidents: {
                            delete: boolean;
                            add: boolean;
                        };
                        projectConfidents: {
                            delete: boolean;
                            add: boolean;
                        };
                    };
                }, z.ZodTypeDef, {
                    id: string;
                    createdAt: string;
                    updatedAt: string;
                    projectId: string;
                    displayRole: string;
                    displayRoleColor: string;
                    memberIds: string[];
                    actions: {
                        issues: {
                            block: boolean;
                            delete: boolean;
                            updateState: boolean;
                            updateFields: boolean;
                            updateVisibility: boolean;
                            updateTags: boolean;
                        };
                        comments: {
                            block: boolean;
                            delete: boolean;
                        };
                        issueConfidents: {
                            delete: boolean;
                            add: boolean;
                        };
                        projectConfidents: {
                            delete: boolean;
                            add: boolean;
                        };
                    };
                }> | z.ZodObject<{}, "strip", z.ZodTypeAny, {}, {}>;
            }, "strip", z.ZodTypeAny, {
                data: {
                    id: string;
                    createdAt: string;
                    updatedAt: string;
                    projectId: string;
                    displayRole: string;
                    displayRoleColor: string;
                    memberIds: string[];
                    actions: {
                        issues: {
                            block: boolean;
                            delete: boolean;
                            updateState: boolean;
                            updateFields: boolean;
                            updateVisibility: boolean;
                            updateTags: boolean;
                        };
                        comments: {
                            block: boolean;
                            delete: boolean;
                        };
                        issueConfidents: {
                            delete: boolean;
                            add: boolean;
                        };
                        projectConfidents: {
                            delete: boolean;
                            add: boolean;
                        };
                    };
                } | {};
            }, {
                data: {
                    id: string;
                    createdAt: string;
                    updatedAt: string;
                    projectId: string;
                    displayRole: string;
                    displayRoleColor: string;
                    memberIds: string[];
                    actions: {
                        issues: {
                            block: boolean;
                            delete: boolean;
                            updateState: boolean;
                            updateFields: boolean;
                            updateVisibility: boolean;
                            updateTags: boolean;
                        };
                        comments: {
                            block: boolean;
                            delete: boolean;
                        };
                        issueConfidents: {
                            delete: boolean;
                            add: boolean;
                        };
                        projectConfidents: {
                            delete: boolean;
                            add: boolean;
                        };
                    };
                } | {};
            }>;
            403: z.ZodObject<{
                title: z.ZodString;
                status: z.ZodNumber;
                detail: z.ZodOptional<z.ZodString>;
                errors: z.ZodOptional<z.ZodArray<z.ZodType<ErrorObject, z.ZodTypeDef, ErrorObject>, "many">>;
            }, "strip", z.ZodTypeAny, {
                status: number;
                title: string;
                errors?: ErrorObject[] | undefined;
                detail?: string | undefined;
            }, {
                status: number;
                title: string;
                errors?: ErrorObject[] | undefined;
                detail?: string | undefined;
            }>;
            404: z.ZodObject<{
                title: z.ZodString;
                status: z.ZodNumber;
                detail: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                status: number;
                title: string;
                detail?: string | undefined;
            }, {
                status: number;
                title: string;
                detail?: string | undefined;
            }>;
            401: z.ZodObject<{
                title: z.ZodString;
                status: z.ZodNumber;
                detail: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                status: number;
                title: string;
                detail?: string | undefined;
            }, {
                status: number;
                title: string;
                detail?: string | undefined;
            }>;
            500: z.ZodObject<{
                title: z.ZodString;
                status: z.ZodNumber;
                detail: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                status: number;
                title: string;
                detail?: string | undefined;
            }, {
                status: number;
                title: string;
                detail?: string | undefined;
            }>;
        };
    };
    deleteProjectModeratorById: {
        metadata: {
            permissions: {
                OR: ("manage:project:asModerator" | "update:project:any" | "update:project:own")[];
            };
        };
        summary: "Delete project moderator by id";
        method: "DELETE";
        body: z.ZodOptional<z.ZodNullable<z.ZodObject<{}, "strip", z.ZodTypeAny, {}, {}>>>;
        path: "/api/projects/by/id/:projectId/moderators/:moderatorId";
        headers: z.ZodObject<{
            authorization: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            authorization: string;
        }, {
            authorization: string;
        }>;
        responses: {
            204: z.ZodNullable<z.ZodObject<{}, "strip", z.ZodTypeAny, {}, {}>>;
            401: z.ZodObject<{
                title: z.ZodString;
                status: z.ZodNumber;
                detail: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                status: number;
                title: string;
                detail?: string | undefined;
            }, {
                status: number;
                title: string;
                detail?: string | undefined;
            }>;
            404: z.ZodObject<{
                title: z.ZodString;
                status: z.ZodNumber;
                detail: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                status: number;
                title: string;
                detail?: string | undefined;
            }, {
                status: number;
                title: string;
                detail?: string | undefined;
            }>;
            403: z.ZodObject<{
                title: z.ZodString;
                status: z.ZodNumber;
                detail: z.ZodOptional<z.ZodString>;
                errors: z.ZodOptional<z.ZodArray<z.ZodType<ErrorObject, z.ZodTypeDef, ErrorObject>, "many">>;
            }, "strip", z.ZodTypeAny, {
                status: number;
                title: string;
                errors?: ErrorObject[] | undefined;
                detail?: string | undefined;
            }, {
                status: number;
                title: string;
                errors?: ErrorObject[] | undefined;
                detail?: string | undefined;
            }>;
            500: z.ZodObject<{
                title: z.ZodString;
                status: z.ZodNumber;
                detail: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                status: number;
                title: string;
                detail?: string | undefined;
            }, {
                status: number;
                title: string;
                detail?: string | undefined;
            }>;
        };
    };
};

declare const projectSchema: {
    PreviewDTO: z.ZodObject<{
        id: z.ZodString;
        name: z.ZodString;
        key: z.ZodString;
        displayName: z.ZodString;
        slug: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        id: string;
        name: string;
        slug: string;
        key: string;
        displayName: string;
    }, {
        id: string;
        name: string;
        slug: string;
        key: string;
        displayName: string;
    }>;
    RegularDTO: z.ZodObject<{
        id: z.ZodString;
        groupId: z.ZodString;
        formId: z.ZodNullable<z.ZodString>;
        state: z.ZodEnum<["ACTIVE", "DRAFT", "ARCHIVED"]>;
        key: z.ZodString;
        visibility: z.ZodEnum<["PUBLIC", "PRIVATE"]>;
        name: z.ZodString;
        displayName: z.ZodString;
        slug: z.ZodString;
        banner: z.ZodObject<z.objectUtil.extendShape<{
            id: z.ZodString;
            name: z.ZodString;
            mimeType: z.ZodEnum<["video/mp4', 'image/png", "image/jpeg", "image/gif", "image/tiff", "video/ogg", "video/webm"]>;
            size: z.ZodNumber;
            slug: z.ZodString;
            url: z.ZodOptional<z.ZodString>;
            key: z.ZodString;
            isConfirmed: z.ZodBoolean;
            alt: z.ZodString;
            tags: z.ZodArray<z.ZodString, "many">;
        }, {
            url: z.ZodString;
        }>, "strip", z.ZodTypeAny, {
            id: string;
            name: string;
            mimeType: "video/mp4', 'image/png" | "image/jpeg" | "image/gif" | "image/tiff" | "video/ogg" | "video/webm";
            size: number;
            slug: string;
            url: string;
            key: string;
            isConfirmed: boolean;
            alt: string;
            tags: string[];
        }, {
            id: string;
            name: string;
            mimeType: "video/mp4', 'image/png" | "image/jpeg" | "image/gif" | "image/tiff" | "video/ogg" | "video/webm";
            size: number;
            slug: string;
            url: string;
            key: string;
            isConfirmed: boolean;
            alt: string;
            tags: string[];
        }>;
        description: z.ZodString;
        issuesCount: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        id: string;
        name: string;
        slug: string;
        key: string;
        issuesCount: number;
        description: string;
        visibility: "PUBLIC" | "PRIVATE";
        displayName: string;
        state: "ACTIVE" | "DRAFT" | "ARCHIVED";
        banner: {
            id: string;
            name: string;
            mimeType: "video/mp4', 'image/png" | "image/jpeg" | "image/gif" | "image/tiff" | "video/ogg" | "video/webm";
            size: number;
            slug: string;
            url: string;
            key: string;
            isConfirmed: boolean;
            alt: string;
            tags: string[];
        };
        groupId: string;
        formId: string | null;
    }, {
        id: string;
        name: string;
        slug: string;
        key: string;
        issuesCount: number;
        description: string;
        visibility: "PUBLIC" | "PRIVATE";
        displayName: string;
        state: "ACTIVE" | "DRAFT" | "ARCHIVED";
        banner: {
            id: string;
            name: string;
            mimeType: "video/mp4', 'image/png" | "image/jpeg" | "image/gif" | "image/tiff" | "video/ogg" | "video/webm";
            size: number;
            slug: string;
            url: string;
            key: string;
            isConfirmed: boolean;
            alt: string;
            tags: string[];
        };
        groupId: string;
        formId: string | null;
    }>;
    RegularDetailsDTO: z.ZodObject<Omit<z.objectUtil.extendShape<{
        id: z.ZodString;
        groupId: z.ZodString;
        formId: z.ZodNullable<z.ZodString>;
        state: z.ZodEnum<["ACTIVE", "DRAFT", "ARCHIVED"]>;
        key: z.ZodString;
        visibility: z.ZodEnum<["PUBLIC", "PRIVATE"]>;
        name: z.ZodString;
        displayName: z.ZodString;
        slug: z.ZodString;
        banner: z.ZodObject<z.objectUtil.extendShape<{
            id: z.ZodString;
            name: z.ZodString;
            mimeType: z.ZodEnum<["video/mp4', 'image/png", "image/jpeg", "image/gif", "image/tiff", "video/ogg", "video/webm"]>;
            size: z.ZodNumber;
            slug: z.ZodString;
            url: z.ZodOptional<z.ZodString>;
            key: z.ZodString;
            isConfirmed: z.ZodBoolean;
            alt: z.ZodString;
            tags: z.ZodArray<z.ZodString, "many">;
        }, {
            url: z.ZodString;
        }>, "strip", z.ZodTypeAny, {
            id: string;
            name: string;
            mimeType: "video/mp4', 'image/png" | "image/jpeg" | "image/gif" | "image/tiff" | "video/ogg" | "video/webm";
            size: number;
            slug: string;
            url: string;
            key: string;
            isConfirmed: boolean;
            alt: string;
            tags: string[];
        }, {
            id: string;
            name: string;
            mimeType: "video/mp4', 'image/png" | "image/jpeg" | "image/gif" | "image/tiff" | "video/ogg" | "video/webm";
            size: number;
            slug: string;
            url: string;
            key: string;
            isConfirmed: boolean;
            alt: string;
            tags: string[];
        }>;
        description: z.ZodString;
        issuesCount: z.ZodNumber;
    }, {
        group: z.ZodObject<{
            id: z.ZodString;
            slug: z.ZodString;
            name: z.ZodString;
            displayName: z.ZodString;
            bannerId: z.ZodNullable<z.ZodString>;
            description: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            id: string;
            name: string;
            slug: string;
            description: string;
            displayName: string;
            bannerId: string | null;
        }, {
            id: string;
            name: string;
            slug: string;
            description: string;
            displayName: string;
            bannerId: string | null;
        }>;
    }>, "groupId">, "strip", z.ZodTypeAny, {
        id: string;
        name: string;
        slug: string;
        key: string;
        issuesCount: number;
        description: string;
        visibility: "PUBLIC" | "PRIVATE";
        displayName: string;
        state: "ACTIVE" | "DRAFT" | "ARCHIVED";
        group: {
            id: string;
            name: string;
            slug: string;
            description: string;
            displayName: string;
            bannerId: string | null;
        };
        banner: {
            id: string;
            name: string;
            mimeType: "video/mp4', 'image/png" | "image/jpeg" | "image/gif" | "image/tiff" | "video/ogg" | "video/webm";
            size: number;
            slug: string;
            url: string;
            key: string;
            isConfirmed: boolean;
            alt: string;
            tags: string[];
        };
        formId: string | null;
    }, {
        id: string;
        name: string;
        slug: string;
        key: string;
        issuesCount: number;
        description: string;
        visibility: "PUBLIC" | "PRIVATE";
        displayName: string;
        state: "ACTIVE" | "DRAFT" | "ARCHIVED";
        group: {
            id: string;
            name: string;
            slug: string;
            description: string;
            displayName: string;
            bannerId: string | null;
        };
        banner: {
            id: string;
            name: string;
            mimeType: "video/mp4', 'image/png" | "image/jpeg" | "image/gif" | "image/tiff" | "video/ogg" | "video/webm";
            size: number;
            slug: string;
            url: string;
            key: string;
            isConfirmed: boolean;
            alt: string;
            tags: string[];
        };
        formId: string | null;
    }>;
    ConfidentialDTO: z.ZodObject<z.objectUtil.extendShape<{
        id: z.ZodString;
        groupId: z.ZodString;
        formId: z.ZodNullable<z.ZodString>;
        state: z.ZodEnum<["ACTIVE", "DRAFT", "ARCHIVED"]>;
        key: z.ZodString;
        visibility: z.ZodEnum<["PUBLIC", "PRIVATE"]>;
        name: z.ZodString;
        displayName: z.ZodString;
        slug: z.ZodString;
        banner: z.ZodObject<z.objectUtil.extendShape<{
            id: z.ZodString;
            name: z.ZodString;
            mimeType: z.ZodEnum<["video/mp4', 'image/png", "image/jpeg", "image/gif", "image/tiff", "video/ogg", "video/webm"]>;
            size: z.ZodNumber;
            slug: z.ZodString;
            url: z.ZodOptional<z.ZodString>;
            key: z.ZodString;
            isConfirmed: z.ZodBoolean;
            alt: z.ZodString;
            tags: z.ZodArray<z.ZodString, "many">;
        }, {
            url: z.ZodString;
        }>, "strip", z.ZodTypeAny, {
            id: string;
            name: string;
            mimeType: "video/mp4', 'image/png" | "image/jpeg" | "image/gif" | "image/tiff" | "video/ogg" | "video/webm";
            size: number;
            slug: string;
            url: string;
            key: string;
            isConfirmed: boolean;
            alt: string;
            tags: string[];
        }, {
            id: string;
            name: string;
            mimeType: "video/mp4', 'image/png" | "image/jpeg" | "image/gif" | "image/tiff" | "video/ogg" | "video/webm";
            size: number;
            slug: string;
            url: string;
            key: string;
            isConfirmed: boolean;
            alt: string;
            tags: string[];
        }>;
        description: z.ZodString;
        issuesCount: z.ZodNumber;
    }, {
        authorId: z.ZodString;
        storageId: z.ZodString;
        bannerId: z.ZodNullable<z.ZodString>;
        keyArtId: z.ZodNullable<z.ZodString>;
        createdAt: z.ZodDate;
        updatedAt: z.ZodDate;
    }>, "strip", z.ZodTypeAny, {
        id: string;
        authorId: string;
        createdAt: Date;
        updatedAt: Date;
        storageId: string;
        name: string;
        slug: string;
        key: string;
        issuesCount: number;
        description: string;
        visibility: "PUBLIC" | "PRIVATE";
        displayName: string;
        state: "ACTIVE" | "DRAFT" | "ARCHIVED";
        bannerId: string | null;
        banner: {
            id: string;
            name: string;
            mimeType: "video/mp4', 'image/png" | "image/jpeg" | "image/gif" | "image/tiff" | "video/ogg" | "video/webm";
            size: number;
            slug: string;
            url: string;
            key: string;
            isConfirmed: boolean;
            alt: string;
            tags: string[];
        };
        groupId: string;
        formId: string | null;
        keyArtId: string | null;
    }, {
        id: string;
        authorId: string;
        createdAt: Date;
        updatedAt: Date;
        storageId: string;
        name: string;
        slug: string;
        key: string;
        issuesCount: number;
        description: string;
        visibility: "PUBLIC" | "PRIVATE";
        displayName: string;
        state: "ACTIVE" | "DRAFT" | "ARCHIVED";
        bannerId: string | null;
        banner: {
            id: string;
            name: string;
            mimeType: "video/mp4', 'image/png" | "image/jpeg" | "image/gif" | "image/tiff" | "video/ogg" | "video/webm";
            size: number;
            slug: string;
            url: string;
            key: string;
            isConfirmed: boolean;
            alt: string;
            tags: string[];
        };
        groupId: string;
        formId: string | null;
        keyArtId: string | null;
    }>;
    ConfidentialDetailsDTO: z.ZodObject<Omit<z.objectUtil.extendShape<z.objectUtil.extendShape<{
        id: z.ZodString;
        groupId: z.ZodString;
        formId: z.ZodNullable<z.ZodString>;
        state: z.ZodEnum<["ACTIVE", "DRAFT", "ARCHIVED"]>;
        key: z.ZodString;
        visibility: z.ZodEnum<["PUBLIC", "PRIVATE"]>;
        name: z.ZodString;
        displayName: z.ZodString;
        slug: z.ZodString;
        banner: z.ZodObject<z.objectUtil.extendShape<{
            id: z.ZodString;
            name: z.ZodString;
            mimeType: z.ZodEnum<["video/mp4', 'image/png", "image/jpeg", "image/gif", "image/tiff", "video/ogg", "video/webm"]>;
            size: z.ZodNumber;
            slug: z.ZodString;
            url: z.ZodOptional<z.ZodString>;
            key: z.ZodString;
            isConfirmed: z.ZodBoolean;
            alt: z.ZodString;
            tags: z.ZodArray<z.ZodString, "many">;
        }, {
            url: z.ZodString;
        }>, "strip", z.ZodTypeAny, {
            id: string;
            name: string;
            mimeType: "video/mp4', 'image/png" | "image/jpeg" | "image/gif" | "image/tiff" | "video/ogg" | "video/webm";
            size: number;
            slug: string;
            url: string;
            key: string;
            isConfirmed: boolean;
            alt: string;
            tags: string[];
        }, {
            id: string;
            name: string;
            mimeType: "video/mp4', 'image/png" | "image/jpeg" | "image/gif" | "image/tiff" | "video/ogg" | "video/webm";
            size: number;
            slug: string;
            url: string;
            key: string;
            isConfirmed: boolean;
            alt: string;
            tags: string[];
        }>;
        description: z.ZodString;
        issuesCount: z.ZodNumber;
    }, {
        authorId: z.ZodString;
        storageId: z.ZodString;
        bannerId: z.ZodNullable<z.ZodString>;
        keyArtId: z.ZodNullable<z.ZodString>;
        createdAt: z.ZodDate;
        updatedAt: z.ZodDate;
    }>, {
        group: z.ZodObject<{
            id: z.ZodString;
            slug: z.ZodString;
            name: z.ZodString;
            displayName: z.ZodString;
            bannerId: z.ZodNullable<z.ZodString>;
            description: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            id: string;
            name: string;
            slug: string;
            description: string;
            displayName: string;
            bannerId: string | null;
        }, {
            id: string;
            name: string;
            slug: string;
            description: string;
            displayName: string;
            bannerId: string | null;
        }>;
        author: z.ZodObject<{
            id: z.ZodString;
            reputation: z.ZodNumber;
            issuesCount: z.ZodNumber;
            repliesCount: z.ZodNumber;
            likesGiven: z.ZodNumber;
            solvedCount: z.ZodNumber;
            createdAt: z.ZodDate;
        }, "strip", z.ZodTypeAny, {
            id: string;
            createdAt: Date;
            reputation: number;
            issuesCount: number;
            repliesCount: number;
            likesGiven: number;
            solvedCount: number;
        }, {
            id: string;
            createdAt: Date;
            reputation: number;
            issuesCount: number;
            repliesCount: number;
            likesGiven: number;
            solvedCount: number;
        }>;
        banner: z.ZodObject<z.objectUtil.extendShape<z.objectUtil.extendShape<{
            id: z.ZodString;
            name: z.ZodString;
            mimeType: z.ZodEnum<["video/mp4', 'image/png", "image/jpeg", "image/gif", "image/tiff", "video/ogg", "video/webm"]>;
            size: z.ZodNumber;
            slug: z.ZodString;
            url: z.ZodOptional<z.ZodString>;
            key: z.ZodString;
            isConfirmed: z.ZodBoolean;
            alt: z.ZodString;
            tags: z.ZodArray<z.ZodString, "many">;
        }, {
            isDeleted: z.ZodBoolean;
            authorId: z.ZodString;
            unassociatedAt: z.ZodOptional<z.ZodNullable<z.ZodDate>>;
            createdAt: z.ZodDate;
            updatedAt: z.ZodDate;
        }>, {
            url: z.ZodString;
        }>, "strip", z.ZodTypeAny, {
            id: string;
            authorId: string;
            createdAt: Date;
            updatedAt: Date;
            isDeleted: boolean;
            name: string;
            mimeType: "video/mp4', 'image/png" | "image/jpeg" | "image/gif" | "image/tiff" | "video/ogg" | "video/webm";
            size: number;
            slug: string;
            url: string;
            key: string;
            isConfirmed: boolean;
            alt: string;
            tags: string[];
            unassociatedAt?: Date | null | undefined;
        }, {
            id: string;
            authorId: string;
            createdAt: Date;
            updatedAt: Date;
            isDeleted: boolean;
            name: string;
            mimeType: "video/mp4', 'image/png" | "image/jpeg" | "image/gif" | "image/tiff" | "video/ogg" | "video/webm";
            size: number;
            slug: string;
            url: string;
            key: string;
            isConfirmed: boolean;
            alt: string;
            tags: string[];
            unassociatedAt?: Date | null | undefined;
        }>;
        keyArt: z.ZodObject<z.objectUtil.extendShape<z.objectUtil.extendShape<{
            id: z.ZodString;
            name: z.ZodString;
            mimeType: z.ZodEnum<["video/mp4', 'image/png", "image/jpeg", "image/gif", "image/tiff", "video/ogg", "video/webm"]>;
            size: z.ZodNumber;
            slug: z.ZodString;
            url: z.ZodOptional<z.ZodString>;
            key: z.ZodString;
            isConfirmed: z.ZodBoolean;
            alt: z.ZodString;
            tags: z.ZodArray<z.ZodString, "many">;
        }, {
            isDeleted: z.ZodBoolean;
            authorId: z.ZodString;
            unassociatedAt: z.ZodOptional<z.ZodNullable<z.ZodDate>>;
            createdAt: z.ZodDate;
            updatedAt: z.ZodDate;
        }>, {
            url: z.ZodString;
        }>, "strip", z.ZodTypeAny, {
            id: string;
            authorId: string;
            createdAt: Date;
            updatedAt: Date;
            isDeleted: boolean;
            name: string;
            mimeType: "video/mp4', 'image/png" | "image/jpeg" | "image/gif" | "image/tiff" | "video/ogg" | "video/webm";
            size: number;
            slug: string;
            url: string;
            key: string;
            isConfirmed: boolean;
            alt: string;
            tags: string[];
            unassociatedAt?: Date | null | undefined;
        }, {
            id: string;
            authorId: string;
            createdAt: Date;
            updatedAt: Date;
            isDeleted: boolean;
            name: string;
            mimeType: "video/mp4', 'image/png" | "image/jpeg" | "image/gif" | "image/tiff" | "video/ogg" | "video/webm";
            size: number;
            slug: string;
            url: string;
            key: string;
            isConfirmed: boolean;
            alt: string;
            tags: string[];
            unassociatedAt?: Date | null | undefined;
        }>;
        moderatorsList: z.ZodArray<z.ZodObject<{
            id: z.ZodString;
            avatar: z.ZodNullable<z.ZodString>;
            username: z.ZodString;
            roleDisplayName: z.ZodString;
            reputation: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            id: string;
            username: string;
            reputation: number;
            avatar: string | null;
            roleDisplayName: string;
        }, {
            id: string;
            username: string;
            reputation: number;
            avatar: string | null;
            roleDisplayName: string;
        }>, "many">;
    }>, "authorId" | "bannerId" | "groupId" | "keyArtId">, "strip", z.ZodTypeAny, {
        id: string;
        createdAt: Date;
        updatedAt: Date;
        storageId: string;
        name: string;
        slug: string;
        key: string;
        issuesCount: number;
        author: {
            id: string;
            createdAt: Date;
            reputation: number;
            issuesCount: number;
            repliesCount: number;
            likesGiven: number;
            solvedCount: number;
        };
        description: string;
        visibility: "PUBLIC" | "PRIVATE";
        displayName: string;
        state: "ACTIVE" | "DRAFT" | "ARCHIVED";
        group: {
            id: string;
            name: string;
            slug: string;
            description: string;
            displayName: string;
            bannerId: string | null;
        };
        banner: {
            id: string;
            authorId: string;
            createdAt: Date;
            updatedAt: Date;
            isDeleted: boolean;
            name: string;
            mimeType: "video/mp4', 'image/png" | "image/jpeg" | "image/gif" | "image/tiff" | "video/ogg" | "video/webm";
            size: number;
            slug: string;
            url: string;
            key: string;
            isConfirmed: boolean;
            alt: string;
            tags: string[];
            unassociatedAt?: Date | null | undefined;
        };
        formId: string | null;
        keyArt: {
            id: string;
            authorId: string;
            createdAt: Date;
            updatedAt: Date;
            isDeleted: boolean;
            name: string;
            mimeType: "video/mp4', 'image/png" | "image/jpeg" | "image/gif" | "image/tiff" | "video/ogg" | "video/webm";
            size: number;
            slug: string;
            url: string;
            key: string;
            isConfirmed: boolean;
            alt: string;
            tags: string[];
            unassociatedAt?: Date | null | undefined;
        };
        moderatorsList: {
            id: string;
            username: string;
            reputation: number;
            avatar: string | null;
            roleDisplayName: string;
        }[];
    }, {
        id: string;
        createdAt: Date;
        updatedAt: Date;
        storageId: string;
        name: string;
        slug: string;
        key: string;
        issuesCount: number;
        author: {
            id: string;
            createdAt: Date;
            reputation: number;
            issuesCount: number;
            repliesCount: number;
            likesGiven: number;
            solvedCount: number;
        };
        description: string;
        visibility: "PUBLIC" | "PRIVATE";
        displayName: string;
        state: "ACTIVE" | "DRAFT" | "ARCHIVED";
        group: {
            id: string;
            name: string;
            slug: string;
            description: string;
            displayName: string;
            bannerId: string | null;
        };
        banner: {
            id: string;
            authorId: string;
            createdAt: Date;
            updatedAt: Date;
            isDeleted: boolean;
            name: string;
            mimeType: "video/mp4', 'image/png" | "image/jpeg" | "image/gif" | "image/tiff" | "video/ogg" | "video/webm";
            size: number;
            slug: string;
            url: string;
            key: string;
            isConfirmed: boolean;
            alt: string;
            tags: string[];
            unassociatedAt?: Date | null | undefined;
        };
        formId: string | null;
        keyArt: {
            id: string;
            authorId: string;
            createdAt: Date;
            updatedAt: Date;
            isDeleted: boolean;
            name: string;
            mimeType: "video/mp4', 'image/png" | "image/jpeg" | "image/gif" | "image/tiff" | "video/ogg" | "video/webm";
            size: number;
            slug: string;
            url: string;
            key: string;
            isConfirmed: boolean;
            alt: string;
            tags: string[];
            unassociatedAt?: Date | null | undefined;
        };
        moderatorsList: {
            id: string;
            username: string;
            reputation: number;
            avatar: string | null;
            roleDisplayName: string;
        }[];
    }>;
    PublicDetailsDTO: z.ZodObject<Omit<z.objectUtil.extendShape<{
        id: z.ZodString;
        groupId: z.ZodString;
        formId: z.ZodNullable<z.ZodString>;
        state: z.ZodEnum<["ACTIVE", "DRAFT", "ARCHIVED"]>;
        key: z.ZodString;
        visibility: z.ZodEnum<["PUBLIC", "PRIVATE"]>;
        name: z.ZodString;
        displayName: z.ZodString;
        slug: z.ZodString;
        banner: z.ZodObject<z.objectUtil.extendShape<{
            id: z.ZodString;
            name: z.ZodString;
            mimeType: z.ZodEnum<["video/mp4', 'image/png", "image/jpeg", "image/gif", "image/tiff", "video/ogg", "video/webm"]>;
            size: z.ZodNumber;
            slug: z.ZodString;
            url: z.ZodOptional<z.ZodString>;
            key: z.ZodString;
            isConfirmed: z.ZodBoolean;
            alt: z.ZodString;
            tags: z.ZodArray<z.ZodString, "many">;
        }, {
            url: z.ZodString;
        }>, "strip", z.ZodTypeAny, {
            id: string;
            name: string;
            mimeType: "video/mp4', 'image/png" | "image/jpeg" | "image/gif" | "image/tiff" | "video/ogg" | "video/webm";
            size: number;
            slug: string;
            url: string;
            key: string;
            isConfirmed: boolean;
            alt: string;
            tags: string[];
        }, {
            id: string;
            name: string;
            mimeType: "video/mp4', 'image/png" | "image/jpeg" | "image/gif" | "image/tiff" | "video/ogg" | "video/webm";
            size: number;
            slug: string;
            url: string;
            key: string;
            isConfirmed: boolean;
            alt: string;
            tags: string[];
        }>;
        description: z.ZodString;
        issuesCount: z.ZodNumber;
    }, {
        group: z.ZodObject<{
            id: z.ZodString;
            slug: z.ZodString;
            name: z.ZodString;
            displayName: z.ZodString;
            bannerId: z.ZodNullable<z.ZodString>;
            description: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            id: string;
            name: string;
            slug: string;
            description: string;
            displayName: string;
            bannerId: string | null;
        }, {
            id: string;
            name: string;
            slug: string;
            description: string;
            displayName: string;
            bannerId: string | null;
        }>;
    }>, "groupId">, "strip", z.ZodTypeAny, {
        id: string;
        name: string;
        slug: string;
        key: string;
        issuesCount: number;
        description: string;
        visibility: "PUBLIC" | "PRIVATE";
        displayName: string;
        state: "ACTIVE" | "DRAFT" | "ARCHIVED";
        group: {
            id: string;
            name: string;
            slug: string;
            description: string;
            displayName: string;
            bannerId: string | null;
        };
        banner: {
            id: string;
            name: string;
            mimeType: "video/mp4', 'image/png" | "image/jpeg" | "image/gif" | "image/tiff" | "video/ogg" | "video/webm";
            size: number;
            slug: string;
            url: string;
            key: string;
            isConfirmed: boolean;
            alt: string;
            tags: string[];
        };
        formId: string | null;
    }, {
        id: string;
        name: string;
        slug: string;
        key: string;
        issuesCount: number;
        description: string;
        visibility: "PUBLIC" | "PRIVATE";
        displayName: string;
        state: "ACTIVE" | "DRAFT" | "ARCHIVED";
        group: {
            id: string;
            name: string;
            slug: string;
            description: string;
            displayName: string;
            bannerId: string | null;
        };
        banner: {
            id: string;
            name: string;
            mimeType: "video/mp4', 'image/png" | "image/jpeg" | "image/gif" | "image/tiff" | "video/ogg" | "video/webm";
            size: number;
            slug: string;
            url: string;
            key: string;
            isConfirmed: boolean;
            alt: string;
            tags: string[];
        };
        formId: string | null;
    }>;
};

declare const projectGroupContract: {
    getProjectGroups: {
        metadata: {
            isPublic: boolean;
            permissions: {};
        };
        query: z.ZodObject<{
            limit: z.ZodOptional<z.ZodString>;
            page: z.ZodOptional<z.ZodString>;
            search: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            search?: string | undefined;
            limit?: string | undefined;
            page?: string | undefined;
        }, {
            search?: string | undefined;
            limit?: string | undefined;
            page?: string | undefined;
        }>;
        summary: "Get all project group list";
        method: "GET";
        path: "/api/project-groups";
        headers: z.ZodOptional<z.ZodObject<{
            authorization: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            authorization: string;
        }, {
            authorization: string;
        }>>;
        responses: {
            200: z.ZodObject<{
                data: z.ZodType<{
                    id: string;
                    name: string;
                    slug: string;
                    description: string;
                    displayName: string;
                    bannerId: string | null;
                }[], z.ZodTypeDef, {
                    id: string;
                    name: string;
                    slug: string;
                    description: string;
                    displayName: string;
                    bannerId: string | null;
                }[]> | z.ZodObject<{}, "strip", z.ZodTypeAny, {}, {}>;
            }, "strip", z.ZodTypeAny, {
                data: {
                    id: string;
                    name: string;
                    slug: string;
                    description: string;
                    displayName: string;
                    bannerId: string | null;
                }[] | {};
            }, {
                data: {
                    id: string;
                    name: string;
                    slug: string;
                    description: string;
                    displayName: string;
                    bannerId: string | null;
                }[] | {};
            }>;
            500: z.ZodObject<{
                title: z.ZodString;
                status: z.ZodNumber;
                detail: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                status: number;
                title: string;
                detail?: string | undefined;
            }, {
                status: number;
                title: string;
                detail?: string | undefined;
            }>;
        };
    };
    getProjectGroupById: {
        metadata: {
            isPublic: boolean;
            permissions: {};
        };
        summary: "Get project group by id";
        method: "GET";
        path: "/api/project-groups/by/id/:projectGroupId";
        headers: z.ZodOptional<z.ZodObject<{
            authorization: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            authorization: string;
        }, {
            authorization: string;
        }>>;
        responses: {
            200: z.ZodObject<{
                data: z.ZodType<{
                    id: string;
                    name: string;
                    slug: string;
                    description: string;
                    displayName: string;
                    bannerId: string | null;
                    banner: string | null;
                } | {
                    id: string;
                    authorId: string;
                    createdAt: Date;
                    updatedAt: Date;
                    storageId: string;
                    name: string;
                    slug: string;
                    author: string | null;
                    description: string;
                    displayName: string;
                    bannerId: string | null;
                    banner: string | null;
                }, z.ZodTypeDef, {
                    id: string;
                    name: string;
                    slug: string;
                    description: string;
                    displayName: string;
                    bannerId: string | null;
                    banner: string | null;
                } | {
                    id: string;
                    authorId: string;
                    createdAt: Date;
                    updatedAt: Date;
                    storageId: string;
                    name: string;
                    slug: string;
                    author: string | null;
                    description: string;
                    displayName: string;
                    bannerId: string | null;
                    banner: string | null;
                }> | z.ZodObject<{}, "strip", z.ZodTypeAny, {}, {}>;
            }, "strip", z.ZodTypeAny, {
                data: {
                    id: string;
                    name: string;
                    slug: string;
                    description: string;
                    displayName: string;
                    bannerId: string | null;
                    banner: string | null;
                } | {
                    id: string;
                    authorId: string;
                    createdAt: Date;
                    updatedAt: Date;
                    storageId: string;
                    name: string;
                    slug: string;
                    author: string | null;
                    description: string;
                    displayName: string;
                    bannerId: string | null;
                    banner: string | null;
                } | {};
            }, {
                data: {
                    id: string;
                    name: string;
                    slug: string;
                    description: string;
                    displayName: string;
                    bannerId: string | null;
                    banner: string | null;
                } | {
                    id: string;
                    authorId: string;
                    createdAt: Date;
                    updatedAt: Date;
                    storageId: string;
                    name: string;
                    slug: string;
                    author: string | null;
                    description: string;
                    displayName: string;
                    bannerId: string | null;
                    banner: string | null;
                } | {};
            }>;
            403: z.ZodObject<{
                title: z.ZodString;
                status: z.ZodNumber;
                detail: z.ZodOptional<z.ZodString>;
                errors: z.ZodOptional<z.ZodArray<z.ZodType<ErrorObject, z.ZodTypeDef, ErrorObject>, "many">>;
            }, "strip", z.ZodTypeAny, {
                status: number;
                title: string;
                errors?: ErrorObject[] | undefined;
                detail?: string | undefined;
            }, {
                status: number;
                title: string;
                errors?: ErrorObject[] | undefined;
                detail?: string | undefined;
            }>;
            404: z.ZodObject<{
                title: z.ZodString;
                status: z.ZodNumber;
                detail: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                status: number;
                title: string;
                detail?: string | undefined;
            }, {
                status: number;
                title: string;
                detail?: string | undefined;
            }>;
            500: z.ZodObject<{
                title: z.ZodString;
                status: z.ZodNumber;
                detail: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                status: number;
                title: string;
                detail?: string | undefined;
            }, {
                status: number;
                title: string;
                detail?: string | undefined;
            }>;
        };
    };
    getProjectGroupBySlug: {
        metadata: {
            isPublic: boolean;
            permissions: {};
        };
        summary: "Get project group by slug";
        method: "GET";
        path: "/api/project-groups/by/slug/:slug";
        headers: z.ZodOptional<z.ZodObject<{
            authorization: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            authorization: string;
        }, {
            authorization: string;
        }>>;
        responses: {
            200: z.ZodObject<{
                data: z.ZodType<{
                    id: string;
                    name: string;
                    slug: string;
                    description: string;
                    displayName: string;
                    bannerId: string | null;
                    banner: string | null;
                } | {
                    id: string;
                    authorId: string;
                    createdAt: Date;
                    updatedAt: Date;
                    storageId: string;
                    name: string;
                    slug: string;
                    author: string | null;
                    description: string;
                    displayName: string;
                    bannerId: string | null;
                    banner: string | null;
                }, z.ZodTypeDef, {
                    id: string;
                    name: string;
                    slug: string;
                    description: string;
                    displayName: string;
                    bannerId: string | null;
                    banner: string | null;
                } | {
                    id: string;
                    authorId: string;
                    createdAt: Date;
                    updatedAt: Date;
                    storageId: string;
                    name: string;
                    slug: string;
                    author: string | null;
                    description: string;
                    displayName: string;
                    bannerId: string | null;
                    banner: string | null;
                }> | z.ZodObject<{}, "strip", z.ZodTypeAny, {}, {}>;
            }, "strip", z.ZodTypeAny, {
                data: {
                    id: string;
                    name: string;
                    slug: string;
                    description: string;
                    displayName: string;
                    bannerId: string | null;
                    banner: string | null;
                } | {
                    id: string;
                    authorId: string;
                    createdAt: Date;
                    updatedAt: Date;
                    storageId: string;
                    name: string;
                    slug: string;
                    author: string | null;
                    description: string;
                    displayName: string;
                    bannerId: string | null;
                    banner: string | null;
                } | {};
            }, {
                data: {
                    id: string;
                    name: string;
                    slug: string;
                    description: string;
                    displayName: string;
                    bannerId: string | null;
                    banner: string | null;
                } | {
                    id: string;
                    authorId: string;
                    createdAt: Date;
                    updatedAt: Date;
                    storageId: string;
                    name: string;
                    slug: string;
                    author: string | null;
                    description: string;
                    displayName: string;
                    bannerId: string | null;
                    banner: string | null;
                } | {};
            }>;
            403: z.ZodObject<{
                title: z.ZodString;
                status: z.ZodNumber;
                detail: z.ZodOptional<z.ZodString>;
                errors: z.ZodOptional<z.ZodArray<z.ZodType<ErrorObject, z.ZodTypeDef, ErrorObject>, "many">>;
            }, "strip", z.ZodTypeAny, {
                status: number;
                title: string;
                errors?: ErrorObject[] | undefined;
                detail?: string | undefined;
            }, {
                status: number;
                title: string;
                errors?: ErrorObject[] | undefined;
                detail?: string | undefined;
            }>;
            404: z.ZodObject<{
                title: z.ZodString;
                status: z.ZodNumber;
                detail: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                status: number;
                title: string;
                detail?: string | undefined;
            }, {
                status: number;
                title: string;
                detail?: string | undefined;
            }>;
            500: z.ZodObject<{
                title: z.ZodString;
                status: z.ZodNumber;
                detail: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                status: number;
                title: string;
                detail?: string | undefined;
            }, {
                status: number;
                title: string;
                detail?: string | undefined;
            }>;
        };
    };
    editProjectGroupGeneralSettingsById: {
        metadata: {
            readonly permissions: {
                readonly OR: readonly ["update:projectGroup"];
            };
        };
        summary: "Edit project group";
        method: "POST";
        body: z.ZodObject<{
            displayName: z.ZodOptional<z.ZodString>;
            /**
             * @type {string} - slug
             */
            slug: z.ZodOptional<z.ZodString>;
            /**
             * @type {string} - file id for the project group banner
             */
            bannerId: z.ZodOptional<z.ZodNullable<z.ZodString>>;
            /**
             * @type {string} - description
             */
            description: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            slug?: string | undefined;
            description?: string | undefined;
            displayName?: string | undefined;
            bannerId?: string | null | undefined;
        }, {
            slug?: string | undefined;
            description?: string | undefined;
            displayName?: string | undefined;
            bannerId?: string | null | undefined;
        }>;
        path: "/api/project-groups/by/id/:groupId/edit";
        headers: z.ZodObject<{
            authorization: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            authorization: string;
        }, {
            authorization: string;
        }>;
        responses: {
            200: z.ZodObject<{
                data: z.ZodType<{
                    id: string;
                    authorId: string;
                    createdAt: Date;
                    updatedAt: Date;
                    storageId: string;
                    name: string;
                    slug: string;
                    description: string;
                    displayName: string;
                    bannerId: string | null;
                }, z.ZodTypeDef, {
                    id: string;
                    authorId: string;
                    createdAt: Date;
                    updatedAt: Date;
                    storageId: string;
                    name: string;
                    slug: string;
                    description: string;
                    displayName: string;
                    bannerId: string | null;
                }> | z.ZodObject<{}, "strip", z.ZodTypeAny, {}, {}>;
            }, "strip", z.ZodTypeAny, {
                data: {
                    id: string;
                    authorId: string;
                    createdAt: Date;
                    updatedAt: Date;
                    storageId: string;
                    name: string;
                    slug: string;
                    description: string;
                    displayName: string;
                    bannerId: string | null;
                } | {};
            }, {
                data: {
                    id: string;
                    authorId: string;
                    createdAt: Date;
                    updatedAt: Date;
                    storageId: string;
                    name: string;
                    slug: string;
                    description: string;
                    displayName: string;
                    bannerId: string | null;
                } | {};
            }>;
            409: z.ZodObject<{
                title: z.ZodString;
                status: z.ZodNumber;
                detail: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                status: number;
                title: string;
                detail?: string | undefined;
            }, {
                status: number;
                title: string;
                detail?: string | undefined;
            }>;
            403: z.ZodObject<{
                title: z.ZodString;
                status: z.ZodNumber;
                detail: z.ZodOptional<z.ZodString>;
                errors: z.ZodOptional<z.ZodArray<z.ZodType<ErrorObject, z.ZodTypeDef, ErrorObject>, "many">>;
            }, "strip", z.ZodTypeAny, {
                status: number;
                title: string;
                errors?: ErrorObject[] | undefined;
                detail?: string | undefined;
            }, {
                status: number;
                title: string;
                errors?: ErrorObject[] | undefined;
                detail?: string | undefined;
            }>;
            500: z.ZodObject<{
                title: z.ZodString;
                status: z.ZodNumber;
                detail: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                status: number;
                title: string;
                detail?: string | undefined;
            }, {
                status: number;
                title: string;
                detail?: string | undefined;
            }>;
        };
    };
    createProjectGroup: {
        metadata: {
            permissions: "create:projectGroup";
        };
        summary: "Create project group";
        method: "POST";
        body: z.ZodObject<{
            /**
             * bannerId of the file, which the user is authoring
             * allowed: jpeg, png, gif, tiff
             */
            bannerId: z.ZodOptional<z.ZodString>;
            displayName: z.ZodString;
            description: z.ZodString;
            slug: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            slug: string;
            description: string;
            displayName: string;
            bannerId?: string | undefined;
        }, {
            slug: string;
            description: string;
            displayName: string;
            bannerId?: string | undefined;
        }>;
        path: "/api/project-groups";
        headers: z.ZodObject<{
            authorization: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            authorization: string;
        }, {
            authorization: string;
        }>;
        responses: {
            200: z.ZodObject<{
                data: z.ZodType<{
                    id: string;
                    name: string;
                    slug: string;
                    description: string;
                    displayName: string;
                    bannerId: string | null;
                }, z.ZodTypeDef, {
                    id: string;
                    name: string;
                    slug: string;
                    description: string;
                    displayName: string;
                    bannerId: string | null;
                }> | z.ZodObject<{}, "strip", z.ZodTypeAny, {}, {}>;
            }, "strip", z.ZodTypeAny, {
                data: {
                    id: string;
                    name: string;
                    slug: string;
                    description: string;
                    displayName: string;
                    bannerId: string | null;
                } | {};
            }, {
                data: {
                    id: string;
                    name: string;
                    slug: string;
                    description: string;
                    displayName: string;
                    bannerId: string | null;
                } | {};
            }>;
            409: z.ZodObject<{
                title: z.ZodString;
                status: z.ZodNumber;
                detail: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                status: number;
                title: string;
                detail?: string | undefined;
            }, {
                status: number;
                title: string;
                detail?: string | undefined;
            }>;
            403: z.ZodObject<{
                title: z.ZodString;
                status: z.ZodNumber;
                detail: z.ZodOptional<z.ZodString>;
                errors: z.ZodOptional<z.ZodArray<z.ZodType<ErrorObject, z.ZodTypeDef, ErrorObject>, "many">>;
            }, "strip", z.ZodTypeAny, {
                status: number;
                title: string;
                errors?: ErrorObject[] | undefined;
                detail?: string | undefined;
            }, {
                status: number;
                title: string;
                errors?: ErrorObject[] | undefined;
                detail?: string | undefined;
            }>;
            500: z.ZodObject<{
                title: z.ZodString;
                status: z.ZodNumber;
                detail: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                status: number;
                title: string;
                detail?: string | undefined;
            }, {
                status: number;
                title: string;
                detail?: string | undefined;
            }>;
        };
    };
};

declare const projectGroupSchema: {
    BasicDTO: z.ZodObject<{
        id: z.ZodString;
        slug: z.ZodString;
        name: z.ZodString;
        displayName: z.ZodString;
        bannerId: z.ZodNullable<z.ZodString>;
        description: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        id: string;
        name: string;
        slug: string;
        description: string;
        displayName: string;
        bannerId: string | null;
    }, {
        id: string;
        name: string;
        slug: string;
        description: string;
        displayName: string;
        bannerId: string | null;
    }>;
    BasicDetailsDTO: z.ZodObject<z.objectUtil.extendShape<{
        id: z.ZodString;
        slug: z.ZodString;
        name: z.ZodString;
        displayName: z.ZodString;
        bannerId: z.ZodNullable<z.ZodString>;
        description: z.ZodString;
    }, {
        banner: z.ZodNullable<z.ZodString>;
    }>, "strip", z.ZodTypeAny, {
        id: string;
        name: string;
        slug: string;
        description: string;
        displayName: string;
        bannerId: string | null;
        banner: string | null;
    }, {
        id: string;
        name: string;
        slug: string;
        description: string;
        displayName: string;
        bannerId: string | null;
        banner: string | null;
    }>;
    ConfidentialDTO: z.ZodObject<z.objectUtil.extendShape<{
        id: z.ZodString;
        slug: z.ZodString;
        name: z.ZodString;
        displayName: z.ZodString;
        bannerId: z.ZodNullable<z.ZodString>;
        description: z.ZodString;
    }, {
        storageId: z.ZodString;
        authorId: z.ZodString;
        createdAt: z.ZodDate;
        updatedAt: z.ZodDate;
    }>, "strip", z.ZodTypeAny, {
        id: string;
        authorId: string;
        createdAt: Date;
        updatedAt: Date;
        storageId: string;
        name: string;
        slug: string;
        description: string;
        displayName: string;
        bannerId: string | null;
    }, {
        id: string;
        authorId: string;
        createdAt: Date;
        updatedAt: Date;
        storageId: string;
        name: string;
        slug: string;
        description: string;
        displayName: string;
        bannerId: string | null;
    }>;
    ConfidentialDetailsDTO: z.ZodObject<z.objectUtil.extendShape<z.objectUtil.extendShape<{
        id: z.ZodString;
        slug: z.ZodString;
        name: z.ZodString;
        displayName: z.ZodString;
        bannerId: z.ZodNullable<z.ZodString>;
        description: z.ZodString;
    }, {
        storageId: z.ZodString;
        authorId: z.ZodString;
        createdAt: z.ZodDate;
        updatedAt: z.ZodDate;
    }>, {
        banner: z.ZodNullable<z.ZodString>;
        author: z.ZodNullable<z.ZodString>;
    }>, "strip", z.ZodTypeAny, {
        id: string;
        authorId: string;
        createdAt: Date;
        updatedAt: Date;
        storageId: string;
        name: string;
        slug: string;
        author: string | null;
        description: string;
        displayName: string;
        bannerId: string | null;
        banner: string | null;
    }, {
        id: string;
        authorId: string;
        createdAt: Date;
        updatedAt: Date;
        storageId: string;
        name: string;
        slug: string;
        author: string | null;
        description: string;
        displayName: string;
        bannerId: string | null;
        banner: string | null;
    }>;
};

declare const roleContract: {
    createRole: {
        metadata: {
            permissions: {
                middleware: "create:role"[];
            };
        };
        summary: "Create role";
        method: "POST";
        body: z.ZodObject<{
            name: z.ZodString;
            displayName: z.ZodString;
            permissions: z.ZodArray<z.ZodString, "many">;
        }, "strip", z.ZodTypeAny, {
            name: string;
            permissions: string[];
            displayName: string;
        }, {
            name: string;
            permissions: string[];
            displayName: string;
        }>;
        path: "/api/roles";
        headers: z.ZodObject<{
            authorization: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            authorization: string;
        }, {
            authorization: string;
        }>;
        responses: {
            200: z.ZodObject<{
                data: z.ZodType<{
                    id: string;
                    name: string;
                    displayName: string;
                }, z.ZodTypeDef, {
                    id: string;
                    name: string;
                    displayName: string;
                }> | z.ZodObject<{}, "strip", z.ZodTypeAny, {}, {}>;
            }, "strip", z.ZodTypeAny, {
                data: {
                    id: string;
                    name: string;
                    displayName: string;
                } | {};
            }, {
                data: {
                    id: string;
                    name: string;
                    displayName: string;
                } | {};
            }>;
            409: z.ZodObject<{
                title: z.ZodString;
                status: z.ZodNumber;
                detail: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                status: number;
                title: string;
                detail?: string | undefined;
            }, {
                status: number;
                title: string;
                detail?: string | undefined;
            }>;
            403: z.ZodObject<{
                title: z.ZodString;
                status: z.ZodNumber;
                detail: z.ZodOptional<z.ZodString>;
                errors: z.ZodOptional<z.ZodArray<z.ZodType<ErrorObject, z.ZodTypeDef, ErrorObject>, "many">>;
            }, "strip", z.ZodTypeAny, {
                status: number;
                title: string;
                errors?: ErrorObject[] | undefined;
                detail?: string | undefined;
            }, {
                status: number;
                title: string;
                errors?: ErrorObject[] | undefined;
                detail?: string | undefined;
            }>;
            500: z.ZodObject<{
                title: z.ZodString;
                status: z.ZodNumber;
                detail: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                status: number;
                title: string;
                detail?: string | undefined;
            }, {
                status: number;
                title: string;
                detail?: string | undefined;
            }>;
        };
    };
    getRoleById: {
        metadata: {
            permissions: {};
        };
        summary: "Get a role by id";
        method: "GET";
        path: "/api/roles/by/id/:roleId";
        headers: z.ZodOptional<z.ZodObject<{
            authorization: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            authorization: string;
        }, {
            authorization: string;
        }>>;
        responses: {
            200: z.ZodObject<{
                data: z.ZodType<{
                    id: string;
                    name: string;
                    displayName: string;
                } | {
                    id: string;
                    createdAt: string;
                    updatedAt: string;
                    name: string;
                    permissions: string[];
                    displayName: string;
                }, z.ZodTypeDef, {
                    id: string;
                    name: string;
                    displayName: string;
                } | {
                    id: string;
                    createdAt: string;
                    updatedAt: string;
                    name: string;
                    permissions: string[];
                    displayName: string;
                }> | z.ZodObject<{}, "strip", z.ZodTypeAny, {}, {}>;
            }, "strip", z.ZodTypeAny, {
                data: {
                    id: string;
                    name: string;
                    displayName: string;
                } | {
                    id: string;
                    createdAt: string;
                    updatedAt: string;
                    name: string;
                    permissions: string[];
                    displayName: string;
                } | {};
            }, {
                data: {
                    id: string;
                    name: string;
                    displayName: string;
                } | {
                    id: string;
                    createdAt: string;
                    updatedAt: string;
                    name: string;
                    permissions: string[];
                    displayName: string;
                } | {};
            }>;
            404: z.ZodObject<{
                title: z.ZodString;
                status: z.ZodNumber;
                detail: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                status: number;
                title: string;
                detail?: string | undefined;
            }, {
                status: number;
                title: string;
                detail?: string | undefined;
            }>;
            500: z.ZodObject<{
                title: z.ZodString;
                status: z.ZodNumber;
                detail: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                status: number;
                title: string;
                detail?: string | undefined;
            }, {
                status: number;
                title: string;
                detail?: string | undefined;
            }>;
        };
    };
    getRoleByName: {
        metadata: {
            permissions: {};
        };
        summary: "Get a role by name";
        method: "GET";
        path: "/api/roles/by/name/:name";
        headers: z.ZodOptional<z.ZodObject<{
            authorization: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            authorization: string;
        }, {
            authorization: string;
        }>>;
        responses: {
            200: z.ZodObject<{
                data: z.ZodType<{
                    id: string;
                    name: string;
                    displayName: string;
                } | {
                    id: string;
                    createdAt: string;
                    updatedAt: string;
                    name: string;
                    permissions: string[];
                    displayName: string;
                }, z.ZodTypeDef, {
                    id: string;
                    name: string;
                    displayName: string;
                } | {
                    id: string;
                    createdAt: string;
                    updatedAt: string;
                    name: string;
                    permissions: string[];
                    displayName: string;
                }> | z.ZodObject<{}, "strip", z.ZodTypeAny, {}, {}>;
            }, "strip", z.ZodTypeAny, {
                data: {
                    id: string;
                    name: string;
                    displayName: string;
                } | {
                    id: string;
                    createdAt: string;
                    updatedAt: string;
                    name: string;
                    permissions: string[];
                    displayName: string;
                } | {};
            }, {
                data: {
                    id: string;
                    name: string;
                    displayName: string;
                } | {
                    id: string;
                    createdAt: string;
                    updatedAt: string;
                    name: string;
                    permissions: string[];
                    displayName: string;
                } | {};
            }>;
            404: z.ZodObject<{
                title: z.ZodString;
                status: z.ZodNumber;
                detail: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                status: number;
                title: string;
                detail?: string | undefined;
            }, {
                status: number;
                title: string;
                detail?: string | undefined;
            }>;
            500: z.ZodObject<{
                title: z.ZodString;
                status: z.ZodNumber;
                detail: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                status: number;
                title: string;
                detail?: string | undefined;
            }, {
                status: number;
                title: string;
                detail?: string | undefined;
            }>;
        };
    };
    deleteRoleById: {
        metadata: {
            permissions: "delete:role";
        };
        summary: "Delete role by id";
        method: "DELETE";
        body: z.ZodObject<{
            replaceWithRoleId: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            replaceWithRoleId?: string | undefined;
        }, {
            replaceWithRoleId?: string | undefined;
        }>;
        path: "/api/roles/by/id/:roleId";
        headers: z.ZodObject<{
            authorization: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            authorization: string;
        }, {
            authorization: string;
        }>;
        responses: {
            204: z.ZodObject<{}, "strip", z.ZodTypeAny, {}, {}>;
            400: z.ZodObject<{
                title: z.ZodString;
                status: z.ZodNumber;
                detail: z.ZodOptional<z.ZodString>;
                errors: z.ZodOptional<z.ZodArray<z.ZodType<ErrorObject, z.ZodTypeDef, ErrorObject>, "many">>;
            }, "strip", z.ZodTypeAny, {
                status: number;
                title: string;
                errors?: ErrorObject[] | undefined;
                detail?: string | undefined;
            }, {
                status: number;
                title: string;
                errors?: ErrorObject[] | undefined;
                detail?: string | undefined;
            }>;
            403: z.ZodObject<{
                title: z.ZodString;
                status: z.ZodNumber;
                detail: z.ZodOptional<z.ZodString>;
                errors: z.ZodOptional<z.ZodArray<z.ZodType<ErrorObject, z.ZodTypeDef, ErrorObject>, "many">>;
            }, "strip", z.ZodTypeAny, {
                status: number;
                title: string;
                errors?: ErrorObject[] | undefined;
                detail?: string | undefined;
            }, {
                status: number;
                title: string;
                errors?: ErrorObject[] | undefined;
                detail?: string | undefined;
            }>;
            409: z.ZodObject<{
                title: z.ZodString;
                status: z.ZodNumber;
                detail: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                status: number;
                title: string;
                detail?: string | undefined;
            }, {
                status: number;
                title: string;
                detail?: string | undefined;
            }>;
            500: z.ZodObject<{
                title: z.ZodString;
                status: z.ZodNumber;
                detail: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                status: number;
                title: string;
                detail?: string | undefined;
            }, {
                status: number;
                title: string;
                detail?: string | undefined;
            }>;
        };
    };
    editRoleById: {
        metadata: {
            permissions: "update:role";
        };
        summary: "Edit role by id";
        method: "POST";
        body: z.ZodObject<{
            name: z.ZodOptional<z.ZodString>;
            displayName: z.ZodOptional<z.ZodString>;
            permissions: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        }, "strip", z.ZodTypeAny, {
            name?: string | undefined;
            permissions?: string[] | undefined;
            displayName?: string | undefined;
        }, {
            name?: string | undefined;
            permissions?: string[] | undefined;
            displayName?: string | undefined;
        }>;
        path: "/api/roles/by/id/:roleId/edit";
        headers: z.ZodObject<{
            authorization: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            authorization: string;
        }, {
            authorization: string;
        }>;
        responses: {
            200: z.ZodObject<{
                data: z.ZodType<{
                    id: string;
                    name: string;
                    displayName: string;
                }, z.ZodTypeDef, {
                    id: string;
                    name: string;
                    displayName: string;
                }> | z.ZodObject<{}, "strip", z.ZodTypeAny, {}, {}>;
            }, "strip", z.ZodTypeAny, {
                data: {
                    id: string;
                    name: string;
                    displayName: string;
                } | {};
            }, {
                data: {
                    id: string;
                    name: string;
                    displayName: string;
                } | {};
            }>;
            404: z.ZodObject<{
                title: z.ZodString;
                status: z.ZodNumber;
                detail: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                status: number;
                title: string;
                detail?: string | undefined;
            }, {
                status: number;
                title: string;
                detail?: string | undefined;
            }>;
            409: z.ZodObject<{
                title: z.ZodString;
                status: z.ZodNumber;
                detail: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                status: number;
                title: string;
                detail?: string | undefined;
            }, {
                status: number;
                title: string;
                detail?: string | undefined;
            }>;
            403: z.ZodObject<{
                title: z.ZodString;
                status: z.ZodNumber;
                detail: z.ZodOptional<z.ZodString>;
                errors: z.ZodOptional<z.ZodArray<z.ZodType<ErrorObject, z.ZodTypeDef, ErrorObject>, "many">>;
            }, "strip", z.ZodTypeAny, {
                status: number;
                title: string;
                errors?: ErrorObject[] | undefined;
                detail?: string | undefined;
            }, {
                status: number;
                title: string;
                errors?: ErrorObject[] | undefined;
                detail?: string | undefined;
            }>;
            500: z.ZodObject<{
                title: z.ZodString;
                status: z.ZodNumber;
                detail: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                status: number;
                title: string;
                detail?: string | undefined;
            }, {
                status: number;
                title: string;
                detail?: string | undefined;
            }>;
        };
    };
    getRoles: {
        metadata: {
            permissions: {};
        };
        query: z.ZodObject<{
            page: z.ZodOptional<z.ZodString>;
            limit: z.ZodOptional<z.ZodString>;
            search: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            search?: string | undefined;
            limit?: string | undefined;
            page?: string | undefined;
        }, {
            search?: string | undefined;
            limit?: string | undefined;
            page?: string | undefined;
        }>;
        summary: "Get roles";
        method: "GET";
        path: "/api/roles";
        headers: z.ZodObject<{
            authorization: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            authorization: string;
        }, {
            authorization: string;
        }>;
        responses: {
            200: z.ZodObject<{
                data: z.ZodType<{
                    id: string;
                    name: string;
                    displayName: string;
                }[], z.ZodTypeDef, {
                    id: string;
                    name: string;
                    displayName: string;
                }[]> | z.ZodObject<{}, "strip", z.ZodTypeAny, {}, {}>;
            }, "strip", z.ZodTypeAny, {
                data: {
                    id: string;
                    name: string;
                    displayName: string;
                }[] | {};
            }, {
                data: {
                    id: string;
                    name: string;
                    displayName: string;
                }[] | {};
            }>;
            403: z.ZodObject<{
                title: z.ZodString;
                status: z.ZodNumber;
                detail: z.ZodOptional<z.ZodString>;
                errors: z.ZodOptional<z.ZodArray<z.ZodType<ErrorObject, z.ZodTypeDef, ErrorObject>, "many">>;
            }, "strip", z.ZodTypeAny, {
                status: number;
                title: string;
                errors?: ErrorObject[] | undefined;
                detail?: string | undefined;
            }, {
                status: number;
                title: string;
                errors?: ErrorObject[] | undefined;
                detail?: string | undefined;
            }>;
            500: z.ZodObject<{
                title: z.ZodString;
                status: z.ZodNumber;
                detail: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                status: number;
                title: string;
                detail?: string | undefined;
            }, {
                status: number;
                title: string;
                detail?: string | undefined;
            }>;
        };
    };
};

declare const roleSchema: {
    RegularDTO: z.ZodObject<{
        id: z.ZodString;
        name: z.ZodString;
        displayName: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        id: string;
        name: string;
        displayName: string;
    }, {
        id: string;
        name: string;
        displayName: string;
    }>;
    ConfidentialDTO: z.ZodObject<z.objectUtil.extendShape<{
        id: z.ZodString;
        name: z.ZodString;
        displayName: z.ZodString;
    }, {
        permissions: z.ZodArray<z.ZodString, "many">;
        createdAt: z.ZodString;
        updatedAt: z.ZodString;
    }>, "strip", z.ZodTypeAny, {
        id: string;
        createdAt: string;
        updatedAt: string;
        name: string;
        permissions: string[];
        displayName: string;
    }, {
        id: string;
        createdAt: string;
        updatedAt: string;
        name: string;
        permissions: string[];
        displayName: string;
    }>;
};

declare const userContract: {
    login: {
        metadata: {
            isPublic: boolean;
            permissions: {};
        };
        summary: "Login a user";
        method: "POST";
        body: z.ZodObject<{
            email: z.ZodString;
            password: z.ZodString;
        }, "strict", z.ZodTypeAny, {
            email: string;
            password: string;
        }, {
            email: string;
            password: string;
        }>;
        path: "/api/users/login";
        responses: {
            200: z.ZodObject<{
                data: z.ZodType<{
                    accessToken: string;
                    refreshToken: string;
                    expiresIn: number;
                }, z.ZodTypeDef, {
                    accessToken: string;
                    refreshToken: string;
                    expiresIn: number;
                }> | z.ZodObject<{}, "strip", z.ZodTypeAny, {}, {}>;
            }, "strip", z.ZodTypeAny, {
                data: {
                    accessToken: string;
                    refreshToken: string;
                    expiresIn: number;
                } | {};
            }, {
                data: {
                    accessToken: string;
                    refreshToken: string;
                    expiresIn: number;
                } | {};
            }>;
            401: z.ZodObject<{
                title: z.ZodString;
                status: z.ZodNumber;
                detail: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                status: number;
                title: string;
                detail?: string | undefined;
            }, {
                status: number;
                title: string;
                detail?: string | undefined;
            }>;
            409: z.ZodObject<{
                title: z.ZodString;
                status: z.ZodNumber;
                detail: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                status: number;
                title: string;
                detail?: string | undefined;
            }, {
                status: number;
                title: string;
                detail?: string | undefined;
            }>;
            403: z.ZodObject<{
                title: z.ZodString;
                status: z.ZodNumber;
                detail: z.ZodOptional<z.ZodString>;
                errors: z.ZodOptional<z.ZodArray<z.ZodType<ErrorObject, z.ZodTypeDef, ErrorObject>, "many">>;
            }, "strip", z.ZodTypeAny, {
                status: number;
                title: string;
                errors?: ErrorObject[] | undefined;
                detail?: string | undefined;
            }, {
                status: number;
                title: string;
                errors?: ErrorObject[] | undefined;
                detail?: string | undefined;
            }>;
            500: z.ZodObject<{
                title: z.ZodString;
                status: z.ZodNumber;
                detail: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                status: number;
                title: string;
                detail?: string | undefined;
            }, {
                status: number;
                title: string;
                detail?: string | undefined;
            }>;
        };
    };
    logout: {
        metadata: {
            permissions: {};
        };
        summary: "Logout the current user";
        method: "POST";
        body: z.ZodNullable<z.ZodObject<{}, "strip", z.ZodTypeAny, {}, {}>>;
        path: "/api/users/logout";
        headers: z.ZodObject<{
            authorization: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            authorization: string;
        }, {
            authorization: string;
        }>;
        responses: {
            200: z.ZodObject<{
                data: z.ZodType<null, z.ZodTypeDef, null> | z.ZodObject<{}, "strip", z.ZodTypeAny, {}, {}>;
            }, "strip", z.ZodTypeAny, {
                data: {} | null;
            }, {
                data: {} | null;
            }>;
            500: z.ZodObject<{
                title: z.ZodString;
                status: z.ZodNumber;
                detail: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                status: number;
                title: string;
                detail?: string | undefined;
            }, {
                status: number;
                title: string;
                detail?: string | undefined;
            }>;
        };
    };
    refreshAccessToken: {
        metadata: {
            isPublic: boolean;
            permissions: {};
        };
        summary: "Refresh the access token";
        method: "POST";
        body: z.ZodObject<{
            refreshToken: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            refreshToken: string;
        }, {
            refreshToken: string;
        }>;
        path: "/api/users/token/refresh";
        responses: {
            200: z.ZodObject<{
                data: z.ZodType<{
                    accessToken: string;
                    refreshToken: string;
                    expiresIn: number;
                }, z.ZodTypeDef, {
                    accessToken: string;
                    refreshToken: string;
                    expiresIn: number;
                }> | z.ZodObject<{}, "strip", z.ZodTypeAny, {}, {}>;
            }, "strip", z.ZodTypeAny, {
                data: {
                    accessToken: string;
                    refreshToken: string;
                    expiresIn: number;
                } | {};
            }, {
                data: {
                    accessToken: string;
                    refreshToken: string;
                    expiresIn: number;
                } | {};
            }>;
            404: z.ZodObject<{
                title: z.ZodString;
                status: z.ZodNumber;
                detail: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                status: number;
                title: string;
                detail?: string | undefined;
            }, {
                status: number;
                title: string;
                detail?: string | undefined;
            }>;
            500: z.ZodObject<{
                title: z.ZodString;
                status: z.ZodNumber;
                detail: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                status: number;
                title: string;
                detail?: string | undefined;
            }, {
                status: number;
                title: string;
                detail?: string | undefined;
            }>;
        };
    };
    createUser: {
        metadata: {
            isPublic: boolean;
            permissions: {};
        };
        summary: "Create a new user, registration";
        method: "POST";
        body: z.ZodObject<{
            username: z.ZodString;
            password: z.ZodString;
            email: z.ZodString;
        }, "strict", z.ZodTypeAny, {
            username: string;
            email: string;
            password: string;
        }, {
            username: string;
            email: string;
            password: string;
        }>;
        path: "/api/users";
        responses: {
            200: z.ZodObject<{
                data: z.ZodType<{
                    username: string;
                    roleId: string;
                    isVerified: boolean;
                    isDeleted: boolean;
                    isSuspended: boolean;
                    userId: string;
                    email: string;
                    storageId: string;
                    createdAt?: Date | undefined;
                    updatedAt?: Date | undefined;
                    avatarId?: string | undefined;
                    newEmail?: string | undefined;
                    passwordChangedAt?: Date | undefined;
                }, z.ZodTypeDef, {
                    username: string;
                    roleId: string;
                    isVerified: boolean;
                    isDeleted: boolean;
                    isSuspended: boolean;
                    userId: string;
                    email: string;
                    storageId: string;
                    createdAt?: Date | undefined;
                    updatedAt?: Date | undefined;
                    avatarId?: string | undefined;
                    newEmail?: string | undefined;
                    passwordChangedAt?: Date | undefined;
                }> | z.ZodObject<{}, "strip", z.ZodTypeAny, {}, {}>;
            }, "strip", z.ZodTypeAny, {
                data: {
                    username: string;
                    roleId: string;
                    isVerified: boolean;
                    isDeleted: boolean;
                    isSuspended: boolean;
                    userId: string;
                    email: string;
                    storageId: string;
                    createdAt?: Date | undefined;
                    updatedAt?: Date | undefined;
                    avatarId?: string | undefined;
                    newEmail?: string | undefined;
                    passwordChangedAt?: Date | undefined;
                } | {};
            }, {
                data: {
                    username: string;
                    roleId: string;
                    isVerified: boolean;
                    isDeleted: boolean;
                    isSuspended: boolean;
                    userId: string;
                    email: string;
                    storageId: string;
                    createdAt?: Date | undefined;
                    updatedAt?: Date | undefined;
                    avatarId?: string | undefined;
                    newEmail?: string | undefined;
                    passwordChangedAt?: Date | undefined;
                } | {};
            }>;
            409: z.ZodObject<{
                title: z.ZodString;
                status: z.ZodNumber;
                detail: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                status: number;
                title: string;
                detail?: string | undefined;
            }, {
                status: number;
                title: string;
                detail?: string | undefined;
            }>;
            403: z.ZodObject<{
                title: z.ZodString;
                status: z.ZodNumber;
                detail: z.ZodOptional<z.ZodString>;
                errors: z.ZodOptional<z.ZodArray<z.ZodType<ErrorObject, z.ZodTypeDef, ErrorObject>, "many">>;
            }, "strip", z.ZodTypeAny, {
                status: number;
                title: string;
                errors?: ErrorObject[] | undefined;
                detail?: string | undefined;
            }, {
                status: number;
                title: string;
                errors?: ErrorObject[] | undefined;
                detail?: string | undefined;
            }>;
            500: z.ZodObject<{
                title: z.ZodString;
                status: z.ZodNumber;
                detail: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                status: number;
                title: string;
                detail?: string | undefined;
            }, {
                status: number;
                title: string;
                detail?: string | undefined;
            }>;
        };
    };
    editCurrentUser: {
        metadata: {
            permissions: "update:user:own";
        };
        summary: "Edit a current user";
        method: "POST";
        body: z.ZodObject<{
            username: z.ZodOptional<z.ZodString>;
            newEmail: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            username?: string | undefined;
            newEmail?: string | undefined;
        }, {
            username?: string | undefined;
            newEmail?: string | undefined;
        }>;
        path: "/api/users/me/edit";
        headers: z.ZodObject<{
            authorization: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            authorization: string;
        }, {
            authorization: string;
        }>;
        responses: {
            200: z.ZodObject<{
                data: z.ZodType<{
                    username: string;
                    roleId: string;
                    isVerified: boolean;
                    isDeleted: boolean;
                    isSuspended: boolean;
                    userId: string;
                    email: string;
                    storageId: string;
                    createdAt?: Date | undefined;
                    updatedAt?: Date | undefined;
                    avatarId?: string | undefined;
                    newEmail?: string | undefined;
                    passwordChangedAt?: Date | undefined;
                }, z.ZodTypeDef, {
                    username: string;
                    roleId: string;
                    isVerified: boolean;
                    isDeleted: boolean;
                    isSuspended: boolean;
                    userId: string;
                    email: string;
                    storageId: string;
                    createdAt?: Date | undefined;
                    updatedAt?: Date | undefined;
                    avatarId?: string | undefined;
                    newEmail?: string | undefined;
                    passwordChangedAt?: Date | undefined;
                }> | z.ZodObject<{}, "strip", z.ZodTypeAny, {}, {}>;
            }, "strip", z.ZodTypeAny, {
                data: {
                    username: string;
                    roleId: string;
                    isVerified: boolean;
                    isDeleted: boolean;
                    isSuspended: boolean;
                    userId: string;
                    email: string;
                    storageId: string;
                    createdAt?: Date | undefined;
                    updatedAt?: Date | undefined;
                    avatarId?: string | undefined;
                    newEmail?: string | undefined;
                    passwordChangedAt?: Date | undefined;
                } | {};
            }, {
                data: {
                    username: string;
                    roleId: string;
                    isVerified: boolean;
                    isDeleted: boolean;
                    isSuspended: boolean;
                    userId: string;
                    email: string;
                    storageId: string;
                    createdAt?: Date | undefined;
                    updatedAt?: Date | undefined;
                    avatarId?: string | undefined;
                    newEmail?: string | undefined;
                    passwordChangedAt?: Date | undefined;
                } | {};
            }>;
            404: z.ZodObject<{
                title: z.ZodString;
                status: z.ZodNumber;
                detail: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                status: number;
                title: string;
                detail?: string | undefined;
            }, {
                status: number;
                title: string;
                detail?: string | undefined;
            }>;
            403: z.ZodObject<{
                title: z.ZodString;
                status: z.ZodNumber;
                detail: z.ZodOptional<z.ZodString>;
                errors: z.ZodOptional<z.ZodArray<z.ZodType<ErrorObject, z.ZodTypeDef, ErrorObject>, "many">>;
            }, "strip", z.ZodTypeAny, {
                status: number;
                title: string;
                errors?: ErrorObject[] | undefined;
                detail?: string | undefined;
            }, {
                status: number;
                title: string;
                errors?: ErrorObject[] | undefined;
                detail?: string | undefined;
            }>;
            409: z.ZodObject<{
                title: z.ZodString;
                status: z.ZodNumber;
                detail: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                status: number;
                title: string;
                detail?: string | undefined;
            }, {
                status: number;
                title: string;
                detail?: string | undefined;
            }>;
            500: z.ZodObject<{
                title: z.ZodString;
                status: z.ZodNumber;
                detail: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                status: number;
                title: string;
                detail?: string | undefined;
            }, {
                status: number;
                title: string;
                detail?: string | undefined;
            }>;
        };
    };
    editUserById: {
        metadata: {
            permissions: "update:user:any";
        };
        summary: "Edit any user";
        method: "POST";
        body: z.ZodObject<{
            /**
             * @type {string} - user username
             */
            username: z.ZodOptional<z.ZodString>;
            /**
             * @type {string} - user email
             */
            email: z.ZodOptional<z.ZodString>;
            /**
             * @type {string} - user role id
             */
            roleId: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            username?: string | undefined;
            roleId?: string | undefined;
            email?: string | undefined;
        }, {
            username?: string | undefined;
            roleId?: string | undefined;
            email?: string | undefined;
        }>;
        path: "/api/users/by/id/:userId/edit";
        headers: z.ZodObject<{
            authorization: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            authorization: string;
        }, {
            authorization: string;
        }>;
        responses: {
            200: z.ZodObject<{
                data: z.ZodType<{
                    username: string;
                    roleId: string;
                    isVerified: boolean;
                    isDeleted: boolean;
                    isSuspended: boolean;
                    userId: string;
                    email: string;
                    storageId: string;
                    createdAt?: Date | undefined;
                    updatedAt?: Date | undefined;
                    avatarId?: string | undefined;
                    newEmail?: string | undefined;
                    passwordChangedAt?: Date | undefined;
                }, z.ZodTypeDef, {
                    username: string;
                    roleId: string;
                    isVerified: boolean;
                    isDeleted: boolean;
                    isSuspended: boolean;
                    userId: string;
                    email: string;
                    storageId: string;
                    createdAt?: Date | undefined;
                    updatedAt?: Date | undefined;
                    avatarId?: string | undefined;
                    newEmail?: string | undefined;
                    passwordChangedAt?: Date | undefined;
                }> | z.ZodObject<{}, "strip", z.ZodTypeAny, {}, {}>;
            }, "strip", z.ZodTypeAny, {
                data: {
                    username: string;
                    roleId: string;
                    isVerified: boolean;
                    isDeleted: boolean;
                    isSuspended: boolean;
                    userId: string;
                    email: string;
                    storageId: string;
                    createdAt?: Date | undefined;
                    updatedAt?: Date | undefined;
                    avatarId?: string | undefined;
                    newEmail?: string | undefined;
                    passwordChangedAt?: Date | undefined;
                } | {};
            }, {
                data: {
                    username: string;
                    roleId: string;
                    isVerified: boolean;
                    isDeleted: boolean;
                    isSuspended: boolean;
                    userId: string;
                    email: string;
                    storageId: string;
                    createdAt?: Date | undefined;
                    updatedAt?: Date | undefined;
                    avatarId?: string | undefined;
                    newEmail?: string | undefined;
                    passwordChangedAt?: Date | undefined;
                } | {};
            }>;
            403: z.ZodObject<{
                title: z.ZodString;
                status: z.ZodNumber;
                detail: z.ZodOptional<z.ZodString>;
                errors: z.ZodOptional<z.ZodArray<z.ZodType<ErrorObject, z.ZodTypeDef, ErrorObject>, "many">>;
            }, "strip", z.ZodTypeAny, {
                status: number;
                title: string;
                errors?: ErrorObject[] | undefined;
                detail?: string | undefined;
            }, {
                status: number;
                title: string;
                errors?: ErrorObject[] | undefined;
                detail?: string | undefined;
            }>;
            404: z.ZodObject<{
                title: z.ZodString;
                status: z.ZodNumber;
                detail: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                status: number;
                title: string;
                detail?: string | undefined;
            }, {
                status: number;
                title: string;
                detail?: string | undefined;
            }>;
            409: z.ZodObject<{
                title: z.ZodString;
                status: z.ZodNumber;
                detail: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                status: number;
                title: string;
                detail?: string | undefined;
            }, {
                status: number;
                title: string;
                detail?: string | undefined;
            }>;
            500: z.ZodObject<{
                title: z.ZodString;
                status: z.ZodNumber;
                detail: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                status: number;
                title: string;
                detail?: string | undefined;
            }, {
                status: number;
                title: string;
                detail?: string | undefined;
            }>;
        };
    };
    getCurrentUser: {
        metadata: {
            permissions: "read:user:own";
        };
        summary: "Get the current user";
        method: "GET";
        path: "/api/users/me";
        headers: z.ZodObject<{
            authorization: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            authorization: string;
        }, {
            authorization: string;
        }>;
        responses: {
            200: z.ZodObject<{
                data: z.ZodType<{
                    username: string;
                    roleId: string;
                    isVerified: boolean;
                    isDeleted: boolean;
                    isSuspended: boolean;
                    userId: string;
                    email: string;
                    storageId: string;
                    createdAt?: Date | undefined;
                    updatedAt?: Date | undefined;
                    avatarId?: string | undefined;
                    newEmail?: string | undefined;
                    passwordChangedAt?: Date | undefined;
                }, z.ZodTypeDef, {
                    username: string;
                    roleId: string;
                    isVerified: boolean;
                    isDeleted: boolean;
                    isSuspended: boolean;
                    userId: string;
                    email: string;
                    storageId: string;
                    createdAt?: Date | undefined;
                    updatedAt?: Date | undefined;
                    avatarId?: string | undefined;
                    newEmail?: string | undefined;
                    passwordChangedAt?: Date | undefined;
                }> | z.ZodObject<{}, "strip", z.ZodTypeAny, {}, {}>;
            }, "strip", z.ZodTypeAny, {
                data: {
                    username: string;
                    roleId: string;
                    isVerified: boolean;
                    isDeleted: boolean;
                    isSuspended: boolean;
                    userId: string;
                    email: string;
                    storageId: string;
                    createdAt?: Date | undefined;
                    updatedAt?: Date | undefined;
                    avatarId?: string | undefined;
                    newEmail?: string | undefined;
                    passwordChangedAt?: Date | undefined;
                } | {};
            }, {
                data: {
                    username: string;
                    roleId: string;
                    isVerified: boolean;
                    isDeleted: boolean;
                    isSuspended: boolean;
                    userId: string;
                    email: string;
                    storageId: string;
                    createdAt?: Date | undefined;
                    updatedAt?: Date | undefined;
                    avatarId?: string | undefined;
                    newEmail?: string | undefined;
                    passwordChangedAt?: Date | undefined;
                } | {};
            }>;
            500: z.ZodObject<{
                title: z.ZodString;
                status: z.ZodNumber;
                detail: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                status: number;
                title: string;
                detail?: string | undefined;
            }, {
                status: number;
                title: string;
                detail?: string | undefined;
            }>;
        };
    };
    getUserByUsername: {
        metadata: {
            permissions: {};
        };
        summary: "Get a user by username";
        method: "GET";
        path: "/api/users/by/username/:username";
        headers: z.ZodObject<{
            authorization: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            authorization: string;
        }, {
            authorization: string;
        }>;
        responses: {
            200: z.ZodObject<{
                data: z.ZodType<{
                    username: string;
                    roleId: string;
                    isVerified: boolean;
                    isDeleted: boolean;
                    isSuspended: boolean;
                    createdAt?: Date | undefined;
                    avatarId?: string | undefined;
                } | {
                    username: string;
                    roleId: string;
                    isVerified: boolean;
                    isDeleted: boolean;
                    isSuspended: boolean;
                    userId: string;
                    email: string;
                    storageId: string;
                    createdAt?: Date | undefined;
                    updatedAt?: Date | undefined;
                    avatarId?: string | undefined;
                    newEmail?: string | undefined;
                    passwordChangedAt?: Date | undefined;
                }, z.ZodTypeDef, {
                    username: string;
                    roleId: string;
                    isVerified: boolean;
                    isDeleted: boolean;
                    isSuspended: boolean;
                    createdAt?: Date | undefined;
                    avatarId?: string | undefined;
                } | {
                    username: string;
                    roleId: string;
                    isVerified: boolean;
                    isDeleted: boolean;
                    isSuspended: boolean;
                    userId: string;
                    email: string;
                    storageId: string;
                    createdAt?: Date | undefined;
                    updatedAt?: Date | undefined;
                    avatarId?: string | undefined;
                    newEmail?: string | undefined;
                    passwordChangedAt?: Date | undefined;
                }> | z.ZodObject<{}, "strip", z.ZodTypeAny, {}, {}>;
            }, "strip", z.ZodTypeAny, {
                data: {
                    username: string;
                    roleId: string;
                    isVerified: boolean;
                    isDeleted: boolean;
                    isSuspended: boolean;
                    createdAt?: Date | undefined;
                    avatarId?: string | undefined;
                } | {
                    username: string;
                    roleId: string;
                    isVerified: boolean;
                    isDeleted: boolean;
                    isSuspended: boolean;
                    userId: string;
                    email: string;
                    storageId: string;
                    createdAt?: Date | undefined;
                    updatedAt?: Date | undefined;
                    avatarId?: string | undefined;
                    newEmail?: string | undefined;
                    passwordChangedAt?: Date | undefined;
                } | {};
            }, {
                data: {
                    username: string;
                    roleId: string;
                    isVerified: boolean;
                    isDeleted: boolean;
                    isSuspended: boolean;
                    createdAt?: Date | undefined;
                    avatarId?: string | undefined;
                } | {
                    username: string;
                    roleId: string;
                    isVerified: boolean;
                    isDeleted: boolean;
                    isSuspended: boolean;
                    userId: string;
                    email: string;
                    storageId: string;
                    createdAt?: Date | undefined;
                    updatedAt?: Date | undefined;
                    avatarId?: string | undefined;
                    newEmail?: string | undefined;
                    passwordChangedAt?: Date | undefined;
                } | {};
            }>;
            404: z.ZodObject<{
                title: z.ZodString;
                status: z.ZodNumber;
                detail: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                status: number;
                title: string;
                detail?: string | undefined;
            }, {
                status: number;
                title: string;
                detail?: string | undefined;
            }>;
            500: z.ZodObject<{
                title: z.ZodString;
                status: z.ZodNumber;
                detail: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                status: number;
                title: string;
                detail?: string | undefined;
            }, {
                status: number;
                title: string;
                detail?: string | undefined;
            }>;
        };
    };
    getUserById: {
        metadata: {
            permissions: {};
        };
        summary: "Get a post by id";
        method: "GET";
        path: "/api/users/by/id/:userId";
        headers: z.ZodObject<{
            authorization: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            authorization: string;
        }, {
            authorization: string;
        }>;
        responses: {
            200: z.ZodObject<{
                data: z.ZodType<{
                    username: string;
                    roleId: string;
                    isVerified: boolean;
                    isDeleted: boolean;
                    isSuspended: boolean;
                    createdAt?: Date | undefined;
                    avatarId?: string | undefined;
                } | {
                    username: string;
                    roleId: string;
                    isVerified: boolean;
                    isDeleted: boolean;
                    isSuspended: boolean;
                    userId: string;
                    email: string;
                    storageId: string;
                    createdAt?: Date | undefined;
                    updatedAt?: Date | undefined;
                    avatarId?: string | undefined;
                    newEmail?: string | undefined;
                    passwordChangedAt?: Date | undefined;
                }, z.ZodTypeDef, {
                    username: string;
                    roleId: string;
                    isVerified: boolean;
                    isDeleted: boolean;
                    isSuspended: boolean;
                    createdAt?: Date | undefined;
                    avatarId?: string | undefined;
                } | {
                    username: string;
                    roleId: string;
                    isVerified: boolean;
                    isDeleted: boolean;
                    isSuspended: boolean;
                    userId: string;
                    email: string;
                    storageId: string;
                    createdAt?: Date | undefined;
                    updatedAt?: Date | undefined;
                    avatarId?: string | undefined;
                    newEmail?: string | undefined;
                    passwordChangedAt?: Date | undefined;
                }> | z.ZodObject<{}, "strip", z.ZodTypeAny, {}, {}>;
            }, "strip", z.ZodTypeAny, {
                data: {
                    username: string;
                    roleId: string;
                    isVerified: boolean;
                    isDeleted: boolean;
                    isSuspended: boolean;
                    createdAt?: Date | undefined;
                    avatarId?: string | undefined;
                } | {
                    username: string;
                    roleId: string;
                    isVerified: boolean;
                    isDeleted: boolean;
                    isSuspended: boolean;
                    userId: string;
                    email: string;
                    storageId: string;
                    createdAt?: Date | undefined;
                    updatedAt?: Date | undefined;
                    avatarId?: string | undefined;
                    newEmail?: string | undefined;
                    passwordChangedAt?: Date | undefined;
                } | {};
            }, {
                data: {
                    username: string;
                    roleId: string;
                    isVerified: boolean;
                    isDeleted: boolean;
                    isSuspended: boolean;
                    createdAt?: Date | undefined;
                    avatarId?: string | undefined;
                } | {
                    username: string;
                    roleId: string;
                    isVerified: boolean;
                    isDeleted: boolean;
                    isSuspended: boolean;
                    userId: string;
                    email: string;
                    storageId: string;
                    createdAt?: Date | undefined;
                    updatedAt?: Date | undefined;
                    avatarId?: string | undefined;
                    newEmail?: string | undefined;
                    passwordChangedAt?: Date | undefined;
                } | {};
            }>;
            404: z.ZodObject<{
                title: z.ZodString;
                status: z.ZodNumber;
                detail: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                status: number;
                title: string;
                detail?: string | undefined;
            }, {
                status: number;
                title: string;
                detail?: string | undefined;
            }>;
            500: z.ZodObject<{
                title: z.ZodString;
                status: z.ZodNumber;
                detail: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                status: number;
                title: string;
                detail?: string | undefined;
            }, {
                status: number;
                title: string;
                detail?: string | undefined;
            }>;
        };
    };
    verifyNewEmail: {
        metadata: {
            permissions: {};
        };
        summary: "Verify a new email";
        method: "PATCH";
        body: z.ZodNullable<z.ZodObject<{}, "strip", z.ZodTypeAny, {}, {}>>;
        path: "/api/users/verify-email/:token";
        responses: {
            204: z.ZodObject<{
                data: z.ZodType<null, z.ZodTypeDef, null> | z.ZodObject<{}, "strip", z.ZodTypeAny, {}, {}>;
            }, "strip", z.ZodTypeAny, {
                data: {} | null;
            }, {
                data: {} | null;
            }>;
            404: z.ZodObject<{
                title: z.ZodString;
                status: z.ZodNumber;
                detail: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                status: number;
                title: string;
                detail?: string | undefined;
            }, {
                status: number;
                title: string;
                detail?: string | undefined;
            }>;
            409: z.ZodObject<{
                title: z.ZodString;
                status: z.ZodNumber;
                detail: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                status: number;
                title: string;
                detail?: string | undefined;
            }, {
                status: number;
                title: string;
                detail?: string | undefined;
            }>;
            500: z.ZodObject<{
                title: z.ZodString;
                status: z.ZodNumber;
                detail: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                status: number;
                title: string;
                detail?: string | undefined;
            }, {
                status: number;
                title: string;
                detail?: string | undefined;
            }>;
        };
    };
};

declare const userSchema: {
    ConfidentialDTO: z.ZodObject<z.objectUtil.extendShape<{
        username: z.ZodString;
        avatarId: z.ZodOptional<z.ZodString>;
        roleId: z.ZodString;
        isVerified: z.ZodBoolean;
        isDeleted: z.ZodBoolean;
        isSuspended: z.ZodBoolean;
        createdAt: z.ZodOptional<z.ZodDate>;
    }, {
        userId: z.ZodString;
        email: z.ZodString;
        newEmail: z.ZodOptional<z.ZodString>;
        passwordChangedAt: z.ZodOptional<z.ZodDate>;
        storageId: z.ZodString;
        updatedAt: z.ZodOptional<z.ZodDate>;
    }>, "strip", z.ZodTypeAny, {
        username: string;
        roleId: string;
        isVerified: boolean;
        isDeleted: boolean;
        isSuspended: boolean;
        userId: string;
        email: string;
        storageId: string;
        createdAt?: Date | undefined;
        updatedAt?: Date | undefined;
        avatarId?: string | undefined;
        newEmail?: string | undefined;
        passwordChangedAt?: Date | undefined;
    }, {
        username: string;
        roleId: string;
        isVerified: boolean;
        isDeleted: boolean;
        isSuspended: boolean;
        userId: string;
        email: string;
        storageId: string;
        createdAt?: Date | undefined;
        updatedAt?: Date | undefined;
        avatarId?: string | undefined;
        newEmail?: string | undefined;
        passwordChangedAt?: Date | undefined;
    }>;
    PublicDTO: z.ZodObject<{
        username: z.ZodString;
        avatarId: z.ZodOptional<z.ZodString>;
        roleId: z.ZodString;
        isVerified: z.ZodBoolean;
        isDeleted: z.ZodBoolean;
        isSuspended: z.ZodBoolean;
        createdAt: z.ZodOptional<z.ZodDate>;
    }, "strip", z.ZodTypeAny, {
        username: string;
        roleId: string;
        isVerified: boolean;
        isDeleted: boolean;
        isSuspended: boolean;
        createdAt?: Date | undefined;
        avatarId?: string | undefined;
    }, {
        username: string;
        roleId: string;
        isVerified: boolean;
        isDeleted: boolean;
        isSuspended: boolean;
        createdAt?: Date | undefined;
        avatarId?: string | undefined;
    }>;
    BasicDTO: z.ZodObject<{
        username: z.ZodString;
        avatarId: z.ZodOptional<z.ZodString>;
        roleId: z.ZodString;
        isVerified: z.ZodBoolean;
        isDeleted: z.ZodBoolean;
        isSuspended: z.ZodBoolean;
        createdAt: z.ZodOptional<z.ZodDate>;
    }, "strip", z.ZodTypeAny, {
        username: string;
        roleId: string;
        isVerified: boolean;
        isDeleted: boolean;
        isSuspended: boolean;
        createdAt?: Date | undefined;
        avatarId?: string | undefined;
    }, {
        username: string;
        roleId: string;
        isVerified: boolean;
        isDeleted: boolean;
        isSuspended: boolean;
        createdAt?: Date | undefined;
        avatarId?: string | undefined;
    }>;
};

declare const formContract: {
    createForm: {
        metadata: {
            readonly permissions: {};
        };
        summary: "Create form";
        method: "POST";
        body: z.ZodObject<{
            name: z.ZodString;
            displayName: z.ZodString;
            projectId: z.ZodString;
            schema: z.ZodArray<z.ZodDiscriminatedUnion<"type", [z.ZodObject<z.objectUtil.extendShape<{
                name: z.ZodString;
                label: z.ZodString;
                placeholder: z.ZodOptional<z.ZodString>;
                helperText: z.ZodOptional<z.ZodString>;
                visibility: z.ZodString;
                required: z.ZodOptional<z.ZodBoolean>;
            }, {
                type: z.ZodLiteral<"NUMBER">;
                options: z.ZodObject<{
                    min: z.ZodOptional<z.ZodNumber>;
                    max: z.ZodOptional<z.ZodNumber>;
                    noDecimal: z.ZodOptional<z.ZodBoolean>;
                }, "strip", z.ZodTypeAny, {
                    min?: number | undefined;
                    max?: number | undefined;
                    noDecimal?: boolean | undefined;
                }, {
                    min?: number | undefined;
                    max?: number | undefined;
                    noDecimal?: boolean | undefined;
                }>;
            }>, "strip", z.ZodTypeAny, {
                options: {
                    min?: number | undefined;
                    max?: number | undefined;
                    noDecimal?: boolean | undefined;
                };
                type: "NUMBER";
                name: string;
                label: string;
                visibility: string;
                placeholder?: string | undefined;
                helperText?: string | undefined;
                required?: boolean | undefined;
            }, {
                options: {
                    min?: number | undefined;
                    max?: number | undefined;
                    noDecimal?: boolean | undefined;
                };
                type: "NUMBER";
                name: string;
                label: string;
                visibility: string;
                placeholder?: string | undefined;
                helperText?: string | undefined;
                required?: boolean | undefined;
            }>, z.ZodObject<z.objectUtil.extendShape<{
                name: z.ZodString;
                label: z.ZodString;
                placeholder: z.ZodOptional<z.ZodString>;
                helperText: z.ZodOptional<z.ZodString>;
                visibility: z.ZodString;
                required: z.ZodOptional<z.ZodBoolean>;
            }, {
                type: z.ZodLiteral<"TEXT">;
                options: z.ZodObject<{
                    minLength: z.ZodOptional<z.ZodNumber>;
                    maxLength: z.ZodOptional<z.ZodNumber>;
                    pattern: z.ZodOptional<z.ZodString>;
                }, "strip", z.ZodTypeAny, {
                    minLength?: number | undefined;
                    maxLength?: number | undefined;
                    pattern?: string | undefined;
                }, {
                    minLength?: number | undefined;
                    maxLength?: number | undefined;
                    pattern?: string | undefined;
                }>;
            }>, "strip", z.ZodTypeAny, {
                options: {
                    minLength?: number | undefined;
                    maxLength?: number | undefined;
                    pattern?: string | undefined;
                };
                type: "TEXT";
                name: string;
                label: string;
                visibility: string;
                placeholder?: string | undefined;
                helperText?: string | undefined;
                required?: boolean | undefined;
            }, {
                options: {
                    minLength?: number | undefined;
                    maxLength?: number | undefined;
                    pattern?: string | undefined;
                };
                type: "TEXT";
                name: string;
                label: string;
                visibility: string;
                placeholder?: string | undefined;
                helperText?: string | undefined;
                required?: boolean | undefined;
            }>, z.ZodObject<z.objectUtil.extendShape<{
                name: z.ZodString;
                label: z.ZodString;
                placeholder: z.ZodOptional<z.ZodString>;
                helperText: z.ZodOptional<z.ZodString>;
                visibility: z.ZodString;
                required: z.ZodOptional<z.ZodBoolean>;
            }, {
                type: z.ZodLiteral<"SELECT">;
                options: z.ZodObject<{
                    isMulti: z.ZodBoolean;
                    optionList: z.ZodArray<z.ZodString, "many">;
                    maxSelect: z.ZodNullable<z.ZodNumber>;
                    minSelect: z.ZodNullable<z.ZodNumber>;
                }, "strip", z.ZodTypeAny, {
                    isMulti: boolean;
                    optionList: string[];
                    maxSelect: number | null;
                    minSelect: number | null;
                }, {
                    isMulti: boolean;
                    optionList: string[];
                    maxSelect: number | null;
                    minSelect: number | null;
                }>;
            }>, "strip", z.ZodTypeAny, {
                options: {
                    isMulti: boolean;
                    optionList: string[];
                    maxSelect: number | null;
                    minSelect: number | null;
                };
                type: "SELECT";
                name: string;
                label: string;
                visibility: string;
                placeholder?: string | undefined;
                helperText?: string | undefined;
                required?: boolean | undefined;
            }, {
                options: {
                    isMulti: boolean;
                    optionList: string[];
                    maxSelect: number | null;
                    minSelect: number | null;
                };
                type: "SELECT";
                name: string;
                label: string;
                visibility: string;
                placeholder?: string | undefined;
                helperText?: string | undefined;
                required?: boolean | undefined;
            }>, z.ZodObject<z.objectUtil.extendShape<{
                name: z.ZodString;
                label: z.ZodString;
                placeholder: z.ZodOptional<z.ZodString>;
                helperText: z.ZodOptional<z.ZodString>;
                visibility: z.ZodString;
                required: z.ZodOptional<z.ZodBoolean>;
            }, {
                type: z.ZodLiteral<"DATETIME">;
                options: z.ZodObject<{
                    min: z.ZodOptional<z.ZodString>;
                    max: z.ZodOptional<z.ZodString>;
                }, "strip", z.ZodTypeAny, {
                    min?: string | undefined;
                    max?: string | undefined;
                }, {
                    min?: string | undefined;
                    max?: string | undefined;
                }>;
            }>, "strip", z.ZodTypeAny, {
                options: {
                    min?: string | undefined;
                    max?: string | undefined;
                };
                type: "DATETIME";
                name: string;
                label: string;
                visibility: string;
                placeholder?: string | undefined;
                helperText?: string | undefined;
                required?: boolean | undefined;
            }, {
                options: {
                    min?: string | undefined;
                    max?: string | undefined;
                };
                type: "DATETIME";
                name: string;
                label: string;
                visibility: string;
                placeholder?: string | undefined;
                helperText?: string | undefined;
                required?: boolean | undefined;
            }>, z.ZodObject<z.objectUtil.extendShape<{
                name: z.ZodString;
                label: z.ZodString;
                placeholder: z.ZodOptional<z.ZodString>;
                helperText: z.ZodOptional<z.ZodString>;
                visibility: z.ZodString;
                required: z.ZodOptional<z.ZodBoolean>;
            }, {
                type: z.ZodLiteral<"RICHTEXT">;
                options: z.ZodObject<{
                    minLength: z.ZodOptional<z.ZodNumber>;
                    maxLength: z.ZodOptional<z.ZodNumber>;
                    disableImages: z.ZodOptional<z.ZodBoolean>;
                }, "strip", z.ZodTypeAny, {
                    minLength?: number | undefined;
                    maxLength?: number | undefined;
                    disableImages?: boolean | undefined;
                }, {
                    minLength?: number | undefined;
                    maxLength?: number | undefined;
                    disableImages?: boolean | undefined;
                }>;
            }>, "strip", z.ZodTypeAny, {
                options: {
                    minLength?: number | undefined;
                    maxLength?: number | undefined;
                    disableImages?: boolean | undefined;
                };
                type: "RICHTEXT";
                name: string;
                label: string;
                visibility: string;
                placeholder?: string | undefined;
                helperText?: string | undefined;
                required?: boolean | undefined;
            }, {
                options: {
                    minLength?: number | undefined;
                    maxLength?: number | undefined;
                    disableImages?: boolean | undefined;
                };
                type: "RICHTEXT";
                name: string;
                label: string;
                visibility: string;
                placeholder?: string | undefined;
                helperText?: string | undefined;
                required?: boolean | undefined;
            }>, z.ZodObject<z.objectUtil.extendShape<{
                name: z.ZodString;
                type: z.ZodString;
            }, {
                type: z.ZodLiteral<"SEPARATOR">;
            }>, "strip", z.ZodTypeAny, {
                type: "SEPARATOR";
                name: string;
            }, {
                type: "SEPARATOR";
                name: string;
            }>]>, "many">;
        }, "strip", z.ZodTypeAny, {
            name: string;
            displayName: string;
            projectId: string;
            schema: ({
                options: {
                    min?: number | undefined;
                    max?: number | undefined;
                    noDecimal?: boolean | undefined;
                };
                type: "NUMBER";
                name: string;
                label: string;
                visibility: string;
                placeholder?: string | undefined;
                helperText?: string | undefined;
                required?: boolean | undefined;
            } | {
                options: {
                    minLength?: number | undefined;
                    maxLength?: number | undefined;
                    pattern?: string | undefined;
                };
                type: "TEXT";
                name: string;
                label: string;
                visibility: string;
                placeholder?: string | undefined;
                helperText?: string | undefined;
                required?: boolean | undefined;
            } | {
                options: {
                    isMulti: boolean;
                    optionList: string[];
                    maxSelect: number | null;
                    minSelect: number | null;
                };
                type: "SELECT";
                name: string;
                label: string;
                visibility: string;
                placeholder?: string | undefined;
                helperText?: string | undefined;
                required?: boolean | undefined;
            } | {
                options: {
                    min?: string | undefined;
                    max?: string | undefined;
                };
                type: "DATETIME";
                name: string;
                label: string;
                visibility: string;
                placeholder?: string | undefined;
                helperText?: string | undefined;
                required?: boolean | undefined;
            } | {
                options: {
                    minLength?: number | undefined;
                    maxLength?: number | undefined;
                    disableImages?: boolean | undefined;
                };
                type: "RICHTEXT";
                name: string;
                label: string;
                visibility: string;
                placeholder?: string | undefined;
                helperText?: string | undefined;
                required?: boolean | undefined;
            } | {
                type: "SEPARATOR";
                name: string;
            })[];
        }, {
            name: string;
            displayName: string;
            projectId: string;
            schema: ({
                options: {
                    min?: number | undefined;
                    max?: number | undefined;
                    noDecimal?: boolean | undefined;
                };
                type: "NUMBER";
                name: string;
                label: string;
                visibility: string;
                placeholder?: string | undefined;
                helperText?: string | undefined;
                required?: boolean | undefined;
            } | {
                options: {
                    minLength?: number | undefined;
                    maxLength?: number | undefined;
                    pattern?: string | undefined;
                };
                type: "TEXT";
                name: string;
                label: string;
                visibility: string;
                placeholder?: string | undefined;
                helperText?: string | undefined;
                required?: boolean | undefined;
            } | {
                options: {
                    isMulti: boolean;
                    optionList: string[];
                    maxSelect: number | null;
                    minSelect: number | null;
                };
                type: "SELECT";
                name: string;
                label: string;
                visibility: string;
                placeholder?: string | undefined;
                helperText?: string | undefined;
                required?: boolean | undefined;
            } | {
                options: {
                    min?: string | undefined;
                    max?: string | undefined;
                };
                type: "DATETIME";
                name: string;
                label: string;
                visibility: string;
                placeholder?: string | undefined;
                helperText?: string | undefined;
                required?: boolean | undefined;
            } | {
                options: {
                    minLength?: number | undefined;
                    maxLength?: number | undefined;
                    disableImages?: boolean | undefined;
                };
                type: "RICHTEXT";
                name: string;
                label: string;
                visibility: string;
                placeholder?: string | undefined;
                helperText?: string | undefined;
                required?: boolean | undefined;
            } | {
                type: "SEPARATOR";
                name: string;
            })[];
        }>;
        path: "/api/forms";
        headers: z.ZodObject<{
            authorization: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            authorization: string;
        }, {
            authorization: string;
        }>;
        responses: {
            200: z.ZodObject<{
                data: z.ZodType<{
                    id: string;
                    authorId: string;
                    name: string;
                    displayName: string;
                    fields: {
                        type: string;
                        name: string;
                        label: string;
                        required: boolean;
                        displayName: string;
                        options?: any;
                    }[];
                    project: {
                        id: string;
                        name: string;
                        slug: string;
                        displayName: string;
                        associatedAt: Date;
                    } | null;
                    fieldsLimit: number;
                }, z.ZodTypeDef, {
                    id: string;
                    authorId: string;
                    name: string;
                    displayName: string;
                    fields: {
                        type: string;
                        name: string;
                        label: string;
                        required: boolean;
                        displayName: string;
                        options?: any;
                    }[];
                    project: {
                        id: string;
                        name: string;
                        slug: string;
                        displayName: string;
                        associatedAt: Date;
                    } | null;
                    fieldsLimit: number;
                }> | z.ZodObject<{}, "strip", z.ZodTypeAny, {}, {}>;
            }, "strip", z.ZodTypeAny, {
                data: {
                    id: string;
                    authorId: string;
                    name: string;
                    displayName: string;
                    fields: {
                        type: string;
                        name: string;
                        label: string;
                        required: boolean;
                        displayName: string;
                        options?: any;
                    }[];
                    project: {
                        id: string;
                        name: string;
                        slug: string;
                        displayName: string;
                        associatedAt: Date;
                    } | null;
                    fieldsLimit: number;
                } | {};
            }, {
                data: {
                    id: string;
                    authorId: string;
                    name: string;
                    displayName: string;
                    fields: {
                        type: string;
                        name: string;
                        label: string;
                        required: boolean;
                        displayName: string;
                        options?: any;
                    }[];
                    project: {
                        id: string;
                        name: string;
                        slug: string;
                        displayName: string;
                        associatedAt: Date;
                    } | null;
                    fieldsLimit: number;
                } | {};
            }>;
            403: z.ZodObject<{
                title: z.ZodString;
                status: z.ZodNumber;
                detail: z.ZodOptional<z.ZodString>;
                errors: z.ZodOptional<z.ZodArray<z.ZodType<ErrorObject, z.ZodTypeDef, ErrorObject>, "many">>;
            }, "strip", z.ZodTypeAny, {
                status: number;
                title: string;
                errors?: ErrorObject[] | undefined;
                detail?: string | undefined;
            }, {
                status: number;
                title: string;
                errors?: ErrorObject[] | undefined;
                detail?: string | undefined;
            }>;
            409: z.ZodObject<{
                title: z.ZodString;
                status: z.ZodNumber;
                detail: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                status: number;
                title: string;
                detail?: string | undefined;
            }, {
                status: number;
                title: string;
                detail?: string | undefined;
            }>;
            500: z.ZodObject<{
                message: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                message: string;
            }, {
                message: string;
            }>;
        };
    };
    getFormById: {
        metadata: {
            isPublic: boolean;
            permissions: {};
        };
        summary: "Get a form by id";
        method: "GET";
        path: "/api/forms/by/id/:formId";
        headers: z.ZodOptional<z.ZodObject<{
            authorization: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            authorization: string;
        }, {
            authorization: string;
        }>>;
        responses: {
            200: z.ZodObject<{
                data: z.ZodType<{
                    id: string;
                    authorId: string;
                    name: string;
                    displayName: string;
                    fields: {
                        type: string;
                        name: string;
                        label: string;
                        required: boolean;
                        displayName: string;
                        options?: any;
                    }[];
                    project: {
                        id: string;
                        name: string;
                        slug: string;
                        displayName: string;
                        associatedAt: Date;
                    } | null;
                    fieldsLimit: number;
                } | {
                    id: string;
                    authorId: string;
                    createdAt: Date;
                    updatedAt: Date;
                    name: string;
                    displayName: string;
                    fields: {
                        type: string;
                        name: string;
                        label: string;
                        required: boolean;
                        displayName: string;
                        options?: any;
                    }[];
                    project: {
                        id: string;
                        name: string;
                        slug: string;
                        displayName: string;
                        associatedAt: Date;
                    } | null;
                    fieldsLimit: number;
                }, z.ZodTypeDef, {
                    id: string;
                    authorId: string;
                    name: string;
                    displayName: string;
                    fields: {
                        type: string;
                        name: string;
                        label: string;
                        required: boolean;
                        displayName: string;
                        options?: any;
                    }[];
                    project: {
                        id: string;
                        name: string;
                        slug: string;
                        displayName: string;
                        associatedAt: Date;
                    } | null;
                    fieldsLimit: number;
                } | {
                    id: string;
                    authorId: string;
                    createdAt: Date;
                    updatedAt: Date;
                    name: string;
                    displayName: string;
                    fields: {
                        type: string;
                        name: string;
                        label: string;
                        required: boolean;
                        displayName: string;
                        options?: any;
                    }[];
                    project: {
                        id: string;
                        name: string;
                        slug: string;
                        displayName: string;
                        associatedAt: Date;
                    } | null;
                    fieldsLimit: number;
                }> | z.ZodObject<{}, "strip", z.ZodTypeAny, {}, {}>;
            }, "strip", z.ZodTypeAny, {
                data: {
                    id: string;
                    authorId: string;
                    name: string;
                    displayName: string;
                    fields: {
                        type: string;
                        name: string;
                        label: string;
                        required: boolean;
                        displayName: string;
                        options?: any;
                    }[];
                    project: {
                        id: string;
                        name: string;
                        slug: string;
                        displayName: string;
                        associatedAt: Date;
                    } | null;
                    fieldsLimit: number;
                } | {
                    id: string;
                    authorId: string;
                    createdAt: Date;
                    updatedAt: Date;
                    name: string;
                    displayName: string;
                    fields: {
                        type: string;
                        name: string;
                        label: string;
                        required: boolean;
                        displayName: string;
                        options?: any;
                    }[];
                    project: {
                        id: string;
                        name: string;
                        slug: string;
                        displayName: string;
                        associatedAt: Date;
                    } | null;
                    fieldsLimit: number;
                } | {};
            }, {
                data: {
                    id: string;
                    authorId: string;
                    name: string;
                    displayName: string;
                    fields: {
                        type: string;
                        name: string;
                        label: string;
                        required: boolean;
                        displayName: string;
                        options?: any;
                    }[];
                    project: {
                        id: string;
                        name: string;
                        slug: string;
                        displayName: string;
                        associatedAt: Date;
                    } | null;
                    fieldsLimit: number;
                } | {
                    id: string;
                    authorId: string;
                    createdAt: Date;
                    updatedAt: Date;
                    name: string;
                    displayName: string;
                    fields: {
                        type: string;
                        name: string;
                        label: string;
                        required: boolean;
                        displayName: string;
                        options?: any;
                    }[];
                    project: {
                        id: string;
                        name: string;
                        slug: string;
                        displayName: string;
                        associatedAt: Date;
                    } | null;
                    fieldsLimit: number;
                } | {};
            }>;
            404: z.ZodObject<{
                title: z.ZodString;
                status: z.ZodNumber;
                detail: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                status: number;
                title: string;
                detail?: string | undefined;
            }, {
                status: number;
                title: string;
                detail?: string | undefined;
            }>;
            500: z.ZodObject<{
                title: z.ZodString;
                status: z.ZodNumber;
                detail: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                status: number;
                title: string;
                detail?: string | undefined;
            }, {
                status: number;
                title: string;
                detail?: string | undefined;
            }>;
        };
    };
    getForms: {
        metadata: {
            permissions: {};
        };
        query: z.ZodObject<{
            /**
             * @type {string} - page number
             */
            page: z.ZodOptional<z.ZodString>;
            /**
             * @type {string} - limit of records
             */
            limit: z.ZodOptional<z.ZodString>;
            /**
             * @type {string} - project ids to filter
             */
            projectIds: z.ZodOptional<z.ZodString>;
            /**
             * @type {string} - search string - name. displayName
             */
            search: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            search?: string | undefined;
            limit?: string | undefined;
            page?: string | undefined;
            projectIds?: string | undefined;
        }, {
            search?: string | undefined;
            limit?: string | undefined;
            page?: string | undefined;
            projectIds?: string | undefined;
        }>;
        summary: "Get forms list";
        method: "GET";
        path: "/api/forms";
        headers: z.ZodObject<{
            authorization: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            authorization: string;
        }, {
            authorization: string;
        }>;
        responses: {
            200: z.ZodObject<{
                data: z.ZodType<{
                    id: string;
                    authorId: string;
                    name: string;
                    displayName: string;
                    fields: {
                        type: string;
                        name: string;
                        label: string;
                        required: boolean;
                        displayName: string;
                        options?: any;
                    }[];
                    project: {
                        id: string;
                        name: string;
                        slug: string;
                        displayName: string;
                        associatedAt: Date;
                    } | null;
                    fieldsLimit: number;
                } | {
                    id: string;
                    authorId: string;
                    createdAt: Date;
                    updatedAt: Date;
                    name: string;
                    displayName: string;
                    fields: {
                        type: string;
                        name: string;
                        label: string;
                        required: boolean;
                        displayName: string;
                        options?: any;
                    }[];
                    project: {
                        id: string;
                        name: string;
                        slug: string;
                        displayName: string;
                        associatedAt: Date;
                    } | null;
                    fieldsLimit: number;
                }, z.ZodTypeDef, {
                    id: string;
                    authorId: string;
                    name: string;
                    displayName: string;
                    fields: {
                        type: string;
                        name: string;
                        label: string;
                        required: boolean;
                        displayName: string;
                        options?: any;
                    }[];
                    project: {
                        id: string;
                        name: string;
                        slug: string;
                        displayName: string;
                        associatedAt: Date;
                    } | null;
                    fieldsLimit: number;
                } | {
                    id: string;
                    authorId: string;
                    createdAt: Date;
                    updatedAt: Date;
                    name: string;
                    displayName: string;
                    fields: {
                        type: string;
                        name: string;
                        label: string;
                        required: boolean;
                        displayName: string;
                        options?: any;
                    }[];
                    project: {
                        id: string;
                        name: string;
                        slug: string;
                        displayName: string;
                        associatedAt: Date;
                    } | null;
                    fieldsLimit: number;
                }> | z.ZodObject<{}, "strip", z.ZodTypeAny, {}, {}>;
            }, "strip", z.ZodTypeAny, {
                data: {
                    id: string;
                    authorId: string;
                    name: string;
                    displayName: string;
                    fields: {
                        type: string;
                        name: string;
                        label: string;
                        required: boolean;
                        displayName: string;
                        options?: any;
                    }[];
                    project: {
                        id: string;
                        name: string;
                        slug: string;
                        displayName: string;
                        associatedAt: Date;
                    } | null;
                    fieldsLimit: number;
                } | {
                    id: string;
                    authorId: string;
                    createdAt: Date;
                    updatedAt: Date;
                    name: string;
                    displayName: string;
                    fields: {
                        type: string;
                        name: string;
                        label: string;
                        required: boolean;
                        displayName: string;
                        options?: any;
                    }[];
                    project: {
                        id: string;
                        name: string;
                        slug: string;
                        displayName: string;
                        associatedAt: Date;
                    } | null;
                    fieldsLimit: number;
                } | {};
            }, {
                data: {
                    id: string;
                    authorId: string;
                    name: string;
                    displayName: string;
                    fields: {
                        type: string;
                        name: string;
                        label: string;
                        required: boolean;
                        displayName: string;
                        options?: any;
                    }[];
                    project: {
                        id: string;
                        name: string;
                        slug: string;
                        displayName: string;
                        associatedAt: Date;
                    } | null;
                    fieldsLimit: number;
                } | {
                    id: string;
                    authorId: string;
                    createdAt: Date;
                    updatedAt: Date;
                    name: string;
                    displayName: string;
                    fields: {
                        type: string;
                        name: string;
                        label: string;
                        required: boolean;
                        displayName: string;
                        options?: any;
                    }[];
                    project: {
                        id: string;
                        name: string;
                        slug: string;
                        displayName: string;
                        associatedAt: Date;
                    } | null;
                    fieldsLimit: number;
                } | {};
            }>;
            500: z.ZodObject<{
                message: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                message: string;
            }, {
                message: string;
            }>;
        };
    };
};

declare const formSchema: {
    PublicDTO: zod.ZodObject<{
        id: zod.ZodString;
        name: zod.ZodString;
        displayName: zod.ZodString;
        authorId: zod.ZodString;
        project: zod.ZodNullable<zod.ZodObject<{
            id: zod.ZodString;
            name: zod.ZodString;
            displayName: zod.ZodString;
            slug: zod.ZodString;
            associatedAt: zod.ZodDate;
        }, "strip", zod.ZodTypeAny, {
            id: string;
            name: string;
            slug: string;
            displayName: string;
            associatedAt: Date;
        }, {
            id: string;
            name: string;
            slug: string;
            displayName: string;
            associatedAt: Date;
        }>>;
        fieldsLimit: zod.ZodNumber;
        fields: zod.ZodArray<zod.ZodObject<{
            name: zod.ZodString;
            displayName: zod.ZodString;
            label: zod.ZodString;
            type: zod.ZodString;
            required: zod.ZodBoolean;
            options: zod.ZodAny;
        }, "strip", zod.ZodTypeAny, {
            type: string;
            name: string;
            label: string;
            required: boolean;
            displayName: string;
            options?: any;
        }, {
            type: string;
            name: string;
            label: string;
            required: boolean;
            displayName: string;
            options?: any;
        }>, "many">;
    }, "strip", zod.ZodTypeAny, {
        id: string;
        authorId: string;
        name: string;
        displayName: string;
        fields: {
            type: string;
            name: string;
            label: string;
            required: boolean;
            displayName: string;
            options?: any;
        }[];
        project: {
            id: string;
            name: string;
            slug: string;
            displayName: string;
            associatedAt: Date;
        } | null;
        fieldsLimit: number;
    }, {
        id: string;
        authorId: string;
        name: string;
        displayName: string;
        fields: {
            type: string;
            name: string;
            label: string;
            required: boolean;
            displayName: string;
            options?: any;
        }[];
        project: {
            id: string;
            name: string;
            slug: string;
            displayName: string;
            associatedAt: Date;
        } | null;
        fieldsLimit: number;
    }>;
    RegularDTO: zod.ZodObject<{
        id: zod.ZodString;
        name: zod.ZodString;
        displayName: zod.ZodString;
        authorId: zod.ZodString;
        project: zod.ZodNullable<zod.ZodObject<{
            id: zod.ZodString;
            name: zod.ZodString;
            displayName: zod.ZodString;
            slug: zod.ZodString;
            associatedAt: zod.ZodDate;
        }, "strip", zod.ZodTypeAny, {
            id: string;
            name: string;
            slug: string;
            displayName: string;
            associatedAt: Date;
        }, {
            id: string;
            name: string;
            slug: string;
            displayName: string;
            associatedAt: Date;
        }>>;
        fieldsLimit: zod.ZodNumber;
        fields: zod.ZodArray<zod.ZodObject<{
            name: zod.ZodString;
            displayName: zod.ZodString;
            label: zod.ZodString;
            type: zod.ZodString;
            required: zod.ZodBoolean;
            options: zod.ZodAny;
        }, "strip", zod.ZodTypeAny, {
            type: string;
            name: string;
            label: string;
            required: boolean;
            displayName: string;
            options?: any;
        }, {
            type: string;
            name: string;
            label: string;
            required: boolean;
            displayName: string;
            options?: any;
        }>, "many">;
    }, "strip", zod.ZodTypeAny, {
        id: string;
        authorId: string;
        name: string;
        displayName: string;
        fields: {
            type: string;
            name: string;
            label: string;
            required: boolean;
            displayName: string;
            options?: any;
        }[];
        project: {
            id: string;
            name: string;
            slug: string;
            displayName: string;
            associatedAt: Date;
        } | null;
        fieldsLimit: number;
    }, {
        id: string;
        authorId: string;
        name: string;
        displayName: string;
        fields: {
            type: string;
            name: string;
            label: string;
            required: boolean;
            displayName: string;
            options?: any;
        }[];
        project: {
            id: string;
            name: string;
            slug: string;
            displayName: string;
            associatedAt: Date;
        } | null;
        fieldsLimit: number;
    }>;
    ConfidentialDTO: zod.ZodObject<zod.objectUtil.extendShape<{
        id: zod.ZodString;
        name: zod.ZodString;
        displayName: zod.ZodString;
        authorId: zod.ZodString;
        project: zod.ZodNullable<zod.ZodObject<{
            id: zod.ZodString;
            name: zod.ZodString;
            displayName: zod.ZodString;
            slug: zod.ZodString;
            associatedAt: zod.ZodDate;
        }, "strip", zod.ZodTypeAny, {
            id: string;
            name: string;
            slug: string;
            displayName: string;
            associatedAt: Date;
        }, {
            id: string;
            name: string;
            slug: string;
            displayName: string;
            associatedAt: Date;
        }>>;
        fieldsLimit: zod.ZodNumber;
        fields: zod.ZodArray<zod.ZodObject<{
            name: zod.ZodString;
            displayName: zod.ZodString;
            label: zod.ZodString;
            type: zod.ZodString;
            required: zod.ZodBoolean;
            options: zod.ZodAny;
        }, "strip", zod.ZodTypeAny, {
            type: string;
            name: string;
            label: string;
            required: boolean;
            displayName: string;
            options?: any;
        }, {
            type: string;
            name: string;
            label: string;
            required: boolean;
            displayName: string;
            options?: any;
        }>, "many">;
    }, {
        createdAt: zod.ZodDate;
        updatedAt: zod.ZodDate;
    }>, "strip", zod.ZodTypeAny, {
        id: string;
        authorId: string;
        createdAt: Date;
        updatedAt: Date;
        name: string;
        displayName: string;
        fields: {
            type: string;
            name: string;
            label: string;
            required: boolean;
            displayName: string;
            options?: any;
        }[];
        project: {
            id: string;
            name: string;
            slug: string;
            displayName: string;
            associatedAt: Date;
        } | null;
        fieldsLimit: number;
    }, {
        id: string;
        authorId: string;
        createdAt: Date;
        updatedAt: Date;
        name: string;
        displayName: string;
        fields: {
            type: string;
            name: string;
            label: string;
            required: boolean;
            displayName: string;
            options?: any;
        }[];
        project: {
            id: string;
            name: string;
            slug: string;
            displayName: string;
            associatedAt: Date;
        } | null;
        fieldsLimit: number;
    }>;
};

declare const issueContract: {
    createIssue: {
        metadata: {
            readonly permissions: {
                readonly AND: readonly [{
                    readonly OR: readonly ["read:project:own", "read:project:confident", "read:project:any"];
                }, "create:issue"];
            };
        };
        summary: "Create issue";
        method: "POST";
        body: z.ZodObject<{
            title: z.ZodString;
            fields: z.ZodArray<z.ZodObject<{
                name: z.ZodString;
                value: z.ZodAny;
            }, "strip", z.ZodTypeAny, {
                name: string;
                value?: any;
            }, {
                name: string;
                value?: any;
            }>, "many">;
            tagIds: z.ZodArray<z.ZodString, "many">;
            isPrivate: z.ZodBoolean;
            projectId: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            title: string;
            projectId: string;
            fields: {
                name: string;
                value?: any;
            }[];
            tagIds: string[];
            isPrivate: boolean;
        }, {
            title: string;
            projectId: string;
            fields: {
                name: string;
                value?: any;
            }[];
            tagIds: string[];
            isPrivate: boolean;
        }>;
        path: "/api/issues";
        headers: z.ZodObject<{
            authorization: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            authorization: string;
        }, {
            authorization: string;
        }>;
        responses: {
            200: z.ZodObject<{
                data: z.ZodType<{
                    id: string;
                    authorId: string;
                    createdAt: Date;
                    updatedAt: Date;
                    title: string;
                    key: string;
                    tags: {
                        id: string;
                        name: string;
                        description: string;
                        displayName: string;
                        color: string;
                    }[];
                    author: {
                        id: string;
                        username: string;
                        email: string;
                        roleDisplayName: string;
                        roleName: string;
                    };
                    visibility: string;
                    projectId: string;
                    schema: ({
                        options: {
                            min?: number | undefined;
                            max?: number | undefined;
                            noDecimal?: boolean | undefined;
                        };
                        type: "NUMBER";
                        name: string;
                        label: string;
                        visibility: string;
                        placeholder?: string | undefined;
                        helperText?: string | undefined;
                        required?: boolean | undefined;
                    } | {
                        options: {
                            minLength?: number | undefined;
                            maxLength?: number | undefined;
                            pattern?: string | undefined;
                        };
                        type: "TEXT";
                        name: string;
                        label: string;
                        visibility: string;
                        placeholder?: string | undefined;
                        helperText?: string | undefined;
                        required?: boolean | undefined;
                    } | {
                        options: {
                            isMulti: boolean;
                            optionList: string[];
                            maxSelect: number | null;
                            minSelect: number | null;
                        };
                        type: "SELECT";
                        name: string;
                        label: string;
                        visibility: string;
                        placeholder?: string | undefined;
                        helperText?: string | undefined;
                        required?: boolean | undefined;
                    } | {
                        options: {
                            min?: string | undefined;
                            max?: string | undefined;
                        };
                        type: "DATETIME";
                        name: string;
                        label: string;
                        visibility: string;
                        placeholder?: string | undefined;
                        helperText?: string | undefined;
                        required?: boolean | undefined;
                    } | {
                        options: {
                            minLength?: number | undefined;
                            maxLength?: number | undefined;
                            disableImages?: boolean | undefined;
                        };
                        type: "RICHTEXT";
                        name: string;
                        label: string;
                        visibility: string;
                        placeholder?: string | undefined;
                        helperText?: string | undefined;
                        required?: boolean | undefined;
                    } | {
                        type: "SEPARATOR";
                        name: string;
                    })[];
                    state: string;
                    points: number;
                    commentsCount: number;
                    fields: {
                        type: string;
                        name: string;
                        value?: any;
                    }[];
                    lastChangeAt: Date;
                    project: {
                        id: string;
                        name: string;
                        slug: string;
                        displayName: string;
                    };
                    group: {
                        id: string;
                        name: string;
                        slug: string;
                        displayName: string;
                    };
                    operations: {
                        canBlock: boolean;
                        canDelete: boolean;
                        canUpdateState: boolean;
                        canEditFields: boolean;
                        canEditInternalFields: boolean;
                        canEditHiddenFields: boolean;
                        canUpdateConfidents: boolean;
                        canBlockComments: boolean;
                        canDeleteComments: boolean;
                        canUpdateTags: boolean;
                        canUpdateVisibility: boolean;
                    };
                    isUpvotedByMe: boolean;
                    isDownvotedByMe: boolean;
                    isSuspend?: boolean | undefined;
                }, z.ZodTypeDef, {
                    id: string;
                    authorId: string;
                    createdAt: Date;
                    updatedAt: Date;
                    title: string;
                    key: string;
                    tags: {
                        id: string;
                        name: string;
                        description: string;
                        displayName: string;
                        color: string;
                    }[];
                    author: {
                        id: string;
                        username: string;
                        email: string;
                        roleDisplayName: string;
                        roleName: string;
                    };
                    visibility: string;
                    projectId: string;
                    schema: ({
                        options: {
                            min?: number | undefined;
                            max?: number | undefined;
                            noDecimal?: boolean | undefined;
                        };
                        type: "NUMBER";
                        name: string;
                        label: string;
                        visibility: string;
                        placeholder?: string | undefined;
                        helperText?: string | undefined;
                        required?: boolean | undefined;
                    } | {
                        options: {
                            minLength?: number | undefined;
                            maxLength?: number | undefined;
                            pattern?: string | undefined;
                        };
                        type: "TEXT";
                        name: string;
                        label: string;
                        visibility: string;
                        placeholder?: string | undefined;
                        helperText?: string | undefined;
                        required?: boolean | undefined;
                    } | {
                        options: {
                            isMulti: boolean;
                            optionList: string[];
                            maxSelect: number | null;
                            minSelect: number | null;
                        };
                        type: "SELECT";
                        name: string;
                        label: string;
                        visibility: string;
                        placeholder?: string | undefined;
                        helperText?: string | undefined;
                        required?: boolean | undefined;
                    } | {
                        options: {
                            min?: string | undefined;
                            max?: string | undefined;
                        };
                        type: "DATETIME";
                        name: string;
                        label: string;
                        visibility: string;
                        placeholder?: string | undefined;
                        helperText?: string | undefined;
                        required?: boolean | undefined;
                    } | {
                        options: {
                            minLength?: number | undefined;
                            maxLength?: number | undefined;
                            disableImages?: boolean | undefined;
                        };
                        type: "RICHTEXT";
                        name: string;
                        label: string;
                        visibility: string;
                        placeholder?: string | undefined;
                        helperText?: string | undefined;
                        required?: boolean | undefined;
                    } | {
                        type: "SEPARATOR";
                        name: string;
                    })[];
                    state: string;
                    points: number;
                    commentsCount: number;
                    fields: {
                        type: string;
                        name: string;
                        value?: any;
                    }[];
                    lastChangeAt: Date;
                    project: {
                        id: string;
                        name: string;
                        slug: string;
                        displayName: string;
                    };
                    group: {
                        id: string;
                        name: string;
                        slug: string;
                        displayName: string;
                    };
                    operations: {
                        canBlock: boolean;
                        canDelete: boolean;
                        canUpdateState: boolean;
                        canEditFields: boolean;
                        canEditInternalFields: boolean;
                        canEditHiddenFields: boolean;
                        canUpdateConfidents: boolean;
                        canBlockComments: boolean;
                        canDeleteComments: boolean;
                        canUpdateTags: boolean;
                        canUpdateVisibility: boolean;
                    };
                    isUpvotedByMe: boolean;
                    isDownvotedByMe: boolean;
                    isSuspend?: boolean | undefined;
                }> | z.ZodObject<{}, "strip", z.ZodTypeAny, {}, {}>;
            }, "strip", z.ZodTypeAny, {
                data: {
                    id: string;
                    authorId: string;
                    createdAt: Date;
                    updatedAt: Date;
                    title: string;
                    key: string;
                    tags: {
                        id: string;
                        name: string;
                        description: string;
                        displayName: string;
                        color: string;
                    }[];
                    author: {
                        id: string;
                        username: string;
                        email: string;
                        roleDisplayName: string;
                        roleName: string;
                    };
                    visibility: string;
                    projectId: string;
                    schema: ({
                        options: {
                            min?: number | undefined;
                            max?: number | undefined;
                            noDecimal?: boolean | undefined;
                        };
                        type: "NUMBER";
                        name: string;
                        label: string;
                        visibility: string;
                        placeholder?: string | undefined;
                        helperText?: string | undefined;
                        required?: boolean | undefined;
                    } | {
                        options: {
                            minLength?: number | undefined;
                            maxLength?: number | undefined;
                            pattern?: string | undefined;
                        };
                        type: "TEXT";
                        name: string;
                        label: string;
                        visibility: string;
                        placeholder?: string | undefined;
                        helperText?: string | undefined;
                        required?: boolean | undefined;
                    } | {
                        options: {
                            isMulti: boolean;
                            optionList: string[];
                            maxSelect: number | null;
                            minSelect: number | null;
                        };
                        type: "SELECT";
                        name: string;
                        label: string;
                        visibility: string;
                        placeholder?: string | undefined;
                        helperText?: string | undefined;
                        required?: boolean | undefined;
                    } | {
                        options: {
                            min?: string | undefined;
                            max?: string | undefined;
                        };
                        type: "DATETIME";
                        name: string;
                        label: string;
                        visibility: string;
                        placeholder?: string | undefined;
                        helperText?: string | undefined;
                        required?: boolean | undefined;
                    } | {
                        options: {
                            minLength?: number | undefined;
                            maxLength?: number | undefined;
                            disableImages?: boolean | undefined;
                        };
                        type: "RICHTEXT";
                        name: string;
                        label: string;
                        visibility: string;
                        placeholder?: string | undefined;
                        helperText?: string | undefined;
                        required?: boolean | undefined;
                    } | {
                        type: "SEPARATOR";
                        name: string;
                    })[];
                    state: string;
                    points: number;
                    commentsCount: number;
                    fields: {
                        type: string;
                        name: string;
                        value?: any;
                    }[];
                    lastChangeAt: Date;
                    project: {
                        id: string;
                        name: string;
                        slug: string;
                        displayName: string;
                    };
                    group: {
                        id: string;
                        name: string;
                        slug: string;
                        displayName: string;
                    };
                    operations: {
                        canBlock: boolean;
                        canDelete: boolean;
                        canUpdateState: boolean;
                        canEditFields: boolean;
                        canEditInternalFields: boolean;
                        canEditHiddenFields: boolean;
                        canUpdateConfidents: boolean;
                        canBlockComments: boolean;
                        canDeleteComments: boolean;
                        canUpdateTags: boolean;
                        canUpdateVisibility: boolean;
                    };
                    isUpvotedByMe: boolean;
                    isDownvotedByMe: boolean;
                    isSuspend?: boolean | undefined;
                } | {};
            }, {
                data: {
                    id: string;
                    authorId: string;
                    createdAt: Date;
                    updatedAt: Date;
                    title: string;
                    key: string;
                    tags: {
                        id: string;
                        name: string;
                        description: string;
                        displayName: string;
                        color: string;
                    }[];
                    author: {
                        id: string;
                        username: string;
                        email: string;
                        roleDisplayName: string;
                        roleName: string;
                    };
                    visibility: string;
                    projectId: string;
                    schema: ({
                        options: {
                            min?: number | undefined;
                            max?: number | undefined;
                            noDecimal?: boolean | undefined;
                        };
                        type: "NUMBER";
                        name: string;
                        label: string;
                        visibility: string;
                        placeholder?: string | undefined;
                        helperText?: string | undefined;
                        required?: boolean | undefined;
                    } | {
                        options: {
                            minLength?: number | undefined;
                            maxLength?: number | undefined;
                            pattern?: string | undefined;
                        };
                        type: "TEXT";
                        name: string;
                        label: string;
                        visibility: string;
                        placeholder?: string | undefined;
                        helperText?: string | undefined;
                        required?: boolean | undefined;
                    } | {
                        options: {
                            isMulti: boolean;
                            optionList: string[];
                            maxSelect: number | null;
                            minSelect: number | null;
                        };
                        type: "SELECT";
                        name: string;
                        label: string;
                        visibility: string;
                        placeholder?: string | undefined;
                        helperText?: string | undefined;
                        required?: boolean | undefined;
                    } | {
                        options: {
                            min?: string | undefined;
                            max?: string | undefined;
                        };
                        type: "DATETIME";
                        name: string;
                        label: string;
                        visibility: string;
                        placeholder?: string | undefined;
                        helperText?: string | undefined;
                        required?: boolean | undefined;
                    } | {
                        options: {
                            minLength?: number | undefined;
                            maxLength?: number | undefined;
                            disableImages?: boolean | undefined;
                        };
                        type: "RICHTEXT";
                        name: string;
                        label: string;
                        visibility: string;
                        placeholder?: string | undefined;
                        helperText?: string | undefined;
                        required?: boolean | undefined;
                    } | {
                        type: "SEPARATOR";
                        name: string;
                    })[];
                    state: string;
                    points: number;
                    commentsCount: number;
                    fields: {
                        type: string;
                        name: string;
                        value?: any;
                    }[];
                    lastChangeAt: Date;
                    project: {
                        id: string;
                        name: string;
                        slug: string;
                        displayName: string;
                    };
                    group: {
                        id: string;
                        name: string;
                        slug: string;
                        displayName: string;
                    };
                    operations: {
                        canBlock: boolean;
                        canDelete: boolean;
                        canUpdateState: boolean;
                        canEditFields: boolean;
                        canEditInternalFields: boolean;
                        canEditHiddenFields: boolean;
                        canUpdateConfidents: boolean;
                        canBlockComments: boolean;
                        canDeleteComments: boolean;
                        canUpdateTags: boolean;
                        canUpdateVisibility: boolean;
                    };
                    isUpvotedByMe: boolean;
                    isDownvotedByMe: boolean;
                    isSuspend?: boolean | undefined;
                } | {};
            }>;
            403: z.ZodObject<{
                title: z.ZodString;
                status: z.ZodNumber;
                detail: z.ZodOptional<z.ZodString>;
                errors: z.ZodOptional<z.ZodArray<z.ZodType<ErrorObject, z.ZodTypeDef, ErrorObject>, "many">>;
            }, "strip", z.ZodTypeAny, {
                status: number;
                title: string;
                errors?: ErrorObject[] | undefined;
                detail?: string | undefined;
            }, {
                status: number;
                title: string;
                errors?: ErrorObject[] | undefined;
                detail?: string | undefined;
            }>;
            409: z.ZodObject<{
                title: z.ZodString;
                status: z.ZodNumber;
                detail: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                status: number;
                title: string;
                detail?: string | undefined;
            }, {
                status: number;
                title: string;
                detail?: string | undefined;
            }>;
            500: z.ZodObject<{
                message: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                message: string;
            }, {
                message: string;
            }>;
        };
    };
    editIssueById: {
        metadata: {
            permissions: {
                AND: ({
                    OR: ("read:project:own" | "read:project:confident" | "read:project:any")[];
                } | {
                    OR: ("manage:project:asModerator" | "update:issue:own" | "update:issue:any")[];
                })[];
            };
        };
        summary: "Edit issue by id";
        method: "POST";
        body: z.ZodObject<{
            title: z.ZodOptional<z.ZodString>;
            fields: z.ZodOptional<z.ZodArray<z.ZodObject<{
                name: z.ZodString;
                value: z.ZodAny;
            }, "strip", z.ZodTypeAny, {
                name: string;
                value?: any;
            }, {
                name: string;
                value?: any;
            }>, "many">>;
        }, "strip", z.ZodTypeAny, {
            title?: string | undefined;
            fields?: {
                name: string;
                value?: any;
            }[] | undefined;
        }, {
            title?: string | undefined;
            fields?: {
                name: string;
                value?: any;
            }[] | undefined;
        }>;
        path: "/api/issues/by/id/:issueId/edit";
        headers: z.ZodObject<{
            authorization: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            authorization: string;
        }, {
            authorization: string;
        }>;
        responses: {
            200: z.ZodObject<{
                data: z.ZodType<{
                    id: string;
                    authorId: string;
                    createdAt: Date;
                    updatedAt: Date;
                    title: string;
                    key: string;
                    tags: string[];
                    visibility: string;
                    projectId: string;
                    schema: ({
                        options: {
                            min?: number | undefined;
                            max?: number | undefined;
                            noDecimal?: boolean | undefined;
                        };
                        type: "NUMBER";
                        name: string;
                        label: string;
                        visibility: string;
                        placeholder?: string | undefined;
                        helperText?: string | undefined;
                        required?: boolean | undefined;
                    } | {
                        options: {
                            minLength?: number | undefined;
                            maxLength?: number | undefined;
                            pattern?: string | undefined;
                        };
                        type: "TEXT";
                        name: string;
                        label: string;
                        visibility: string;
                        placeholder?: string | undefined;
                        helperText?: string | undefined;
                        required?: boolean | undefined;
                    } | {
                        options: {
                            isMulti: boolean;
                            optionList: string[];
                            maxSelect: number | null;
                            minSelect: number | null;
                        };
                        type: "SELECT";
                        name: string;
                        label: string;
                        visibility: string;
                        placeholder?: string | undefined;
                        helperText?: string | undefined;
                        required?: boolean | undefined;
                    } | {
                        options: {
                            min?: string | undefined;
                            max?: string | undefined;
                        };
                        type: "DATETIME";
                        name: string;
                        label: string;
                        visibility: string;
                        placeholder?: string | undefined;
                        helperText?: string | undefined;
                        required?: boolean | undefined;
                    } | {
                        options: {
                            minLength?: number | undefined;
                            maxLength?: number | undefined;
                            disableImages?: boolean | undefined;
                        };
                        type: "RICHTEXT";
                        name: string;
                        label: string;
                        visibility: string;
                        placeholder?: string | undefined;
                        helperText?: string | undefined;
                        required?: boolean | undefined;
                    } | {
                        type: "SEPARATOR";
                        name: string;
                    })[];
                    state: string;
                    points: number;
                    commentsCount: number;
                    fields: {
                        type: string;
                        name: string;
                        value?: any;
                    }[];
                    lastChangeAt: Date;
                    isSuspend?: boolean | undefined;
                }, z.ZodTypeDef, {
                    id: string;
                    authorId: string;
                    createdAt: Date;
                    updatedAt: Date;
                    title: string;
                    key: string;
                    tags: string[];
                    visibility: string;
                    projectId: string;
                    schema: ({
                        options: {
                            min?: number | undefined;
                            max?: number | undefined;
                            noDecimal?: boolean | undefined;
                        };
                        type: "NUMBER";
                        name: string;
                        label: string;
                        visibility: string;
                        placeholder?: string | undefined;
                        helperText?: string | undefined;
                        required?: boolean | undefined;
                    } | {
                        options: {
                            minLength?: number | undefined;
                            maxLength?: number | undefined;
                            pattern?: string | undefined;
                        };
                        type: "TEXT";
                        name: string;
                        label: string;
                        visibility: string;
                        placeholder?: string | undefined;
                        helperText?: string | undefined;
                        required?: boolean | undefined;
                    } | {
                        options: {
                            isMulti: boolean;
                            optionList: string[];
                            maxSelect: number | null;
                            minSelect: number | null;
                        };
                        type: "SELECT";
                        name: string;
                        label: string;
                        visibility: string;
                        placeholder?: string | undefined;
                        helperText?: string | undefined;
                        required?: boolean | undefined;
                    } | {
                        options: {
                            min?: string | undefined;
                            max?: string | undefined;
                        };
                        type: "DATETIME";
                        name: string;
                        label: string;
                        visibility: string;
                        placeholder?: string | undefined;
                        helperText?: string | undefined;
                        required?: boolean | undefined;
                    } | {
                        options: {
                            minLength?: number | undefined;
                            maxLength?: number | undefined;
                            disableImages?: boolean | undefined;
                        };
                        type: "RICHTEXT";
                        name: string;
                        label: string;
                        visibility: string;
                        placeholder?: string | undefined;
                        helperText?: string | undefined;
                        required?: boolean | undefined;
                    } | {
                        type: "SEPARATOR";
                        name: string;
                    })[];
                    state: string;
                    points: number;
                    commentsCount: number;
                    fields: {
                        type: string;
                        name: string;
                        value?: any;
                    }[];
                    lastChangeAt: Date;
                    isSuspend?: boolean | undefined;
                }> | z.ZodObject<{}, "strip", z.ZodTypeAny, {}, {}>;
            }, "strip", z.ZodTypeAny, {
                data: {
                    id: string;
                    authorId: string;
                    createdAt: Date;
                    updatedAt: Date;
                    title: string;
                    key: string;
                    tags: string[];
                    visibility: string;
                    projectId: string;
                    schema: ({
                        options: {
                            min?: number | undefined;
                            max?: number | undefined;
                            noDecimal?: boolean | undefined;
                        };
                        type: "NUMBER";
                        name: string;
                        label: string;
                        visibility: string;
                        placeholder?: string | undefined;
                        helperText?: string | undefined;
                        required?: boolean | undefined;
                    } | {
                        options: {
                            minLength?: number | undefined;
                            maxLength?: number | undefined;
                            pattern?: string | undefined;
                        };
                        type: "TEXT";
                        name: string;
                        label: string;
                        visibility: string;
                        placeholder?: string | undefined;
                        helperText?: string | undefined;
                        required?: boolean | undefined;
                    } | {
                        options: {
                            isMulti: boolean;
                            optionList: string[];
                            maxSelect: number | null;
                            minSelect: number | null;
                        };
                        type: "SELECT";
                        name: string;
                        label: string;
                        visibility: string;
                        placeholder?: string | undefined;
                        helperText?: string | undefined;
                        required?: boolean | undefined;
                    } | {
                        options: {
                            min?: string | undefined;
                            max?: string | undefined;
                        };
                        type: "DATETIME";
                        name: string;
                        label: string;
                        visibility: string;
                        placeholder?: string | undefined;
                        helperText?: string | undefined;
                        required?: boolean | undefined;
                    } | {
                        options: {
                            minLength?: number | undefined;
                            maxLength?: number | undefined;
                            disableImages?: boolean | undefined;
                        };
                        type: "RICHTEXT";
                        name: string;
                        label: string;
                        visibility: string;
                        placeholder?: string | undefined;
                        helperText?: string | undefined;
                        required?: boolean | undefined;
                    } | {
                        type: "SEPARATOR";
                        name: string;
                    })[];
                    state: string;
                    points: number;
                    commentsCount: number;
                    fields: {
                        type: string;
                        name: string;
                        value?: any;
                    }[];
                    lastChangeAt: Date;
                    isSuspend?: boolean | undefined;
                } | {};
            }, {
                data: {
                    id: string;
                    authorId: string;
                    createdAt: Date;
                    updatedAt: Date;
                    title: string;
                    key: string;
                    tags: string[];
                    visibility: string;
                    projectId: string;
                    schema: ({
                        options: {
                            min?: number | undefined;
                            max?: number | undefined;
                            noDecimal?: boolean | undefined;
                        };
                        type: "NUMBER";
                        name: string;
                        label: string;
                        visibility: string;
                        placeholder?: string | undefined;
                        helperText?: string | undefined;
                        required?: boolean | undefined;
                    } | {
                        options: {
                            minLength?: number | undefined;
                            maxLength?: number | undefined;
                            pattern?: string | undefined;
                        };
                        type: "TEXT";
                        name: string;
                        label: string;
                        visibility: string;
                        placeholder?: string | undefined;
                        helperText?: string | undefined;
                        required?: boolean | undefined;
                    } | {
                        options: {
                            isMulti: boolean;
                            optionList: string[];
                            maxSelect: number | null;
                            minSelect: number | null;
                        };
                        type: "SELECT";
                        name: string;
                        label: string;
                        visibility: string;
                        placeholder?: string | undefined;
                        helperText?: string | undefined;
                        required?: boolean | undefined;
                    } | {
                        options: {
                            min?: string | undefined;
                            max?: string | undefined;
                        };
                        type: "DATETIME";
                        name: string;
                        label: string;
                        visibility: string;
                        placeholder?: string | undefined;
                        helperText?: string | undefined;
                        required?: boolean | undefined;
                    } | {
                        options: {
                            minLength?: number | undefined;
                            maxLength?: number | undefined;
                            disableImages?: boolean | undefined;
                        };
                        type: "RICHTEXT";
                        name: string;
                        label: string;
                        visibility: string;
                        placeholder?: string | undefined;
                        helperText?: string | undefined;
                        required?: boolean | undefined;
                    } | {
                        type: "SEPARATOR";
                        name: string;
                    })[];
                    state: string;
                    points: number;
                    commentsCount: number;
                    fields: {
                        type: string;
                        name: string;
                        value?: any;
                    }[];
                    lastChangeAt: Date;
                    isSuspend?: boolean | undefined;
                } | {};
            }>;
            404: z.ZodObject<{
                title: z.ZodString;
                status: z.ZodNumber;
                detail: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                status: number;
                title: string;
                detail?: string | undefined;
            }, {
                status: number;
                title: string;
                detail?: string | undefined;
            }>;
            403: z.ZodObject<{
                title: z.ZodString;
                status: z.ZodNumber;
                detail: z.ZodOptional<z.ZodString>;
                errors: z.ZodOptional<z.ZodArray<z.ZodType<ErrorObject, z.ZodTypeDef, ErrorObject>, "many">>;
            }, "strip", z.ZodTypeAny, {
                status: number;
                title: string;
                errors?: ErrorObject[] | undefined;
                detail?: string | undefined;
            }, {
                status: number;
                title: string;
                errors?: ErrorObject[] | undefined;
                detail?: string | undefined;
            }>;
            500: z.ZodObject<{
                title: z.ZodString;
                status: z.ZodNumber;
                detail: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                status: number;
                title: string;
                detail?: string | undefined;
            }, {
                status: number;
                title: string;
                detail?: string | undefined;
            }>;
        };
    };
    upvoteIssue: {
        metadata: {
            permissions: "vote:issue";
        };
        summary: "Upvote issue";
        method: "POST";
        body: z.ZodNullable<z.ZodObject<{}, "strip", z.ZodTypeAny, {}, {}>>;
        path: "/api/issues/by/id/:issueId/upvote";
        headers: z.ZodObject<{
            authorization: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            authorization: string;
        }, {
            authorization: string;
        }>;
        responses: {
            201: z.ZodObject<{
                data: z.ZodType<unknown, z.ZodTypeDef, unknown> | z.ZodObject<{}, "strip", z.ZodTypeAny, {}, {}>;
            }, "strip", z.ZodTypeAny, {
                data?: unknown;
            }, {
                data?: unknown;
            }>;
            404: z.ZodObject<{
                title: z.ZodString;
                status: z.ZodNumber;
                detail: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                status: number;
                title: string;
                detail?: string | undefined;
            }, {
                status: number;
                title: string;
                detail?: string | undefined;
            }>;
            409: z.ZodObject<{
                title: z.ZodString;
                status: z.ZodNumber;
                detail: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                status: number;
                title: string;
                detail?: string | undefined;
            }, {
                status: number;
                title: string;
                detail?: string | undefined;
            }>;
            500: z.ZodObject<{
                title: z.ZodString;
                status: z.ZodNumber;
                detail: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                status: number;
                title: string;
                detail?: string | undefined;
            }, {
                status: number;
                title: string;
                detail?: string | undefined;
            }>;
        };
    };
    downvoteIssue: {
        metadata: {
            permissions: "vote:issue";
        };
        summary: "Downvote issue";
        method: "POST";
        body: z.ZodNullable<z.ZodObject<{}, "strip", z.ZodTypeAny, {}, {}>>;
        path: "/api/issues/by/id/:issueId/downvote";
        headers: z.ZodObject<{
            authorization: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            authorization: string;
        }, {
            authorization: string;
        }>;
        responses: {
            201: z.ZodObject<{
                data: z.ZodType<unknown, z.ZodTypeDef, unknown> | z.ZodObject<{}, "strip", z.ZodTypeAny, {}, {}>;
            }, "strip", z.ZodTypeAny, {
                data?: unknown;
            }, {
                data?: unknown;
            }>;
            404: z.ZodObject<{
                title: z.ZodString;
                status: z.ZodNumber;
                detail: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                status: number;
                title: string;
                detail?: string | undefined;
            }, {
                status: number;
                title: string;
                detail?: string | undefined;
            }>;
            409: z.ZodObject<{
                title: z.ZodString;
                status: z.ZodNumber;
                detail: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                status: number;
                title: string;
                detail?: string | undefined;
            }, {
                status: number;
                title: string;
                detail?: string | undefined;
            }>;
            500: z.ZodObject<{
                title: z.ZodString;
                status: z.ZodNumber;
                detail: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                status: number;
                title: string;
                detail?: string | undefined;
            }, {
                status: number;
                title: string;
                detail?: string | undefined;
            }>;
        };
    };
    unvoteIssue: {
        metadata: {
            permissions: "vote:issue";
        };
        summary: "Unvote issue";
        method: "POST";
        body: z.ZodNullable<z.ZodObject<{}, "strip", z.ZodTypeAny, {}, {}>>;
        path: "/api/issues/by/id/:issueId/unvote";
        headers: z.ZodObject<{
            authorization: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            authorization: string;
        }, {
            authorization: string;
        }>;
        responses: {
            201: z.ZodObject<{
                data: z.ZodType<unknown, z.ZodTypeDef, unknown> | z.ZodObject<{}, "strip", z.ZodTypeAny, {}, {}>;
            }, "strip", z.ZodTypeAny, {
                data?: unknown;
            }, {
                data?: unknown;
            }>;
            404: z.ZodObject<{
                title: z.ZodString;
                status: z.ZodNumber;
                detail: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                status: number;
                title: string;
                detail?: string | undefined;
            }, {
                status: number;
                title: string;
                detail?: string | undefined;
            }>;
            500: z.ZodObject<{
                title: z.ZodString;
                status: z.ZodNumber;
                detail: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                status: number;
                title: string;
                detail?: string | undefined;
            }, {
                status: number;
                title: string;
                detail?: string | undefined;
            }>;
        };
    };
    manageIssueTags: {
        metadata: {
            readonly permissions: {
                readonly OR: readonly ["update:issue:own", "manage:project:asModerator", "update:issue:any"];
            };
        };
        summary: "Manage issue tags";
        method: "POST";
        body: z.ZodObject<{
            tags: z.ZodArray<z.ZodString, "many">;
        }, "strip", z.ZodTypeAny, {
            tags: string[];
        }, {
            tags: string[];
        }>;
        path: "/api/issues/by/id/:issueId/tags";
        headers: z.ZodObject<{
            authorization: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            authorization: string;
        }, {
            authorization: string;
        }>;
        responses: {
            200: z.ZodObject<{
                data: z.ZodType<{
                    id: string;
                    createdAt: string;
                    updatedAt: string;
                    name: string;
                    description: string;
                    displayName: string;
                    color: string;
                    count: number;
                }, z.ZodTypeDef, {
                    id: string;
                    createdAt: string;
                    updatedAt: string;
                    name: string;
                    description: string;
                    displayName: string;
                    color: string;
                    count: number;
                }> | z.ZodObject<{}, "strip", z.ZodTypeAny, {}, {}>;
            }, "strip", z.ZodTypeAny, {
                data: {
                    id: string;
                    createdAt: string;
                    updatedAt: string;
                    name: string;
                    description: string;
                    displayName: string;
                    color: string;
                    count: number;
                } | {};
            }, {
                data: {
                    id: string;
                    createdAt: string;
                    updatedAt: string;
                    name: string;
                    description: string;
                    displayName: string;
                    color: string;
                    count: number;
                } | {};
            }>;
            401: z.ZodObject<{
                title: z.ZodString;
                status: z.ZodNumber;
                detail: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                status: number;
                title: string;
                detail?: string | undefined;
            }, {
                status: number;
                title: string;
                detail?: string | undefined;
            }>;
            404: z.ZodObject<{
                title: z.ZodString;
                status: z.ZodNumber;
                detail: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                status: number;
                title: string;
                detail?: string | undefined;
            }, {
                status: number;
                title: string;
                detail?: string | undefined;
            }>;
            403: z.ZodObject<{
                title: z.ZodString;
                status: z.ZodNumber;
                detail: z.ZodOptional<z.ZodString>;
                errors: z.ZodOptional<z.ZodArray<z.ZodType<ErrorObject, z.ZodTypeDef, ErrorObject>, "many">>;
            }, "strip", z.ZodTypeAny, {
                status: number;
                title: string;
                errors?: ErrorObject[] | undefined;
                detail?: string | undefined;
            }, {
                status: number;
                title: string;
                errors?: ErrorObject[] | undefined;
                detail?: string | undefined;
            }>;
            500: z.ZodObject<{
                title: z.ZodString;
                status: z.ZodNumber;
                detail: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                status: number;
                title: string;
                detail?: string | undefined;
            }, {
                status: number;
                title: string;
                detail?: string | undefined;
            }>;
        };
    };
    changeIssueState: {
        metadata: {
            readonly permissions: {
                readonly OR: readonly ["manage:project:asModerator", "update:issue:any"];
            };
        };
        summary: "Change issue state";
        method: "POST";
        body: z.ZodObject<{
            state: z.ZodEnum<["OPEN", "NEED_MORE_INFO", "CONFIRMED_INTERNALLY", "REVIEWED", "AWAITED_INTERNAL_TESTING", "ASSIGNED", "FEEDBACK", "DUPLICATE", "RESOLVED", "EXPIRED"]>;
        }, "strip", z.ZodTypeAny, {
            state: "OPEN" | "NEED_MORE_INFO" | "CONFIRMED_INTERNALLY" | "REVIEWED" | "AWAITED_INTERNAL_TESTING" | "ASSIGNED" | "FEEDBACK" | "DUPLICATE" | "RESOLVED" | "EXPIRED";
        }, {
            state: "OPEN" | "NEED_MORE_INFO" | "CONFIRMED_INTERNALLY" | "REVIEWED" | "AWAITED_INTERNAL_TESTING" | "ASSIGNED" | "FEEDBACK" | "DUPLICATE" | "RESOLVED" | "EXPIRED";
        }>;
        path: "/api/issues/by/id/:issueId/state";
        headers: z.ZodObject<{
            authorization: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            authorization: string;
        }, {
            authorization: string;
        }>;
        responses: {
            200: z.ZodObject<{
                data: z.ZodType<{
                    id: string;
                    authorId: string;
                    createdAt: Date;
                    updatedAt: Date;
                    title: string;
                    key: string;
                    tags: string[];
                    visibility: string;
                    projectId: string;
                    schema: ({
                        options: {
                            min?: number | undefined;
                            max?: number | undefined;
                            noDecimal?: boolean | undefined;
                        };
                        type: "NUMBER";
                        name: string;
                        label: string;
                        visibility: string;
                        placeholder?: string | undefined;
                        helperText?: string | undefined;
                        required?: boolean | undefined;
                    } | {
                        options: {
                            minLength?: number | undefined;
                            maxLength?: number | undefined;
                            pattern?: string | undefined;
                        };
                        type: "TEXT";
                        name: string;
                        label: string;
                        visibility: string;
                        placeholder?: string | undefined;
                        helperText?: string | undefined;
                        required?: boolean | undefined;
                    } | {
                        options: {
                            isMulti: boolean;
                            optionList: string[];
                            maxSelect: number | null;
                            minSelect: number | null;
                        };
                        type: "SELECT";
                        name: string;
                        label: string;
                        visibility: string;
                        placeholder?: string | undefined;
                        helperText?: string | undefined;
                        required?: boolean | undefined;
                    } | {
                        options: {
                            min?: string | undefined;
                            max?: string | undefined;
                        };
                        type: "DATETIME";
                        name: string;
                        label: string;
                        visibility: string;
                        placeholder?: string | undefined;
                        helperText?: string | undefined;
                        required?: boolean | undefined;
                    } | {
                        options: {
                            minLength?: number | undefined;
                            maxLength?: number | undefined;
                            disableImages?: boolean | undefined;
                        };
                        type: "RICHTEXT";
                        name: string;
                        label: string;
                        visibility: string;
                        placeholder?: string | undefined;
                        helperText?: string | undefined;
                        required?: boolean | undefined;
                    } | {
                        type: "SEPARATOR";
                        name: string;
                    })[];
                    state: string;
                    points: number;
                    commentsCount: number;
                    fields: {
                        type: string;
                        name: string;
                        value?: any;
                    }[];
                    lastChangeAt: Date;
                    isSuspend?: boolean | undefined;
                }, z.ZodTypeDef, {
                    id: string;
                    authorId: string;
                    createdAt: Date;
                    updatedAt: Date;
                    title: string;
                    key: string;
                    tags: string[];
                    visibility: string;
                    projectId: string;
                    schema: ({
                        options: {
                            min?: number | undefined;
                            max?: number | undefined;
                            noDecimal?: boolean | undefined;
                        };
                        type: "NUMBER";
                        name: string;
                        label: string;
                        visibility: string;
                        placeholder?: string | undefined;
                        helperText?: string | undefined;
                        required?: boolean | undefined;
                    } | {
                        options: {
                            minLength?: number | undefined;
                            maxLength?: number | undefined;
                            pattern?: string | undefined;
                        };
                        type: "TEXT";
                        name: string;
                        label: string;
                        visibility: string;
                        placeholder?: string | undefined;
                        helperText?: string | undefined;
                        required?: boolean | undefined;
                    } | {
                        options: {
                            isMulti: boolean;
                            optionList: string[];
                            maxSelect: number | null;
                            minSelect: number | null;
                        };
                        type: "SELECT";
                        name: string;
                        label: string;
                        visibility: string;
                        placeholder?: string | undefined;
                        helperText?: string | undefined;
                        required?: boolean | undefined;
                    } | {
                        options: {
                            min?: string | undefined;
                            max?: string | undefined;
                        };
                        type: "DATETIME";
                        name: string;
                        label: string;
                        visibility: string;
                        placeholder?: string | undefined;
                        helperText?: string | undefined;
                        required?: boolean | undefined;
                    } | {
                        options: {
                            minLength?: number | undefined;
                            maxLength?: number | undefined;
                            disableImages?: boolean | undefined;
                        };
                        type: "RICHTEXT";
                        name: string;
                        label: string;
                        visibility: string;
                        placeholder?: string | undefined;
                        helperText?: string | undefined;
                        required?: boolean | undefined;
                    } | {
                        type: "SEPARATOR";
                        name: string;
                    })[];
                    state: string;
                    points: number;
                    commentsCount: number;
                    fields: {
                        type: string;
                        name: string;
                        value?: any;
                    }[];
                    lastChangeAt: Date;
                    isSuspend?: boolean | undefined;
                }> | z.ZodObject<{}, "strip", z.ZodTypeAny, {}, {}>;
            }, "strip", z.ZodTypeAny, {
                data: {
                    id: string;
                    authorId: string;
                    createdAt: Date;
                    updatedAt: Date;
                    title: string;
                    key: string;
                    tags: string[];
                    visibility: string;
                    projectId: string;
                    schema: ({
                        options: {
                            min?: number | undefined;
                            max?: number | undefined;
                            noDecimal?: boolean | undefined;
                        };
                        type: "NUMBER";
                        name: string;
                        label: string;
                        visibility: string;
                        placeholder?: string | undefined;
                        helperText?: string | undefined;
                        required?: boolean | undefined;
                    } | {
                        options: {
                            minLength?: number | undefined;
                            maxLength?: number | undefined;
                            pattern?: string | undefined;
                        };
                        type: "TEXT";
                        name: string;
                        label: string;
                        visibility: string;
                        placeholder?: string | undefined;
                        helperText?: string | undefined;
                        required?: boolean | undefined;
                    } | {
                        options: {
                            isMulti: boolean;
                            optionList: string[];
                            maxSelect: number | null;
                            minSelect: number | null;
                        };
                        type: "SELECT";
                        name: string;
                        label: string;
                        visibility: string;
                        placeholder?: string | undefined;
                        helperText?: string | undefined;
                        required?: boolean | undefined;
                    } | {
                        options: {
                            min?: string | undefined;
                            max?: string | undefined;
                        };
                        type: "DATETIME";
                        name: string;
                        label: string;
                        visibility: string;
                        placeholder?: string | undefined;
                        helperText?: string | undefined;
                        required?: boolean | undefined;
                    } | {
                        options: {
                            minLength?: number | undefined;
                            maxLength?: number | undefined;
                            disableImages?: boolean | undefined;
                        };
                        type: "RICHTEXT";
                        name: string;
                        label: string;
                        visibility: string;
                        placeholder?: string | undefined;
                        helperText?: string | undefined;
                        required?: boolean | undefined;
                    } | {
                        type: "SEPARATOR";
                        name: string;
                    })[];
                    state: string;
                    points: number;
                    commentsCount: number;
                    fields: {
                        type: string;
                        name: string;
                        value?: any;
                    }[];
                    lastChangeAt: Date;
                    isSuspend?: boolean | undefined;
                } | {};
            }, {
                data: {
                    id: string;
                    authorId: string;
                    createdAt: Date;
                    updatedAt: Date;
                    title: string;
                    key: string;
                    tags: string[];
                    visibility: string;
                    projectId: string;
                    schema: ({
                        options: {
                            min?: number | undefined;
                            max?: number | undefined;
                            noDecimal?: boolean | undefined;
                        };
                        type: "NUMBER";
                        name: string;
                        label: string;
                        visibility: string;
                        placeholder?: string | undefined;
                        helperText?: string | undefined;
                        required?: boolean | undefined;
                    } | {
                        options: {
                            minLength?: number | undefined;
                            maxLength?: number | undefined;
                            pattern?: string | undefined;
                        };
                        type: "TEXT";
                        name: string;
                        label: string;
                        visibility: string;
                        placeholder?: string | undefined;
                        helperText?: string | undefined;
                        required?: boolean | undefined;
                    } | {
                        options: {
                            isMulti: boolean;
                            optionList: string[];
                            maxSelect: number | null;
                            minSelect: number | null;
                        };
                        type: "SELECT";
                        name: string;
                        label: string;
                        visibility: string;
                        placeholder?: string | undefined;
                        helperText?: string | undefined;
                        required?: boolean | undefined;
                    } | {
                        options: {
                            min?: string | undefined;
                            max?: string | undefined;
                        };
                        type: "DATETIME";
                        name: string;
                        label: string;
                        visibility: string;
                        placeholder?: string | undefined;
                        helperText?: string | undefined;
                        required?: boolean | undefined;
                    } | {
                        options: {
                            minLength?: number | undefined;
                            maxLength?: number | undefined;
                            disableImages?: boolean | undefined;
                        };
                        type: "RICHTEXT";
                        name: string;
                        label: string;
                        visibility: string;
                        placeholder?: string | undefined;
                        helperText?: string | undefined;
                        required?: boolean | undefined;
                    } | {
                        type: "SEPARATOR";
                        name: string;
                    })[];
                    state: string;
                    points: number;
                    commentsCount: number;
                    fields: {
                        type: string;
                        name: string;
                        value?: any;
                    }[];
                    lastChangeAt: Date;
                    isSuspend?: boolean | undefined;
                } | {};
            }>;
            401: z.ZodObject<{
                title: z.ZodString;
                status: z.ZodNumber;
                detail: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                status: number;
                title: string;
                detail?: string | undefined;
            }, {
                status: number;
                title: string;
                detail?: string | undefined;
            }>;
            404: z.ZodObject<{
                title: z.ZodString;
                status: z.ZodNumber;
                detail: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                status: number;
                title: string;
                detail?: string | undefined;
            }, {
                status: number;
                title: string;
                detail?: string | undefined;
            }>;
            403: z.ZodObject<{
                title: z.ZodString;
                status: z.ZodNumber;
                detail: z.ZodOptional<z.ZodString>;
                errors: z.ZodOptional<z.ZodArray<z.ZodType<ErrorObject, z.ZodTypeDef, ErrorObject>, "many">>;
            }, "strip", z.ZodTypeAny, {
                status: number;
                title: string;
                errors?: ErrorObject[] | undefined;
                detail?: string | undefined;
            }, {
                status: number;
                title: string;
                errors?: ErrorObject[] | undefined;
                detail?: string | undefined;
            }>;
            500: z.ZodObject<{
                title: z.ZodString;
                status: z.ZodNumber;
                detail: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                status: number;
                title: string;
                detail?: string | undefined;
            }, {
                status: number;
                title: string;
                detail?: string | undefined;
            }>;
        };
    };
    changeIssueVisibility: {
        metadata: {
            readonly permissions: {
                readonly OR: readonly ["manage:project:asModerator", "update:issue:any"];
            };
        };
        summary: "Change issue visibility";
        method: "POST";
        body: z.ZodObject<{
            visibility: z.ZodEnum<["PUBLIC", "PRIVATE"]>;
        }, "strip", z.ZodTypeAny, {
            visibility: "PUBLIC" | "PRIVATE";
        }, {
            visibility: "PUBLIC" | "PRIVATE";
        }>;
        path: "/api/issues/by/id/:issueId/visibility";
        headers: z.ZodObject<{
            authorization: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            authorization: string;
        }, {
            authorization: string;
        }>;
        responses: {
            200: z.ZodObject<{
                data: z.ZodType<{
                    id: string;
                    authorId: string;
                    createdAt: Date;
                    updatedAt: Date;
                    title: string;
                    key: string;
                    tags: string[];
                    visibility: string;
                    projectId: string;
                    schema: ({
                        options: {
                            min?: number | undefined;
                            max?: number | undefined;
                            noDecimal?: boolean | undefined;
                        };
                        type: "NUMBER";
                        name: string;
                        label: string;
                        visibility: string;
                        placeholder?: string | undefined;
                        helperText?: string | undefined;
                        required?: boolean | undefined;
                    } | {
                        options: {
                            minLength?: number | undefined;
                            maxLength?: number | undefined;
                            pattern?: string | undefined;
                        };
                        type: "TEXT";
                        name: string;
                        label: string;
                        visibility: string;
                        placeholder?: string | undefined;
                        helperText?: string | undefined;
                        required?: boolean | undefined;
                    } | {
                        options: {
                            isMulti: boolean;
                            optionList: string[];
                            maxSelect: number | null;
                            minSelect: number | null;
                        };
                        type: "SELECT";
                        name: string;
                        label: string;
                        visibility: string;
                        placeholder?: string | undefined;
                        helperText?: string | undefined;
                        required?: boolean | undefined;
                    } | {
                        options: {
                            min?: string | undefined;
                            max?: string | undefined;
                        };
                        type: "DATETIME";
                        name: string;
                        label: string;
                        visibility: string;
                        placeholder?: string | undefined;
                        helperText?: string | undefined;
                        required?: boolean | undefined;
                    } | {
                        options: {
                            minLength?: number | undefined;
                            maxLength?: number | undefined;
                            disableImages?: boolean | undefined;
                        };
                        type: "RICHTEXT";
                        name: string;
                        label: string;
                        visibility: string;
                        placeholder?: string | undefined;
                        helperText?: string | undefined;
                        required?: boolean | undefined;
                    } | {
                        type: "SEPARATOR";
                        name: string;
                    })[];
                    state: string;
                    points: number;
                    commentsCount: number;
                    fields: {
                        type: string;
                        name: string;
                        value?: any;
                    }[];
                    lastChangeAt: Date;
                    isSuspend?: boolean | undefined;
                }, z.ZodTypeDef, {
                    id: string;
                    authorId: string;
                    createdAt: Date;
                    updatedAt: Date;
                    title: string;
                    key: string;
                    tags: string[];
                    visibility: string;
                    projectId: string;
                    schema: ({
                        options: {
                            min?: number | undefined;
                            max?: number | undefined;
                            noDecimal?: boolean | undefined;
                        };
                        type: "NUMBER";
                        name: string;
                        label: string;
                        visibility: string;
                        placeholder?: string | undefined;
                        helperText?: string | undefined;
                        required?: boolean | undefined;
                    } | {
                        options: {
                            minLength?: number | undefined;
                            maxLength?: number | undefined;
                            pattern?: string | undefined;
                        };
                        type: "TEXT";
                        name: string;
                        label: string;
                        visibility: string;
                        placeholder?: string | undefined;
                        helperText?: string | undefined;
                        required?: boolean | undefined;
                    } | {
                        options: {
                            isMulti: boolean;
                            optionList: string[];
                            maxSelect: number | null;
                            minSelect: number | null;
                        };
                        type: "SELECT";
                        name: string;
                        label: string;
                        visibility: string;
                        placeholder?: string | undefined;
                        helperText?: string | undefined;
                        required?: boolean | undefined;
                    } | {
                        options: {
                            min?: string | undefined;
                            max?: string | undefined;
                        };
                        type: "DATETIME";
                        name: string;
                        label: string;
                        visibility: string;
                        placeholder?: string | undefined;
                        helperText?: string | undefined;
                        required?: boolean | undefined;
                    } | {
                        options: {
                            minLength?: number | undefined;
                            maxLength?: number | undefined;
                            disableImages?: boolean | undefined;
                        };
                        type: "RICHTEXT";
                        name: string;
                        label: string;
                        visibility: string;
                        placeholder?: string | undefined;
                        helperText?: string | undefined;
                        required?: boolean | undefined;
                    } | {
                        type: "SEPARATOR";
                        name: string;
                    })[];
                    state: string;
                    points: number;
                    commentsCount: number;
                    fields: {
                        type: string;
                        name: string;
                        value?: any;
                    }[];
                    lastChangeAt: Date;
                    isSuspend?: boolean | undefined;
                }> | z.ZodObject<{}, "strip", z.ZodTypeAny, {}, {}>;
            }, "strip", z.ZodTypeAny, {
                data: {
                    id: string;
                    authorId: string;
                    createdAt: Date;
                    updatedAt: Date;
                    title: string;
                    key: string;
                    tags: string[];
                    visibility: string;
                    projectId: string;
                    schema: ({
                        options: {
                            min?: number | undefined;
                            max?: number | undefined;
                            noDecimal?: boolean | undefined;
                        };
                        type: "NUMBER";
                        name: string;
                        label: string;
                        visibility: string;
                        placeholder?: string | undefined;
                        helperText?: string | undefined;
                        required?: boolean | undefined;
                    } | {
                        options: {
                            minLength?: number | undefined;
                            maxLength?: number | undefined;
                            pattern?: string | undefined;
                        };
                        type: "TEXT";
                        name: string;
                        label: string;
                        visibility: string;
                        placeholder?: string | undefined;
                        helperText?: string | undefined;
                        required?: boolean | undefined;
                    } | {
                        options: {
                            isMulti: boolean;
                            optionList: string[];
                            maxSelect: number | null;
                            minSelect: number | null;
                        };
                        type: "SELECT";
                        name: string;
                        label: string;
                        visibility: string;
                        placeholder?: string | undefined;
                        helperText?: string | undefined;
                        required?: boolean | undefined;
                    } | {
                        options: {
                            min?: string | undefined;
                            max?: string | undefined;
                        };
                        type: "DATETIME";
                        name: string;
                        label: string;
                        visibility: string;
                        placeholder?: string | undefined;
                        helperText?: string | undefined;
                        required?: boolean | undefined;
                    } | {
                        options: {
                            minLength?: number | undefined;
                            maxLength?: number | undefined;
                            disableImages?: boolean | undefined;
                        };
                        type: "RICHTEXT";
                        name: string;
                        label: string;
                        visibility: string;
                        placeholder?: string | undefined;
                        helperText?: string | undefined;
                        required?: boolean | undefined;
                    } | {
                        type: "SEPARATOR";
                        name: string;
                    })[];
                    state: string;
                    points: number;
                    commentsCount: number;
                    fields: {
                        type: string;
                        name: string;
                        value?: any;
                    }[];
                    lastChangeAt: Date;
                    isSuspend?: boolean | undefined;
                } | {};
            }, {
                data: {
                    id: string;
                    authorId: string;
                    createdAt: Date;
                    updatedAt: Date;
                    title: string;
                    key: string;
                    tags: string[];
                    visibility: string;
                    projectId: string;
                    schema: ({
                        options: {
                            min?: number | undefined;
                            max?: number | undefined;
                            noDecimal?: boolean | undefined;
                        };
                        type: "NUMBER";
                        name: string;
                        label: string;
                        visibility: string;
                        placeholder?: string | undefined;
                        helperText?: string | undefined;
                        required?: boolean | undefined;
                    } | {
                        options: {
                            minLength?: number | undefined;
                            maxLength?: number | undefined;
                            pattern?: string | undefined;
                        };
                        type: "TEXT";
                        name: string;
                        label: string;
                        visibility: string;
                        placeholder?: string | undefined;
                        helperText?: string | undefined;
                        required?: boolean | undefined;
                    } | {
                        options: {
                            isMulti: boolean;
                            optionList: string[];
                            maxSelect: number | null;
                            minSelect: number | null;
                        };
                        type: "SELECT";
                        name: string;
                        label: string;
                        visibility: string;
                        placeholder?: string | undefined;
                        helperText?: string | undefined;
                        required?: boolean | undefined;
                    } | {
                        options: {
                            min?: string | undefined;
                            max?: string | undefined;
                        };
                        type: "DATETIME";
                        name: string;
                        label: string;
                        visibility: string;
                        placeholder?: string | undefined;
                        helperText?: string | undefined;
                        required?: boolean | undefined;
                    } | {
                        options: {
                            minLength?: number | undefined;
                            maxLength?: number | undefined;
                            disableImages?: boolean | undefined;
                        };
                        type: "RICHTEXT";
                        name: string;
                        label: string;
                        visibility: string;
                        placeholder?: string | undefined;
                        helperText?: string | undefined;
                        required?: boolean | undefined;
                    } | {
                        type: "SEPARATOR";
                        name: string;
                    })[];
                    state: string;
                    points: number;
                    commentsCount: number;
                    fields: {
                        type: string;
                        name: string;
                        value?: any;
                    }[];
                    lastChangeAt: Date;
                    isSuspend?: boolean | undefined;
                } | {};
            }>;
            401: z.ZodObject<{
                title: z.ZodString;
                status: z.ZodNumber;
                detail: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                status: number;
                title: string;
                detail?: string | undefined;
            }, {
                status: number;
                title: string;
                detail?: string | undefined;
            }>;
            404: z.ZodObject<{
                title: z.ZodString;
                status: z.ZodNumber;
                detail: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                status: number;
                title: string;
                detail?: string | undefined;
            }, {
                status: number;
                title: string;
                detail?: string | undefined;
            }>;
            403: z.ZodObject<{
                title: z.ZodString;
                status: z.ZodNumber;
                detail: z.ZodOptional<z.ZodString>;
                errors: z.ZodOptional<z.ZodArray<z.ZodType<ErrorObject, z.ZodTypeDef, ErrorObject>, "many">>;
            }, "strip", z.ZodTypeAny, {
                status: number;
                title: string;
                errors?: ErrorObject[] | undefined;
                detail?: string | undefined;
            }, {
                status: number;
                title: string;
                errors?: ErrorObject[] | undefined;
                detail?: string | undefined;
            }>;
            500: z.ZodObject<{
                title: z.ZodString;
                status: z.ZodNumber;
                detail: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                status: number;
                title: string;
                detail?: string | undefined;
            }, {
                status: number;
                title: string;
                detail?: string | undefined;
            }>;
        };
    };
    getIssueById: {
        metadata: {
            isPublic: boolean;
            permissions: {};
        };
        summary: "Get a issue by id";
        method: "GET";
        path: "/api/issues/by/id/:issueId";
        headers: z.ZodOptional<z.ZodObject<{
            authorization: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            authorization: string;
        }, {
            authorization: string;
        }>>;
        responses: {
            200: z.ZodObject<{
                data: z.ZodType<{
                    id: string;
                    authorId: string;
                    createdAt: Date;
                    title: string;
                    key: string;
                    tags: {
                        id: string;
                        name: string;
                        description: string;
                        displayName: string;
                        color: string;
                    }[];
                    author: {
                        id: string;
                        username: string;
                        email: string;
                        roleDisplayName: string;
                        roleName: string;
                    };
                    visibility: string;
                    projectId: string;
                    schema: ({
                        options: {
                            min?: number | undefined;
                            max?: number | undefined;
                            noDecimal?: boolean | undefined;
                        };
                        type: "NUMBER";
                        name: string;
                        label: string;
                        visibility: string;
                        placeholder?: string | undefined;
                        helperText?: string | undefined;
                        required?: boolean | undefined;
                    } | {
                        options: {
                            minLength?: number | undefined;
                            maxLength?: number | undefined;
                            pattern?: string | undefined;
                        };
                        type: "TEXT";
                        name: string;
                        label: string;
                        visibility: string;
                        placeholder?: string | undefined;
                        helperText?: string | undefined;
                        required?: boolean | undefined;
                    } | {
                        options: {
                            isMulti: boolean;
                            optionList: string[];
                            maxSelect: number | null;
                            minSelect: number | null;
                        };
                        type: "SELECT";
                        name: string;
                        label: string;
                        visibility: string;
                        placeholder?: string | undefined;
                        helperText?: string | undefined;
                        required?: boolean | undefined;
                    } | {
                        options: {
                            min?: string | undefined;
                            max?: string | undefined;
                        };
                        type: "DATETIME";
                        name: string;
                        label: string;
                        visibility: string;
                        placeholder?: string | undefined;
                        helperText?: string | undefined;
                        required?: boolean | undefined;
                    } | {
                        options: {
                            minLength?: number | undefined;
                            maxLength?: number | undefined;
                            disableImages?: boolean | undefined;
                        };
                        type: "RICHTEXT";
                        name: string;
                        label: string;
                        visibility: string;
                        placeholder?: string | undefined;
                        helperText?: string | undefined;
                        required?: boolean | undefined;
                    } | {
                        type: "SEPARATOR";
                        name: string;
                    })[];
                    state: string;
                    points: number;
                    commentsCount: number;
                    fields: {
                        type: string;
                        name: string;
                        value?: any;
                    }[];
                    lastChangeAt: Date;
                    project: {
                        id: string;
                        name: string;
                        slug: string;
                        displayName: string;
                    };
                    group: {
                        id: string;
                        name: string;
                        slug: string;
                        displayName: string;
                    };
                    isSuspend?: boolean | undefined;
                } | {
                    id: string;
                    authorId: string;
                    createdAt: Date;
                    title: string;
                    key: string;
                    tags: {
                        id: string;
                        name: string;
                        description: string;
                        displayName: string;
                        color: string;
                    }[];
                    author: {
                        id: string;
                        username: string;
                        email: string;
                        roleDisplayName: string;
                        roleName: string;
                    };
                    visibility: string;
                    projectId: string;
                    schema: ({
                        options: {
                            min?: number | undefined;
                            max?: number | undefined;
                            noDecimal?: boolean | undefined;
                        };
                        type: "NUMBER";
                        name: string;
                        label: string;
                        visibility: string;
                        placeholder?: string | undefined;
                        helperText?: string | undefined;
                        required?: boolean | undefined;
                    } | {
                        options: {
                            minLength?: number | undefined;
                            maxLength?: number | undefined;
                            pattern?: string | undefined;
                        };
                        type: "TEXT";
                        name: string;
                        label: string;
                        visibility: string;
                        placeholder?: string | undefined;
                        helperText?: string | undefined;
                        required?: boolean | undefined;
                    } | {
                        options: {
                            isMulti: boolean;
                            optionList: string[];
                            maxSelect: number | null;
                            minSelect: number | null;
                        };
                        type: "SELECT";
                        name: string;
                        label: string;
                        visibility: string;
                        placeholder?: string | undefined;
                        helperText?: string | undefined;
                        required?: boolean | undefined;
                    } | {
                        options: {
                            min?: string | undefined;
                            max?: string | undefined;
                        };
                        type: "DATETIME";
                        name: string;
                        label: string;
                        visibility: string;
                        placeholder?: string | undefined;
                        helperText?: string | undefined;
                        required?: boolean | undefined;
                    } | {
                        options: {
                            minLength?: number | undefined;
                            maxLength?: number | undefined;
                            disableImages?: boolean | undefined;
                        };
                        type: "RICHTEXT";
                        name: string;
                        label: string;
                        visibility: string;
                        placeholder?: string | undefined;
                        helperText?: string | undefined;
                        required?: boolean | undefined;
                    } | {
                        type: "SEPARATOR";
                        name: string;
                    })[];
                    state: string;
                    points: number;
                    commentsCount: number;
                    fields: {
                        type: string;
                        name: string;
                        value?: any;
                    }[];
                    lastChangeAt: Date;
                    project: {
                        id: string;
                        name: string;
                        slug: string;
                        displayName: string;
                    };
                    group: {
                        id: string;
                        name: string;
                        slug: string;
                        displayName: string;
                    };
                    operations: {
                        canBlock: boolean;
                        canDelete: boolean;
                        canUpdateState: boolean;
                        canEditFields: boolean;
                        canEditInternalFields: boolean;
                        canEditHiddenFields: boolean;
                        canUpdateConfidents: boolean;
                        canBlockComments: boolean;
                        canDeleteComments: boolean;
                        canUpdateTags: boolean;
                        canUpdateVisibility: boolean;
                    };
                    isUpvotedByMe: boolean;
                    isDownvotedByMe: boolean;
                    isSuspend?: boolean | undefined;
                } | {
                    id: string;
                    authorId: string;
                    createdAt: Date;
                    updatedAt: Date;
                    title: string;
                    key: string;
                    tags: {
                        id: string;
                        name: string;
                        description: string;
                        displayName: string;
                        color: string;
                    }[];
                    author: {
                        id: string;
                        username: string;
                        email: string;
                        roleDisplayName: string;
                        roleName: string;
                    };
                    visibility: string;
                    projectId: string;
                    schema: ({
                        options: {
                            min?: number | undefined;
                            max?: number | undefined;
                            noDecimal?: boolean | undefined;
                        };
                        type: "NUMBER";
                        name: string;
                        label: string;
                        visibility: string;
                        placeholder?: string | undefined;
                        helperText?: string | undefined;
                        required?: boolean | undefined;
                    } | {
                        options: {
                            minLength?: number | undefined;
                            maxLength?: number | undefined;
                            pattern?: string | undefined;
                        };
                        type: "TEXT";
                        name: string;
                        label: string;
                        visibility: string;
                        placeholder?: string | undefined;
                        helperText?: string | undefined;
                        required?: boolean | undefined;
                    } | {
                        options: {
                            isMulti: boolean;
                            optionList: string[];
                            maxSelect: number | null;
                            minSelect: number | null;
                        };
                        type: "SELECT";
                        name: string;
                        label: string;
                        visibility: string;
                        placeholder?: string | undefined;
                        helperText?: string | undefined;
                        required?: boolean | undefined;
                    } | {
                        options: {
                            min?: string | undefined;
                            max?: string | undefined;
                        };
                        type: "DATETIME";
                        name: string;
                        label: string;
                        visibility: string;
                        placeholder?: string | undefined;
                        helperText?: string | undefined;
                        required?: boolean | undefined;
                    } | {
                        options: {
                            minLength?: number | undefined;
                            maxLength?: number | undefined;
                            disableImages?: boolean | undefined;
                        };
                        type: "RICHTEXT";
                        name: string;
                        label: string;
                        visibility: string;
                        placeholder?: string | undefined;
                        helperText?: string | undefined;
                        required?: boolean | undefined;
                    } | {
                        type: "SEPARATOR";
                        name: string;
                    })[];
                    state: string;
                    points: number;
                    commentsCount: number;
                    fields: {
                        type: string;
                        name: string;
                        value?: any;
                    }[];
                    lastChangeAt: Date;
                    project: {
                        id: string;
                        name: string;
                        slug: string;
                        displayName: string;
                    };
                    group: {
                        id: string;
                        name: string;
                        slug: string;
                        displayName: string;
                    };
                    operations: {
                        canBlock: boolean;
                        canDelete: boolean;
                        canUpdateState: boolean;
                        canEditFields: boolean;
                        canEditInternalFields: boolean;
                        canEditHiddenFields: boolean;
                        canUpdateConfidents: boolean;
                        canBlockComments: boolean;
                        canDeleteComments: boolean;
                        canUpdateTags: boolean;
                        canUpdateVisibility: boolean;
                    };
                    isUpvotedByMe: boolean;
                    isDownvotedByMe: boolean;
                    isSuspend?: boolean | undefined;
                }, z.ZodTypeDef, {
                    id: string;
                    authorId: string;
                    createdAt: Date;
                    title: string;
                    key: string;
                    tags: {
                        id: string;
                        name: string;
                        description: string;
                        displayName: string;
                        color: string;
                    }[];
                    author: {
                        id: string;
                        username: string;
                        email: string;
                        roleDisplayName: string;
                        roleName: string;
                    };
                    visibility: string;
                    projectId: string;
                    schema: ({
                        options: {
                            min?: number | undefined;
                            max?: number | undefined;
                            noDecimal?: boolean | undefined;
                        };
                        type: "NUMBER";
                        name: string;
                        label: string;
                        visibility: string;
                        placeholder?: string | undefined;
                        helperText?: string | undefined;
                        required?: boolean | undefined;
                    } | {
                        options: {
                            minLength?: number | undefined;
                            maxLength?: number | undefined;
                            pattern?: string | undefined;
                        };
                        type: "TEXT";
                        name: string;
                        label: string;
                        visibility: string;
                        placeholder?: string | undefined;
                        helperText?: string | undefined;
                        required?: boolean | undefined;
                    } | {
                        options: {
                            isMulti: boolean;
                            optionList: string[];
                            maxSelect: number | null;
                            minSelect: number | null;
                        };
                        type: "SELECT";
                        name: string;
                        label: string;
                        visibility: string;
                        placeholder?: string | undefined;
                        helperText?: string | undefined;
                        required?: boolean | undefined;
                    } | {
                        options: {
                            min?: string | undefined;
                            max?: string | undefined;
                        };
                        type: "DATETIME";
                        name: string;
                        label: string;
                        visibility: string;
                        placeholder?: string | undefined;
                        helperText?: string | undefined;
                        required?: boolean | undefined;
                    } | {
                        options: {
                            minLength?: number | undefined;
                            maxLength?: number | undefined;
                            disableImages?: boolean | undefined;
                        };
                        type: "RICHTEXT";
                        name: string;
                        label: string;
                        visibility: string;
                        placeholder?: string | undefined;
                        helperText?: string | undefined;
                        required?: boolean | undefined;
                    } | {
                        type: "SEPARATOR";
                        name: string;
                    })[];
                    state: string;
                    points: number;
                    commentsCount: number;
                    fields: {
                        type: string;
                        name: string;
                        value?: any;
                    }[];
                    lastChangeAt: Date;
                    project: {
                        id: string;
                        name: string;
                        slug: string;
                        displayName: string;
                    };
                    group: {
                        id: string;
                        name: string;
                        slug: string;
                        displayName: string;
                    };
                    isSuspend?: boolean | undefined;
                } | {
                    id: string;
                    authorId: string;
                    createdAt: Date;
                    title: string;
                    key: string;
                    tags: {
                        id: string;
                        name: string;
                        description: string;
                        displayName: string;
                        color: string;
                    }[];
                    author: {
                        id: string;
                        username: string;
                        email: string;
                        roleDisplayName: string;
                        roleName: string;
                    };
                    visibility: string;
                    projectId: string;
                    schema: ({
                        options: {
                            min?: number | undefined;
                            max?: number | undefined;
                            noDecimal?: boolean | undefined;
                        };
                        type: "NUMBER";
                        name: string;
                        label: string;
                        visibility: string;
                        placeholder?: string | undefined;
                        helperText?: string | undefined;
                        required?: boolean | undefined;
                    } | {
                        options: {
                            minLength?: number | undefined;
                            maxLength?: number | undefined;
                            pattern?: string | undefined;
                        };
                        type: "TEXT";
                        name: string;
                        label: string;
                        visibility: string;
                        placeholder?: string | undefined;
                        helperText?: string | undefined;
                        required?: boolean | undefined;
                    } | {
                        options: {
                            isMulti: boolean;
                            optionList: string[];
                            maxSelect: number | null;
                            minSelect: number | null;
                        };
                        type: "SELECT";
                        name: string;
                        label: string;
                        visibility: string;
                        placeholder?: string | undefined;
                        helperText?: string | undefined;
                        required?: boolean | undefined;
                    } | {
                        options: {
                            min?: string | undefined;
                            max?: string | undefined;
                        };
                        type: "DATETIME";
                        name: string;
                        label: string;
                        visibility: string;
                        placeholder?: string | undefined;
                        helperText?: string | undefined;
                        required?: boolean | undefined;
                    } | {
                        options: {
                            minLength?: number | undefined;
                            maxLength?: number | undefined;
                            disableImages?: boolean | undefined;
                        };
                        type: "RICHTEXT";
                        name: string;
                        label: string;
                        visibility: string;
                        placeholder?: string | undefined;
                        helperText?: string | undefined;
                        required?: boolean | undefined;
                    } | {
                        type: "SEPARATOR";
                        name: string;
                    })[];
                    state: string;
                    points: number;
                    commentsCount: number;
                    fields: {
                        type: string;
                        name: string;
                        value?: any;
                    }[];
                    lastChangeAt: Date;
                    project: {
                        id: string;
                        name: string;
                        slug: string;
                        displayName: string;
                    };
                    group: {
                        id: string;
                        name: string;
                        slug: string;
                        displayName: string;
                    };
                    operations: {
                        canBlock: boolean;
                        canDelete: boolean;
                        canUpdateState: boolean;
                        canEditFields: boolean;
                        canEditInternalFields: boolean;
                        canEditHiddenFields: boolean;
                        canUpdateConfidents: boolean;
                        canBlockComments: boolean;
                        canDeleteComments: boolean;
                        canUpdateTags: boolean;
                        canUpdateVisibility: boolean;
                    };
                    isUpvotedByMe: boolean;
                    isDownvotedByMe: boolean;
                    isSuspend?: boolean | undefined;
                } | {
                    id: string;
                    authorId: string;
                    createdAt: Date;
                    updatedAt: Date;
                    title: string;
                    key: string;
                    tags: {
                        id: string;
                        name: string;
                        description: string;
                        displayName: string;
                        color: string;
                    }[];
                    author: {
                        id: string;
                        username: string;
                        email: string;
                        roleDisplayName: string;
                        roleName: string;
                    };
                    visibility: string;
                    projectId: string;
                    schema: ({
                        options: {
                            min?: number | undefined;
                            max?: number | undefined;
                            noDecimal?: boolean | undefined;
                        };
                        type: "NUMBER";
                        name: string;
                        label: string;
                        visibility: string;
                        placeholder?: string | undefined;
                        helperText?: string | undefined;
                        required?: boolean | undefined;
                    } | {
                        options: {
                            minLength?: number | undefined;
                            maxLength?: number | undefined;
                            pattern?: string | undefined;
                        };
                        type: "TEXT";
                        name: string;
                        label: string;
                        visibility: string;
                        placeholder?: string | undefined;
                        helperText?: string | undefined;
                        required?: boolean | undefined;
                    } | {
                        options: {
                            isMulti: boolean;
                            optionList: string[];
                            maxSelect: number | null;
                            minSelect: number | null;
                        };
                        type: "SELECT";
                        name: string;
                        label: string;
                        visibility: string;
                        placeholder?: string | undefined;
                        helperText?: string | undefined;
                        required?: boolean | undefined;
                    } | {
                        options: {
                            min?: string | undefined;
                            max?: string | undefined;
                        };
                        type: "DATETIME";
                        name: string;
                        label: string;
                        visibility: string;
                        placeholder?: string | undefined;
                        helperText?: string | undefined;
                        required?: boolean | undefined;
                    } | {
                        options: {
                            minLength?: number | undefined;
                            maxLength?: number | undefined;
                            disableImages?: boolean | undefined;
                        };
                        type: "RICHTEXT";
                        name: string;
                        label: string;
                        visibility: string;
                        placeholder?: string | undefined;
                        helperText?: string | undefined;
                        required?: boolean | undefined;
                    } | {
                        type: "SEPARATOR";
                        name: string;
                    })[];
                    state: string;
                    points: number;
                    commentsCount: number;
                    fields: {
                        type: string;
                        name: string;
                        value?: any;
                    }[];
                    lastChangeAt: Date;
                    project: {
                        id: string;
                        name: string;
                        slug: string;
                        displayName: string;
                    };
                    group: {
                        id: string;
                        name: string;
                        slug: string;
                        displayName: string;
                    };
                    operations: {
                        canBlock: boolean;
                        canDelete: boolean;
                        canUpdateState: boolean;
                        canEditFields: boolean;
                        canEditInternalFields: boolean;
                        canEditHiddenFields: boolean;
                        canUpdateConfidents: boolean;
                        canBlockComments: boolean;
                        canDeleteComments: boolean;
                        canUpdateTags: boolean;
                        canUpdateVisibility: boolean;
                    };
                    isUpvotedByMe: boolean;
                    isDownvotedByMe: boolean;
                    isSuspend?: boolean | undefined;
                }> | z.ZodObject<{}, "strip", z.ZodTypeAny, {}, {}>;
            }, "strip", z.ZodTypeAny, {
                data: {
                    id: string;
                    authorId: string;
                    createdAt: Date;
                    title: string;
                    key: string;
                    tags: {
                        id: string;
                        name: string;
                        description: string;
                        displayName: string;
                        color: string;
                    }[];
                    author: {
                        id: string;
                        username: string;
                        email: string;
                        roleDisplayName: string;
                        roleName: string;
                    };
                    visibility: string;
                    projectId: string;
                    schema: ({
                        options: {
                            min?: number | undefined;
                            max?: number | undefined;
                            noDecimal?: boolean | undefined;
                        };
                        type: "NUMBER";
                        name: string;
                        label: string;
                        visibility: string;
                        placeholder?: string | undefined;
                        helperText?: string | undefined;
                        required?: boolean | undefined;
                    } | {
                        options: {
                            minLength?: number | undefined;
                            maxLength?: number | undefined;
                            pattern?: string | undefined;
                        };
                        type: "TEXT";
                        name: string;
                        label: string;
                        visibility: string;
                        placeholder?: string | undefined;
                        helperText?: string | undefined;
                        required?: boolean | undefined;
                    } | {
                        options: {
                            isMulti: boolean;
                            optionList: string[];
                            maxSelect: number | null;
                            minSelect: number | null;
                        };
                        type: "SELECT";
                        name: string;
                        label: string;
                        visibility: string;
                        placeholder?: string | undefined;
                        helperText?: string | undefined;
                        required?: boolean | undefined;
                    } | {
                        options: {
                            min?: string | undefined;
                            max?: string | undefined;
                        };
                        type: "DATETIME";
                        name: string;
                        label: string;
                        visibility: string;
                        placeholder?: string | undefined;
                        helperText?: string | undefined;
                        required?: boolean | undefined;
                    } | {
                        options: {
                            minLength?: number | undefined;
                            maxLength?: number | undefined;
                            disableImages?: boolean | undefined;
                        };
                        type: "RICHTEXT";
                        name: string;
                        label: string;
                        visibility: string;
                        placeholder?: string | undefined;
                        helperText?: string | undefined;
                        required?: boolean | undefined;
                    } | {
                        type: "SEPARATOR";
                        name: string;
                    })[];
                    state: string;
                    points: number;
                    commentsCount: number;
                    fields: {
                        type: string;
                        name: string;
                        value?: any;
                    }[];
                    lastChangeAt: Date;
                    project: {
                        id: string;
                        name: string;
                        slug: string;
                        displayName: string;
                    };
                    group: {
                        id: string;
                        name: string;
                        slug: string;
                        displayName: string;
                    };
                    isSuspend?: boolean | undefined;
                } | {
                    id: string;
                    authorId: string;
                    createdAt: Date;
                    title: string;
                    key: string;
                    tags: {
                        id: string;
                        name: string;
                        description: string;
                        displayName: string;
                        color: string;
                    }[];
                    author: {
                        id: string;
                        username: string;
                        email: string;
                        roleDisplayName: string;
                        roleName: string;
                    };
                    visibility: string;
                    projectId: string;
                    schema: ({
                        options: {
                            min?: number | undefined;
                            max?: number | undefined;
                            noDecimal?: boolean | undefined;
                        };
                        type: "NUMBER";
                        name: string;
                        label: string;
                        visibility: string;
                        placeholder?: string | undefined;
                        helperText?: string | undefined;
                        required?: boolean | undefined;
                    } | {
                        options: {
                            minLength?: number | undefined;
                            maxLength?: number | undefined;
                            pattern?: string | undefined;
                        };
                        type: "TEXT";
                        name: string;
                        label: string;
                        visibility: string;
                        placeholder?: string | undefined;
                        helperText?: string | undefined;
                        required?: boolean | undefined;
                    } | {
                        options: {
                            isMulti: boolean;
                            optionList: string[];
                            maxSelect: number | null;
                            minSelect: number | null;
                        };
                        type: "SELECT";
                        name: string;
                        label: string;
                        visibility: string;
                        placeholder?: string | undefined;
                        helperText?: string | undefined;
                        required?: boolean | undefined;
                    } | {
                        options: {
                            min?: string | undefined;
                            max?: string | undefined;
                        };
                        type: "DATETIME";
                        name: string;
                        label: string;
                        visibility: string;
                        placeholder?: string | undefined;
                        helperText?: string | undefined;
                        required?: boolean | undefined;
                    } | {
                        options: {
                            minLength?: number | undefined;
                            maxLength?: number | undefined;
                            disableImages?: boolean | undefined;
                        };
                        type: "RICHTEXT";
                        name: string;
                        label: string;
                        visibility: string;
                        placeholder?: string | undefined;
                        helperText?: string | undefined;
                        required?: boolean | undefined;
                    } | {
                        type: "SEPARATOR";
                        name: string;
                    })[];
                    state: string;
                    points: number;
                    commentsCount: number;
                    fields: {
                        type: string;
                        name: string;
                        value?: any;
                    }[];
                    lastChangeAt: Date;
                    project: {
                        id: string;
                        name: string;
                        slug: string;
                        displayName: string;
                    };
                    group: {
                        id: string;
                        name: string;
                        slug: string;
                        displayName: string;
                    };
                    operations: {
                        canBlock: boolean;
                        canDelete: boolean;
                        canUpdateState: boolean;
                        canEditFields: boolean;
                        canEditInternalFields: boolean;
                        canEditHiddenFields: boolean;
                        canUpdateConfidents: boolean;
                        canBlockComments: boolean;
                        canDeleteComments: boolean;
                        canUpdateTags: boolean;
                        canUpdateVisibility: boolean;
                    };
                    isUpvotedByMe: boolean;
                    isDownvotedByMe: boolean;
                    isSuspend?: boolean | undefined;
                } | {
                    id: string;
                    authorId: string;
                    createdAt: Date;
                    updatedAt: Date;
                    title: string;
                    key: string;
                    tags: {
                        id: string;
                        name: string;
                        description: string;
                        displayName: string;
                        color: string;
                    }[];
                    author: {
                        id: string;
                        username: string;
                        email: string;
                        roleDisplayName: string;
                        roleName: string;
                    };
                    visibility: string;
                    projectId: string;
                    schema: ({
                        options: {
                            min?: number | undefined;
                            max?: number | undefined;
                            noDecimal?: boolean | undefined;
                        };
                        type: "NUMBER";
                        name: string;
                        label: string;
                        visibility: string;
                        placeholder?: string | undefined;
                        helperText?: string | undefined;
                        required?: boolean | undefined;
                    } | {
                        options: {
                            minLength?: number | undefined;
                            maxLength?: number | undefined;
                            pattern?: string | undefined;
                        };
                        type: "TEXT";
                        name: string;
                        label: string;
                        visibility: string;
                        placeholder?: string | undefined;
                        helperText?: string | undefined;
                        required?: boolean | undefined;
                    } | {
                        options: {
                            isMulti: boolean;
                            optionList: string[];
                            maxSelect: number | null;
                            minSelect: number | null;
                        };
                        type: "SELECT";
                        name: string;
                        label: string;
                        visibility: string;
                        placeholder?: string | undefined;
                        helperText?: string | undefined;
                        required?: boolean | undefined;
                    } | {
                        options: {
                            min?: string | undefined;
                            max?: string | undefined;
                        };
                        type: "DATETIME";
                        name: string;
                        label: string;
                        visibility: string;
                        placeholder?: string | undefined;
                        helperText?: string | undefined;
                        required?: boolean | undefined;
                    } | {
                        options: {
                            minLength?: number | undefined;
                            maxLength?: number | undefined;
                            disableImages?: boolean | undefined;
                        };
                        type: "RICHTEXT";
                        name: string;
                        label: string;
                        visibility: string;
                        placeholder?: string | undefined;
                        helperText?: string | undefined;
                        required?: boolean | undefined;
                    } | {
                        type: "SEPARATOR";
                        name: string;
                    })[];
                    state: string;
                    points: number;
                    commentsCount: number;
                    fields: {
                        type: string;
                        name: string;
                        value?: any;
                    }[];
                    lastChangeAt: Date;
                    project: {
                        id: string;
                        name: string;
                        slug: string;
                        displayName: string;
                    };
                    group: {
                        id: string;
                        name: string;
                        slug: string;
                        displayName: string;
                    };
                    operations: {
                        canBlock: boolean;
                        canDelete: boolean;
                        canUpdateState: boolean;
                        canEditFields: boolean;
                        canEditInternalFields: boolean;
                        canEditHiddenFields: boolean;
                        canUpdateConfidents: boolean;
                        canBlockComments: boolean;
                        canDeleteComments: boolean;
                        canUpdateTags: boolean;
                        canUpdateVisibility: boolean;
                    };
                    isUpvotedByMe: boolean;
                    isDownvotedByMe: boolean;
                    isSuspend?: boolean | undefined;
                } | {};
            }, {
                data: {
                    id: string;
                    authorId: string;
                    createdAt: Date;
                    title: string;
                    key: string;
                    tags: {
                        id: string;
                        name: string;
                        description: string;
                        displayName: string;
                        color: string;
                    }[];
                    author: {
                        id: string;
                        username: string;
                        email: string;
                        roleDisplayName: string;
                        roleName: string;
                    };
                    visibility: string;
                    projectId: string;
                    schema: ({
                        options: {
                            min?: number | undefined;
                            max?: number | undefined;
                            noDecimal?: boolean | undefined;
                        };
                        type: "NUMBER";
                        name: string;
                        label: string;
                        visibility: string;
                        placeholder?: string | undefined;
                        helperText?: string | undefined;
                        required?: boolean | undefined;
                    } | {
                        options: {
                            minLength?: number | undefined;
                            maxLength?: number | undefined;
                            pattern?: string | undefined;
                        };
                        type: "TEXT";
                        name: string;
                        label: string;
                        visibility: string;
                        placeholder?: string | undefined;
                        helperText?: string | undefined;
                        required?: boolean | undefined;
                    } | {
                        options: {
                            isMulti: boolean;
                            optionList: string[];
                            maxSelect: number | null;
                            minSelect: number | null;
                        };
                        type: "SELECT";
                        name: string;
                        label: string;
                        visibility: string;
                        placeholder?: string | undefined;
                        helperText?: string | undefined;
                        required?: boolean | undefined;
                    } | {
                        options: {
                            min?: string | undefined;
                            max?: string | undefined;
                        };
                        type: "DATETIME";
                        name: string;
                        label: string;
                        visibility: string;
                        placeholder?: string | undefined;
                        helperText?: string | undefined;
                        required?: boolean | undefined;
                    } | {
                        options: {
                            minLength?: number | undefined;
                            maxLength?: number | undefined;
                            disableImages?: boolean | undefined;
                        };
                        type: "RICHTEXT";
                        name: string;
                        label: string;
                        visibility: string;
                        placeholder?: string | undefined;
                        helperText?: string | undefined;
                        required?: boolean | undefined;
                    } | {
                        type: "SEPARATOR";
                        name: string;
                    })[];
                    state: string;
                    points: number;
                    commentsCount: number;
                    fields: {
                        type: string;
                        name: string;
                        value?: any;
                    }[];
                    lastChangeAt: Date;
                    project: {
                        id: string;
                        name: string;
                        slug: string;
                        displayName: string;
                    };
                    group: {
                        id: string;
                        name: string;
                        slug: string;
                        displayName: string;
                    };
                    isSuspend?: boolean | undefined;
                } | {
                    id: string;
                    authorId: string;
                    createdAt: Date;
                    title: string;
                    key: string;
                    tags: {
                        id: string;
                        name: string;
                        description: string;
                        displayName: string;
                        color: string;
                    }[];
                    author: {
                        id: string;
                        username: string;
                        email: string;
                        roleDisplayName: string;
                        roleName: string;
                    };
                    visibility: string;
                    projectId: string;
                    schema: ({
                        options: {
                            min?: number | undefined;
                            max?: number | undefined;
                            noDecimal?: boolean | undefined;
                        };
                        type: "NUMBER";
                        name: string;
                        label: string;
                        visibility: string;
                        placeholder?: string | undefined;
                        helperText?: string | undefined;
                        required?: boolean | undefined;
                    } | {
                        options: {
                            minLength?: number | undefined;
                            maxLength?: number | undefined;
                            pattern?: string | undefined;
                        };
                        type: "TEXT";
                        name: string;
                        label: string;
                        visibility: string;
                        placeholder?: string | undefined;
                        helperText?: string | undefined;
                        required?: boolean | undefined;
                    } | {
                        options: {
                            isMulti: boolean;
                            optionList: string[];
                            maxSelect: number | null;
                            minSelect: number | null;
                        };
                        type: "SELECT";
                        name: string;
                        label: string;
                        visibility: string;
                        placeholder?: string | undefined;
                        helperText?: string | undefined;
                        required?: boolean | undefined;
                    } | {
                        options: {
                            min?: string | undefined;
                            max?: string | undefined;
                        };
                        type: "DATETIME";
                        name: string;
                        label: string;
                        visibility: string;
                        placeholder?: string | undefined;
                        helperText?: string | undefined;
                        required?: boolean | undefined;
                    } | {
                        options: {
                            minLength?: number | undefined;
                            maxLength?: number | undefined;
                            disableImages?: boolean | undefined;
                        };
                        type: "RICHTEXT";
                        name: string;
                        label: string;
                        visibility: string;
                        placeholder?: string | undefined;
                        helperText?: string | undefined;
                        required?: boolean | undefined;
                    } | {
                        type: "SEPARATOR";
                        name: string;
                    })[];
                    state: string;
                    points: number;
                    commentsCount: number;
                    fields: {
                        type: string;
                        name: string;
                        value?: any;
                    }[];
                    lastChangeAt: Date;
                    project: {
                        id: string;
                        name: string;
                        slug: string;
                        displayName: string;
                    };
                    group: {
                        id: string;
                        name: string;
                        slug: string;
                        displayName: string;
                    };
                    operations: {
                        canBlock: boolean;
                        canDelete: boolean;
                        canUpdateState: boolean;
                        canEditFields: boolean;
                        canEditInternalFields: boolean;
                        canEditHiddenFields: boolean;
                        canUpdateConfidents: boolean;
                        canBlockComments: boolean;
                        canDeleteComments: boolean;
                        canUpdateTags: boolean;
                        canUpdateVisibility: boolean;
                    };
                    isUpvotedByMe: boolean;
                    isDownvotedByMe: boolean;
                    isSuspend?: boolean | undefined;
                } | {
                    id: string;
                    authorId: string;
                    createdAt: Date;
                    updatedAt: Date;
                    title: string;
                    key: string;
                    tags: {
                        id: string;
                        name: string;
                        description: string;
                        displayName: string;
                        color: string;
                    }[];
                    author: {
                        id: string;
                        username: string;
                        email: string;
                        roleDisplayName: string;
                        roleName: string;
                    };
                    visibility: string;
                    projectId: string;
                    schema: ({
                        options: {
                            min?: number | undefined;
                            max?: number | undefined;
                            noDecimal?: boolean | undefined;
                        };
                        type: "NUMBER";
                        name: string;
                        label: string;
                        visibility: string;
                        placeholder?: string | undefined;
                        helperText?: string | undefined;
                        required?: boolean | undefined;
                    } | {
                        options: {
                            minLength?: number | undefined;
                            maxLength?: number | undefined;
                            pattern?: string | undefined;
                        };
                        type: "TEXT";
                        name: string;
                        label: string;
                        visibility: string;
                        placeholder?: string | undefined;
                        helperText?: string | undefined;
                        required?: boolean | undefined;
                    } | {
                        options: {
                            isMulti: boolean;
                            optionList: string[];
                            maxSelect: number | null;
                            minSelect: number | null;
                        };
                        type: "SELECT";
                        name: string;
                        label: string;
                        visibility: string;
                        placeholder?: string | undefined;
                        helperText?: string | undefined;
                        required?: boolean | undefined;
                    } | {
                        options: {
                            min?: string | undefined;
                            max?: string | undefined;
                        };
                        type: "DATETIME";
                        name: string;
                        label: string;
                        visibility: string;
                        placeholder?: string | undefined;
                        helperText?: string | undefined;
                        required?: boolean | undefined;
                    } | {
                        options: {
                            minLength?: number | undefined;
                            maxLength?: number | undefined;
                            disableImages?: boolean | undefined;
                        };
                        type: "RICHTEXT";
                        name: string;
                        label: string;
                        visibility: string;
                        placeholder?: string | undefined;
                        helperText?: string | undefined;
                        required?: boolean | undefined;
                    } | {
                        type: "SEPARATOR";
                        name: string;
                    })[];
                    state: string;
                    points: number;
                    commentsCount: number;
                    fields: {
                        type: string;
                        name: string;
                        value?: any;
                    }[];
                    lastChangeAt: Date;
                    project: {
                        id: string;
                        name: string;
                        slug: string;
                        displayName: string;
                    };
                    group: {
                        id: string;
                        name: string;
                        slug: string;
                        displayName: string;
                    };
                    operations: {
                        canBlock: boolean;
                        canDelete: boolean;
                        canUpdateState: boolean;
                        canEditFields: boolean;
                        canEditInternalFields: boolean;
                        canEditHiddenFields: boolean;
                        canUpdateConfidents: boolean;
                        canBlockComments: boolean;
                        canDeleteComments: boolean;
                        canUpdateTags: boolean;
                        canUpdateVisibility: boolean;
                    };
                    isUpvotedByMe: boolean;
                    isDownvotedByMe: boolean;
                    isSuspend?: boolean | undefined;
                } | {};
            }>;
            404: z.ZodObject<{
                title: z.ZodString;
                status: z.ZodNumber;
                detail: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                status: number;
                title: string;
                detail?: string | undefined;
            }, {
                status: number;
                title: string;
                detail?: string | undefined;
            }>;
            409: z.ZodObject<{
                title: z.ZodString;
                status: z.ZodNumber;
                detail: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                status: number;
                title: string;
                detail?: string | undefined;
            }, {
                status: number;
                title: string;
                detail?: string | undefined;
            }>;
            500: z.ZodObject<{
                title: z.ZodString;
                status: z.ZodNumber;
                detail: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                status: number;
                title: string;
                detail?: string | undefined;
            }, {
                status: number;
                title: string;
                detail?: string | undefined;
            }>;
        };
    };
    getIssueByKey: {
        metadata: {
            isPublic: boolean;
            permissions: {};
        };
        summary: "Get a issue by key";
        method: "GET";
        path: "/api/issues/by/key/:key";
        headers: z.ZodOptional<z.ZodObject<{
            authorization: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            authorization: string;
        }, {
            authorization: string;
        }>>;
        responses: {
            200: z.ZodObject<{
                data: z.ZodType<{
                    id: string;
                    authorId: string;
                    createdAt: Date;
                    title: string;
                    key: string;
                    tags: {
                        id: string;
                        name: string;
                        description: string;
                        displayName: string;
                        color: string;
                    }[];
                    author: {
                        id: string;
                        username: string;
                        email: string;
                        roleDisplayName: string;
                        roleName: string;
                    };
                    visibility: string;
                    projectId: string;
                    schema: ({
                        options: {
                            min?: number | undefined;
                            max?: number | undefined;
                            noDecimal?: boolean | undefined;
                        };
                        type: "NUMBER";
                        name: string;
                        label: string;
                        visibility: string;
                        placeholder?: string | undefined;
                        helperText?: string | undefined;
                        required?: boolean | undefined;
                    } | {
                        options: {
                            minLength?: number | undefined;
                            maxLength?: number | undefined;
                            pattern?: string | undefined;
                        };
                        type: "TEXT";
                        name: string;
                        label: string;
                        visibility: string;
                        placeholder?: string | undefined;
                        helperText?: string | undefined;
                        required?: boolean | undefined;
                    } | {
                        options: {
                            isMulti: boolean;
                            optionList: string[];
                            maxSelect: number | null;
                            minSelect: number | null;
                        };
                        type: "SELECT";
                        name: string;
                        label: string;
                        visibility: string;
                        placeholder?: string | undefined;
                        helperText?: string | undefined;
                        required?: boolean | undefined;
                    } | {
                        options: {
                            min?: string | undefined;
                            max?: string | undefined;
                        };
                        type: "DATETIME";
                        name: string;
                        label: string;
                        visibility: string;
                        placeholder?: string | undefined;
                        helperText?: string | undefined;
                        required?: boolean | undefined;
                    } | {
                        options: {
                            minLength?: number | undefined;
                            maxLength?: number | undefined;
                            disableImages?: boolean | undefined;
                        };
                        type: "RICHTEXT";
                        name: string;
                        label: string;
                        visibility: string;
                        placeholder?: string | undefined;
                        helperText?: string | undefined;
                        required?: boolean | undefined;
                    } | {
                        type: "SEPARATOR";
                        name: string;
                    })[];
                    state: string;
                    points: number;
                    commentsCount: number;
                    fields: {
                        type: string;
                        name: string;
                        value?: any;
                    }[];
                    lastChangeAt: Date;
                    project: {
                        id: string;
                        name: string;
                        slug: string;
                        displayName: string;
                    };
                    group: {
                        id: string;
                        name: string;
                        slug: string;
                        displayName: string;
                    };
                    isSuspend?: boolean | undefined;
                } | {
                    id: string;
                    authorId: string;
                    createdAt: Date;
                    title: string;
                    key: string;
                    tags: {
                        id: string;
                        name: string;
                        description: string;
                        displayName: string;
                        color: string;
                    }[];
                    author: {
                        id: string;
                        username: string;
                        email: string;
                        roleDisplayName: string;
                        roleName: string;
                    };
                    visibility: string;
                    projectId: string;
                    schema: ({
                        options: {
                            min?: number | undefined;
                            max?: number | undefined;
                            noDecimal?: boolean | undefined;
                        };
                        type: "NUMBER";
                        name: string;
                        label: string;
                        visibility: string;
                        placeholder?: string | undefined;
                        helperText?: string | undefined;
                        required?: boolean | undefined;
                    } | {
                        options: {
                            minLength?: number | undefined;
                            maxLength?: number | undefined;
                            pattern?: string | undefined;
                        };
                        type: "TEXT";
                        name: string;
                        label: string;
                        visibility: string;
                        placeholder?: string | undefined;
                        helperText?: string | undefined;
                        required?: boolean | undefined;
                    } | {
                        options: {
                            isMulti: boolean;
                            optionList: string[];
                            maxSelect: number | null;
                            minSelect: number | null;
                        };
                        type: "SELECT";
                        name: string;
                        label: string;
                        visibility: string;
                        placeholder?: string | undefined;
                        helperText?: string | undefined;
                        required?: boolean | undefined;
                    } | {
                        options: {
                            min?: string | undefined;
                            max?: string | undefined;
                        };
                        type: "DATETIME";
                        name: string;
                        label: string;
                        visibility: string;
                        placeholder?: string | undefined;
                        helperText?: string | undefined;
                        required?: boolean | undefined;
                    } | {
                        options: {
                            minLength?: number | undefined;
                            maxLength?: number | undefined;
                            disableImages?: boolean | undefined;
                        };
                        type: "RICHTEXT";
                        name: string;
                        label: string;
                        visibility: string;
                        placeholder?: string | undefined;
                        helperText?: string | undefined;
                        required?: boolean | undefined;
                    } | {
                        type: "SEPARATOR";
                        name: string;
                    })[];
                    state: string;
                    points: number;
                    commentsCount: number;
                    fields: {
                        type: string;
                        name: string;
                        value?: any;
                    }[];
                    lastChangeAt: Date;
                    project: {
                        id: string;
                        name: string;
                        slug: string;
                        displayName: string;
                    };
                    group: {
                        id: string;
                        name: string;
                        slug: string;
                        displayName: string;
                    };
                    operations: {
                        canBlock: boolean;
                        canDelete: boolean;
                        canUpdateState: boolean;
                        canEditFields: boolean;
                        canEditInternalFields: boolean;
                        canEditHiddenFields: boolean;
                        canUpdateConfidents: boolean;
                        canBlockComments: boolean;
                        canDeleteComments: boolean;
                        canUpdateTags: boolean;
                        canUpdateVisibility: boolean;
                    };
                    isUpvotedByMe: boolean;
                    isDownvotedByMe: boolean;
                    isSuspend?: boolean | undefined;
                } | {
                    id: string;
                    authorId: string;
                    createdAt: Date;
                    updatedAt: Date;
                    title: string;
                    key: string;
                    tags: {
                        id: string;
                        name: string;
                        description: string;
                        displayName: string;
                        color: string;
                    }[];
                    author: {
                        id: string;
                        username: string;
                        email: string;
                        roleDisplayName: string;
                        roleName: string;
                    };
                    visibility: string;
                    projectId: string;
                    schema: ({
                        options: {
                            min?: number | undefined;
                            max?: number | undefined;
                            noDecimal?: boolean | undefined;
                        };
                        type: "NUMBER";
                        name: string;
                        label: string;
                        visibility: string;
                        placeholder?: string | undefined;
                        helperText?: string | undefined;
                        required?: boolean | undefined;
                    } | {
                        options: {
                            minLength?: number | undefined;
                            maxLength?: number | undefined;
                            pattern?: string | undefined;
                        };
                        type: "TEXT";
                        name: string;
                        label: string;
                        visibility: string;
                        placeholder?: string | undefined;
                        helperText?: string | undefined;
                        required?: boolean | undefined;
                    } | {
                        options: {
                            isMulti: boolean;
                            optionList: string[];
                            maxSelect: number | null;
                            minSelect: number | null;
                        };
                        type: "SELECT";
                        name: string;
                        label: string;
                        visibility: string;
                        placeholder?: string | undefined;
                        helperText?: string | undefined;
                        required?: boolean | undefined;
                    } | {
                        options: {
                            min?: string | undefined;
                            max?: string | undefined;
                        };
                        type: "DATETIME";
                        name: string;
                        label: string;
                        visibility: string;
                        placeholder?: string | undefined;
                        helperText?: string | undefined;
                        required?: boolean | undefined;
                    } | {
                        options: {
                            minLength?: number | undefined;
                            maxLength?: number | undefined;
                            disableImages?: boolean | undefined;
                        };
                        type: "RICHTEXT";
                        name: string;
                        label: string;
                        visibility: string;
                        placeholder?: string | undefined;
                        helperText?: string | undefined;
                        required?: boolean | undefined;
                    } | {
                        type: "SEPARATOR";
                        name: string;
                    })[];
                    state: string;
                    points: number;
                    commentsCount: number;
                    fields: {
                        type: string;
                        name: string;
                        value?: any;
                    }[];
                    lastChangeAt: Date;
                    project: {
                        id: string;
                        name: string;
                        slug: string;
                        displayName: string;
                    };
                    group: {
                        id: string;
                        name: string;
                        slug: string;
                        displayName: string;
                    };
                    operations: {
                        canBlock: boolean;
                        canDelete: boolean;
                        canUpdateState: boolean;
                        canEditFields: boolean;
                        canEditInternalFields: boolean;
                        canEditHiddenFields: boolean;
                        canUpdateConfidents: boolean;
                        canBlockComments: boolean;
                        canDeleteComments: boolean;
                        canUpdateTags: boolean;
                        canUpdateVisibility: boolean;
                    };
                    isUpvotedByMe: boolean;
                    isDownvotedByMe: boolean;
                    isSuspend?: boolean | undefined;
                }, z.ZodTypeDef, {
                    id: string;
                    authorId: string;
                    createdAt: Date;
                    title: string;
                    key: string;
                    tags: {
                        id: string;
                        name: string;
                        description: string;
                        displayName: string;
                        color: string;
                    }[];
                    author: {
                        id: string;
                        username: string;
                        email: string;
                        roleDisplayName: string;
                        roleName: string;
                    };
                    visibility: string;
                    projectId: string;
                    schema: ({
                        options: {
                            min?: number | undefined;
                            max?: number | undefined;
                            noDecimal?: boolean | undefined;
                        };
                        type: "NUMBER";
                        name: string;
                        label: string;
                        visibility: string;
                        placeholder?: string | undefined;
                        helperText?: string | undefined;
                        required?: boolean | undefined;
                    } | {
                        options: {
                            minLength?: number | undefined;
                            maxLength?: number | undefined;
                            pattern?: string | undefined;
                        };
                        type: "TEXT";
                        name: string;
                        label: string;
                        visibility: string;
                        placeholder?: string | undefined;
                        helperText?: string | undefined;
                        required?: boolean | undefined;
                    } | {
                        options: {
                            isMulti: boolean;
                            optionList: string[];
                            maxSelect: number | null;
                            minSelect: number | null;
                        };
                        type: "SELECT";
                        name: string;
                        label: string;
                        visibility: string;
                        placeholder?: string | undefined;
                        helperText?: string | undefined;
                        required?: boolean | undefined;
                    } | {
                        options: {
                            min?: string | undefined;
                            max?: string | undefined;
                        };
                        type: "DATETIME";
                        name: string;
                        label: string;
                        visibility: string;
                        placeholder?: string | undefined;
                        helperText?: string | undefined;
                        required?: boolean | undefined;
                    } | {
                        options: {
                            minLength?: number | undefined;
                            maxLength?: number | undefined;
                            disableImages?: boolean | undefined;
                        };
                        type: "RICHTEXT";
                        name: string;
                        label: string;
                        visibility: string;
                        placeholder?: string | undefined;
                        helperText?: string | undefined;
                        required?: boolean | undefined;
                    } | {
                        type: "SEPARATOR";
                        name: string;
                    })[];
                    state: string;
                    points: number;
                    commentsCount: number;
                    fields: {
                        type: string;
                        name: string;
                        value?: any;
                    }[];
                    lastChangeAt: Date;
                    project: {
                        id: string;
                        name: string;
                        slug: string;
                        displayName: string;
                    };
                    group: {
                        id: string;
                        name: string;
                        slug: string;
                        displayName: string;
                    };
                    isSuspend?: boolean | undefined;
                } | {
                    id: string;
                    authorId: string;
                    createdAt: Date;
                    title: string;
                    key: string;
                    tags: {
                        id: string;
                        name: string;
                        description: string;
                        displayName: string;
                        color: string;
                    }[];
                    author: {
                        id: string;
                        username: string;
                        email: string;
                        roleDisplayName: string;
                        roleName: string;
                    };
                    visibility: string;
                    projectId: string;
                    schema: ({
                        options: {
                            min?: number | undefined;
                            max?: number | undefined;
                            noDecimal?: boolean | undefined;
                        };
                        type: "NUMBER";
                        name: string;
                        label: string;
                        visibility: string;
                        placeholder?: string | undefined;
                        helperText?: string | undefined;
                        required?: boolean | undefined;
                    } | {
                        options: {
                            minLength?: number | undefined;
                            maxLength?: number | undefined;
                            pattern?: string | undefined;
                        };
                        type: "TEXT";
                        name: string;
                        label: string;
                        visibility: string;
                        placeholder?: string | undefined;
                        helperText?: string | undefined;
                        required?: boolean | undefined;
                    } | {
                        options: {
                            isMulti: boolean;
                            optionList: string[];
                            maxSelect: number | null;
                            minSelect: number | null;
                        };
                        type: "SELECT";
                        name: string;
                        label: string;
                        visibility: string;
                        placeholder?: string | undefined;
                        helperText?: string | undefined;
                        required?: boolean | undefined;
                    } | {
                        options: {
                            min?: string | undefined;
                            max?: string | undefined;
                        };
                        type: "DATETIME";
                        name: string;
                        label: string;
                        visibility: string;
                        placeholder?: string | undefined;
                        helperText?: string | undefined;
                        required?: boolean | undefined;
                    } | {
                        options: {
                            minLength?: number | undefined;
                            maxLength?: number | undefined;
                            disableImages?: boolean | undefined;
                        };
                        type: "RICHTEXT";
                        name: string;
                        label: string;
                        visibility: string;
                        placeholder?: string | undefined;
                        helperText?: string | undefined;
                        required?: boolean | undefined;
                    } | {
                        type: "SEPARATOR";
                        name: string;
                    })[];
                    state: string;
                    points: number;
                    commentsCount: number;
                    fields: {
                        type: string;
                        name: string;
                        value?: any;
                    }[];
                    lastChangeAt: Date;
                    project: {
                        id: string;
                        name: string;
                        slug: string;
                        displayName: string;
                    };
                    group: {
                        id: string;
                        name: string;
                        slug: string;
                        displayName: string;
                    };
                    operations: {
                        canBlock: boolean;
                        canDelete: boolean;
                        canUpdateState: boolean;
                        canEditFields: boolean;
                        canEditInternalFields: boolean;
                        canEditHiddenFields: boolean;
                        canUpdateConfidents: boolean;
                        canBlockComments: boolean;
                        canDeleteComments: boolean;
                        canUpdateTags: boolean;
                        canUpdateVisibility: boolean;
                    };
                    isUpvotedByMe: boolean;
                    isDownvotedByMe: boolean;
                    isSuspend?: boolean | undefined;
                } | {
                    id: string;
                    authorId: string;
                    createdAt: Date;
                    updatedAt: Date;
                    title: string;
                    key: string;
                    tags: {
                        id: string;
                        name: string;
                        description: string;
                        displayName: string;
                        color: string;
                    }[];
                    author: {
                        id: string;
                        username: string;
                        email: string;
                        roleDisplayName: string;
                        roleName: string;
                    };
                    visibility: string;
                    projectId: string;
                    schema: ({
                        options: {
                            min?: number | undefined;
                            max?: number | undefined;
                            noDecimal?: boolean | undefined;
                        };
                        type: "NUMBER";
                        name: string;
                        label: string;
                        visibility: string;
                        placeholder?: string | undefined;
                        helperText?: string | undefined;
                        required?: boolean | undefined;
                    } | {
                        options: {
                            minLength?: number | undefined;
                            maxLength?: number | undefined;
                            pattern?: string | undefined;
                        };
                        type: "TEXT";
                        name: string;
                        label: string;
                        visibility: string;
                        placeholder?: string | undefined;
                        helperText?: string | undefined;
                        required?: boolean | undefined;
                    } | {
                        options: {
                            isMulti: boolean;
                            optionList: string[];
                            maxSelect: number | null;
                            minSelect: number | null;
                        };
                        type: "SELECT";
                        name: string;
                        label: string;
                        visibility: string;
                        placeholder?: string | undefined;
                        helperText?: string | undefined;
                        required?: boolean | undefined;
                    } | {
                        options: {
                            min?: string | undefined;
                            max?: string | undefined;
                        };
                        type: "DATETIME";
                        name: string;
                        label: string;
                        visibility: string;
                        placeholder?: string | undefined;
                        helperText?: string | undefined;
                        required?: boolean | undefined;
                    } | {
                        options: {
                            minLength?: number | undefined;
                            maxLength?: number | undefined;
                            disableImages?: boolean | undefined;
                        };
                        type: "RICHTEXT";
                        name: string;
                        label: string;
                        visibility: string;
                        placeholder?: string | undefined;
                        helperText?: string | undefined;
                        required?: boolean | undefined;
                    } | {
                        type: "SEPARATOR";
                        name: string;
                    })[];
                    state: string;
                    points: number;
                    commentsCount: number;
                    fields: {
                        type: string;
                        name: string;
                        value?: any;
                    }[];
                    lastChangeAt: Date;
                    project: {
                        id: string;
                        name: string;
                        slug: string;
                        displayName: string;
                    };
                    group: {
                        id: string;
                        name: string;
                        slug: string;
                        displayName: string;
                    };
                    operations: {
                        canBlock: boolean;
                        canDelete: boolean;
                        canUpdateState: boolean;
                        canEditFields: boolean;
                        canEditInternalFields: boolean;
                        canEditHiddenFields: boolean;
                        canUpdateConfidents: boolean;
                        canBlockComments: boolean;
                        canDeleteComments: boolean;
                        canUpdateTags: boolean;
                        canUpdateVisibility: boolean;
                    };
                    isUpvotedByMe: boolean;
                    isDownvotedByMe: boolean;
                    isSuspend?: boolean | undefined;
                }> | z.ZodObject<{}, "strip", z.ZodTypeAny, {}, {}>;
            }, "strip", z.ZodTypeAny, {
                data: {
                    id: string;
                    authorId: string;
                    createdAt: Date;
                    title: string;
                    key: string;
                    tags: {
                        id: string;
                        name: string;
                        description: string;
                        displayName: string;
                        color: string;
                    }[];
                    author: {
                        id: string;
                        username: string;
                        email: string;
                        roleDisplayName: string;
                        roleName: string;
                    };
                    visibility: string;
                    projectId: string;
                    schema: ({
                        options: {
                            min?: number | undefined;
                            max?: number | undefined;
                            noDecimal?: boolean | undefined;
                        };
                        type: "NUMBER";
                        name: string;
                        label: string;
                        visibility: string;
                        placeholder?: string | undefined;
                        helperText?: string | undefined;
                        required?: boolean | undefined;
                    } | {
                        options: {
                            minLength?: number | undefined;
                            maxLength?: number | undefined;
                            pattern?: string | undefined;
                        };
                        type: "TEXT";
                        name: string;
                        label: string;
                        visibility: string;
                        placeholder?: string | undefined;
                        helperText?: string | undefined;
                        required?: boolean | undefined;
                    } | {
                        options: {
                            isMulti: boolean;
                            optionList: string[];
                            maxSelect: number | null;
                            minSelect: number | null;
                        };
                        type: "SELECT";
                        name: string;
                        label: string;
                        visibility: string;
                        placeholder?: string | undefined;
                        helperText?: string | undefined;
                        required?: boolean | undefined;
                    } | {
                        options: {
                            min?: string | undefined;
                            max?: string | undefined;
                        };
                        type: "DATETIME";
                        name: string;
                        label: string;
                        visibility: string;
                        placeholder?: string | undefined;
                        helperText?: string | undefined;
                        required?: boolean | undefined;
                    } | {
                        options: {
                            minLength?: number | undefined;
                            maxLength?: number | undefined;
                            disableImages?: boolean | undefined;
                        };
                        type: "RICHTEXT";
                        name: string;
                        label: string;
                        visibility: string;
                        placeholder?: string | undefined;
                        helperText?: string | undefined;
                        required?: boolean | undefined;
                    } | {
                        type: "SEPARATOR";
                        name: string;
                    })[];
                    state: string;
                    points: number;
                    commentsCount: number;
                    fields: {
                        type: string;
                        name: string;
                        value?: any;
                    }[];
                    lastChangeAt: Date;
                    project: {
                        id: string;
                        name: string;
                        slug: string;
                        displayName: string;
                    };
                    group: {
                        id: string;
                        name: string;
                        slug: string;
                        displayName: string;
                    };
                    isSuspend?: boolean | undefined;
                } | {
                    id: string;
                    authorId: string;
                    createdAt: Date;
                    title: string;
                    key: string;
                    tags: {
                        id: string;
                        name: string;
                        description: string;
                        displayName: string;
                        color: string;
                    }[];
                    author: {
                        id: string;
                        username: string;
                        email: string;
                        roleDisplayName: string;
                        roleName: string;
                    };
                    visibility: string;
                    projectId: string;
                    schema: ({
                        options: {
                            min?: number | undefined;
                            max?: number | undefined;
                            noDecimal?: boolean | undefined;
                        };
                        type: "NUMBER";
                        name: string;
                        label: string;
                        visibility: string;
                        placeholder?: string | undefined;
                        helperText?: string | undefined;
                        required?: boolean | undefined;
                    } | {
                        options: {
                            minLength?: number | undefined;
                            maxLength?: number | undefined;
                            pattern?: string | undefined;
                        };
                        type: "TEXT";
                        name: string;
                        label: string;
                        visibility: string;
                        placeholder?: string | undefined;
                        helperText?: string | undefined;
                        required?: boolean | undefined;
                    } | {
                        options: {
                            isMulti: boolean;
                            optionList: string[];
                            maxSelect: number | null;
                            minSelect: number | null;
                        };
                        type: "SELECT";
                        name: string;
                        label: string;
                        visibility: string;
                        placeholder?: string | undefined;
                        helperText?: string | undefined;
                        required?: boolean | undefined;
                    } | {
                        options: {
                            min?: string | undefined;
                            max?: string | undefined;
                        };
                        type: "DATETIME";
                        name: string;
                        label: string;
                        visibility: string;
                        placeholder?: string | undefined;
                        helperText?: string | undefined;
                        required?: boolean | undefined;
                    } | {
                        options: {
                            minLength?: number | undefined;
                            maxLength?: number | undefined;
                            disableImages?: boolean | undefined;
                        };
                        type: "RICHTEXT";
                        name: string;
                        label: string;
                        visibility: string;
                        placeholder?: string | undefined;
                        helperText?: string | undefined;
                        required?: boolean | undefined;
                    } | {
                        type: "SEPARATOR";
                        name: string;
                    })[];
                    state: string;
                    points: number;
                    commentsCount: number;
                    fields: {
                        type: string;
                        name: string;
                        value?: any;
                    }[];
                    lastChangeAt: Date;
                    project: {
                        id: string;
                        name: string;
                        slug: string;
                        displayName: string;
                    };
                    group: {
                        id: string;
                        name: string;
                        slug: string;
                        displayName: string;
                    };
                    operations: {
                        canBlock: boolean;
                        canDelete: boolean;
                        canUpdateState: boolean;
                        canEditFields: boolean;
                        canEditInternalFields: boolean;
                        canEditHiddenFields: boolean;
                        canUpdateConfidents: boolean;
                        canBlockComments: boolean;
                        canDeleteComments: boolean;
                        canUpdateTags: boolean;
                        canUpdateVisibility: boolean;
                    };
                    isUpvotedByMe: boolean;
                    isDownvotedByMe: boolean;
                    isSuspend?: boolean | undefined;
                } | {
                    id: string;
                    authorId: string;
                    createdAt: Date;
                    updatedAt: Date;
                    title: string;
                    key: string;
                    tags: {
                        id: string;
                        name: string;
                        description: string;
                        displayName: string;
                        color: string;
                    }[];
                    author: {
                        id: string;
                        username: string;
                        email: string;
                        roleDisplayName: string;
                        roleName: string;
                    };
                    visibility: string;
                    projectId: string;
                    schema: ({
                        options: {
                            min?: number | undefined;
                            max?: number | undefined;
                            noDecimal?: boolean | undefined;
                        };
                        type: "NUMBER";
                        name: string;
                        label: string;
                        visibility: string;
                        placeholder?: string | undefined;
                        helperText?: string | undefined;
                        required?: boolean | undefined;
                    } | {
                        options: {
                            minLength?: number | undefined;
                            maxLength?: number | undefined;
                            pattern?: string | undefined;
                        };
                        type: "TEXT";
                        name: string;
                        label: string;
                        visibility: string;
                        placeholder?: string | undefined;
                        helperText?: string | undefined;
                        required?: boolean | undefined;
                    } | {
                        options: {
                            isMulti: boolean;
                            optionList: string[];
                            maxSelect: number | null;
                            minSelect: number | null;
                        };
                        type: "SELECT";
                        name: string;
                        label: string;
                        visibility: string;
                        placeholder?: string | undefined;
                        helperText?: string | undefined;
                        required?: boolean | undefined;
                    } | {
                        options: {
                            min?: string | undefined;
                            max?: string | undefined;
                        };
                        type: "DATETIME";
                        name: string;
                        label: string;
                        visibility: string;
                        placeholder?: string | undefined;
                        helperText?: string | undefined;
                        required?: boolean | undefined;
                    } | {
                        options: {
                            minLength?: number | undefined;
                            maxLength?: number | undefined;
                            disableImages?: boolean | undefined;
                        };
                        type: "RICHTEXT";
                        name: string;
                        label: string;
                        visibility: string;
                        placeholder?: string | undefined;
                        helperText?: string | undefined;
                        required?: boolean | undefined;
                    } | {
                        type: "SEPARATOR";
                        name: string;
                    })[];
                    state: string;
                    points: number;
                    commentsCount: number;
                    fields: {
                        type: string;
                        name: string;
                        value?: any;
                    }[];
                    lastChangeAt: Date;
                    project: {
                        id: string;
                        name: string;
                        slug: string;
                        displayName: string;
                    };
                    group: {
                        id: string;
                        name: string;
                        slug: string;
                        displayName: string;
                    };
                    operations: {
                        canBlock: boolean;
                        canDelete: boolean;
                        canUpdateState: boolean;
                        canEditFields: boolean;
                        canEditInternalFields: boolean;
                        canEditHiddenFields: boolean;
                        canUpdateConfidents: boolean;
                        canBlockComments: boolean;
                        canDeleteComments: boolean;
                        canUpdateTags: boolean;
                        canUpdateVisibility: boolean;
                    };
                    isUpvotedByMe: boolean;
                    isDownvotedByMe: boolean;
                    isSuspend?: boolean | undefined;
                } | {};
            }, {
                data: {
                    id: string;
                    authorId: string;
                    createdAt: Date;
                    title: string;
                    key: string;
                    tags: {
                        id: string;
                        name: string;
                        description: string;
                        displayName: string;
                        color: string;
                    }[];
                    author: {
                        id: string;
                        username: string;
                        email: string;
                        roleDisplayName: string;
                        roleName: string;
                    };
                    visibility: string;
                    projectId: string;
                    schema: ({
                        options: {
                            min?: number | undefined;
                            max?: number | undefined;
                            noDecimal?: boolean | undefined;
                        };
                        type: "NUMBER";
                        name: string;
                        label: string;
                        visibility: string;
                        placeholder?: string | undefined;
                        helperText?: string | undefined;
                        required?: boolean | undefined;
                    } | {
                        options: {
                            minLength?: number | undefined;
                            maxLength?: number | undefined;
                            pattern?: string | undefined;
                        };
                        type: "TEXT";
                        name: string;
                        label: string;
                        visibility: string;
                        placeholder?: string | undefined;
                        helperText?: string | undefined;
                        required?: boolean | undefined;
                    } | {
                        options: {
                            isMulti: boolean;
                            optionList: string[];
                            maxSelect: number | null;
                            minSelect: number | null;
                        };
                        type: "SELECT";
                        name: string;
                        label: string;
                        visibility: string;
                        placeholder?: string | undefined;
                        helperText?: string | undefined;
                        required?: boolean | undefined;
                    } | {
                        options: {
                            min?: string | undefined;
                            max?: string | undefined;
                        };
                        type: "DATETIME";
                        name: string;
                        label: string;
                        visibility: string;
                        placeholder?: string | undefined;
                        helperText?: string | undefined;
                        required?: boolean | undefined;
                    } | {
                        options: {
                            minLength?: number | undefined;
                            maxLength?: number | undefined;
                            disableImages?: boolean | undefined;
                        };
                        type: "RICHTEXT";
                        name: string;
                        label: string;
                        visibility: string;
                        placeholder?: string | undefined;
                        helperText?: string | undefined;
                        required?: boolean | undefined;
                    } | {
                        type: "SEPARATOR";
                        name: string;
                    })[];
                    state: string;
                    points: number;
                    commentsCount: number;
                    fields: {
                        type: string;
                        name: string;
                        value?: any;
                    }[];
                    lastChangeAt: Date;
                    project: {
                        id: string;
                        name: string;
                        slug: string;
                        displayName: string;
                    };
                    group: {
                        id: string;
                        name: string;
                        slug: string;
                        displayName: string;
                    };
                    isSuspend?: boolean | undefined;
                } | {
                    id: string;
                    authorId: string;
                    createdAt: Date;
                    title: string;
                    key: string;
                    tags: {
                        id: string;
                        name: string;
                        description: string;
                        displayName: string;
                        color: string;
                    }[];
                    author: {
                        id: string;
                        username: string;
                        email: string;
                        roleDisplayName: string;
                        roleName: string;
                    };
                    visibility: string;
                    projectId: string;
                    schema: ({
                        options: {
                            min?: number | undefined;
                            max?: number | undefined;
                            noDecimal?: boolean | undefined;
                        };
                        type: "NUMBER";
                        name: string;
                        label: string;
                        visibility: string;
                        placeholder?: string | undefined;
                        helperText?: string | undefined;
                        required?: boolean | undefined;
                    } | {
                        options: {
                            minLength?: number | undefined;
                            maxLength?: number | undefined;
                            pattern?: string | undefined;
                        };
                        type: "TEXT";
                        name: string;
                        label: string;
                        visibility: string;
                        placeholder?: string | undefined;
                        helperText?: string | undefined;
                        required?: boolean | undefined;
                    } | {
                        options: {
                            isMulti: boolean;
                            optionList: string[];
                            maxSelect: number | null;
                            minSelect: number | null;
                        };
                        type: "SELECT";
                        name: string;
                        label: string;
                        visibility: string;
                        placeholder?: string | undefined;
                        helperText?: string | undefined;
                        required?: boolean | undefined;
                    } | {
                        options: {
                            min?: string | undefined;
                            max?: string | undefined;
                        };
                        type: "DATETIME";
                        name: string;
                        label: string;
                        visibility: string;
                        placeholder?: string | undefined;
                        helperText?: string | undefined;
                        required?: boolean | undefined;
                    } | {
                        options: {
                            minLength?: number | undefined;
                            maxLength?: number | undefined;
                            disableImages?: boolean | undefined;
                        };
                        type: "RICHTEXT";
                        name: string;
                        label: string;
                        visibility: string;
                        placeholder?: string | undefined;
                        helperText?: string | undefined;
                        required?: boolean | undefined;
                    } | {
                        type: "SEPARATOR";
                        name: string;
                    })[];
                    state: string;
                    points: number;
                    commentsCount: number;
                    fields: {
                        type: string;
                        name: string;
                        value?: any;
                    }[];
                    lastChangeAt: Date;
                    project: {
                        id: string;
                        name: string;
                        slug: string;
                        displayName: string;
                    };
                    group: {
                        id: string;
                        name: string;
                        slug: string;
                        displayName: string;
                    };
                    operations: {
                        canBlock: boolean;
                        canDelete: boolean;
                        canUpdateState: boolean;
                        canEditFields: boolean;
                        canEditInternalFields: boolean;
                        canEditHiddenFields: boolean;
                        canUpdateConfidents: boolean;
                        canBlockComments: boolean;
                        canDeleteComments: boolean;
                        canUpdateTags: boolean;
                        canUpdateVisibility: boolean;
                    };
                    isUpvotedByMe: boolean;
                    isDownvotedByMe: boolean;
                    isSuspend?: boolean | undefined;
                } | {
                    id: string;
                    authorId: string;
                    createdAt: Date;
                    updatedAt: Date;
                    title: string;
                    key: string;
                    tags: {
                        id: string;
                        name: string;
                        description: string;
                        displayName: string;
                        color: string;
                    }[];
                    author: {
                        id: string;
                        username: string;
                        email: string;
                        roleDisplayName: string;
                        roleName: string;
                    };
                    visibility: string;
                    projectId: string;
                    schema: ({
                        options: {
                            min?: number | undefined;
                            max?: number | undefined;
                            noDecimal?: boolean | undefined;
                        };
                        type: "NUMBER";
                        name: string;
                        label: string;
                        visibility: string;
                        placeholder?: string | undefined;
                        helperText?: string | undefined;
                        required?: boolean | undefined;
                    } | {
                        options: {
                            minLength?: number | undefined;
                            maxLength?: number | undefined;
                            pattern?: string | undefined;
                        };
                        type: "TEXT";
                        name: string;
                        label: string;
                        visibility: string;
                        placeholder?: string | undefined;
                        helperText?: string | undefined;
                        required?: boolean | undefined;
                    } | {
                        options: {
                            isMulti: boolean;
                            optionList: string[];
                            maxSelect: number | null;
                            minSelect: number | null;
                        };
                        type: "SELECT";
                        name: string;
                        label: string;
                        visibility: string;
                        placeholder?: string | undefined;
                        helperText?: string | undefined;
                        required?: boolean | undefined;
                    } | {
                        options: {
                            min?: string | undefined;
                            max?: string | undefined;
                        };
                        type: "DATETIME";
                        name: string;
                        label: string;
                        visibility: string;
                        placeholder?: string | undefined;
                        helperText?: string | undefined;
                        required?: boolean | undefined;
                    } | {
                        options: {
                            minLength?: number | undefined;
                            maxLength?: number | undefined;
                            disableImages?: boolean | undefined;
                        };
                        type: "RICHTEXT";
                        name: string;
                        label: string;
                        visibility: string;
                        placeholder?: string | undefined;
                        helperText?: string | undefined;
                        required?: boolean | undefined;
                    } | {
                        type: "SEPARATOR";
                        name: string;
                    })[];
                    state: string;
                    points: number;
                    commentsCount: number;
                    fields: {
                        type: string;
                        name: string;
                        value?: any;
                    }[];
                    lastChangeAt: Date;
                    project: {
                        id: string;
                        name: string;
                        slug: string;
                        displayName: string;
                    };
                    group: {
                        id: string;
                        name: string;
                        slug: string;
                        displayName: string;
                    };
                    operations: {
                        canBlock: boolean;
                        canDelete: boolean;
                        canUpdateState: boolean;
                        canEditFields: boolean;
                        canEditInternalFields: boolean;
                        canEditHiddenFields: boolean;
                        canUpdateConfidents: boolean;
                        canBlockComments: boolean;
                        canDeleteComments: boolean;
                        canUpdateTags: boolean;
                        canUpdateVisibility: boolean;
                    };
                    isUpvotedByMe: boolean;
                    isDownvotedByMe: boolean;
                    isSuspend?: boolean | undefined;
                } | {};
            }>;
            404: z.ZodObject<{
                title: z.ZodString;
                status: z.ZodNumber;
                detail: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                status: number;
                title: string;
                detail?: string | undefined;
            }, {
                status: number;
                title: string;
                detail?: string | undefined;
            }>;
            409: z.ZodObject<{
                title: z.ZodString;
                status: z.ZodNumber;
                detail: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                status: number;
                title: string;
                detail?: string | undefined;
            }, {
                status: number;
                title: string;
                detail?: string | undefined;
            }>;
            500: z.ZodObject<{
                title: z.ZodString;
                status: z.ZodNumber;
                detail: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                status: number;
                title: string;
                detail?: string | undefined;
            }, {
                status: number;
                title: string;
                detail?: string | undefined;
            }>;
        };
    };
    getIssues: {
        metadata: {
            readonly isPublic: true;
            readonly permissions: {};
        };
        query: z.ZodObject<{
            page: z.ZodOptional<z.ZodString>;
            limit: z.ZodOptional<z.ZodString>;
            search: z.ZodOptional<z.ZodString>;
            projects: z.ZodOptional<z.ZodString>;
            states: z.ZodOptional<z.ZodString>;
            authors: z.ZodOptional<z.ZodString>;
            sort: z.ZodOptional<z.ZodEnum<["recent", "newest", "votes"]>>;
        }, "strip", z.ZodTypeAny, {
            sort?: "recent" | "newest" | "votes" | undefined;
            search?: string | undefined;
            limit?: string | undefined;
            page?: string | undefined;
            projects?: string | undefined;
            states?: string | undefined;
            authors?: string | undefined;
        }, {
            sort?: "recent" | "newest" | "votes" | undefined;
            search?: string | undefined;
            limit?: string | undefined;
            page?: string | undefined;
            projects?: string | undefined;
            states?: string | undefined;
            authors?: string | undefined;
        }>;
        summary: "Get issues";
        method: "GET";
        path: "/api/issues";
        headers: z.ZodOptional<z.ZodObject<{
            authorization: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            authorization: string;
        }, {
            authorization: string;
        }>>;
        responses: {
            200: z.ZodObject<{
                data: z.ZodType<{
                    data: ({
                        id: string;
                        authorId: string;
                        createdAt: Date;
                        title: string;
                        key: string;
                        tags: {
                            id: string;
                            name: string;
                            description: string;
                            displayName: string;
                            color: string;
                        }[];
                        author: {
                            id: string;
                            username: string;
                            email: string;
                            roleDisplayName: string;
                            roleName: string;
                        };
                        visibility: string;
                        projectId: string;
                        schema: ({
                            options: {
                                min?: number | undefined;
                                max?: number | undefined;
                                noDecimal?: boolean | undefined;
                            };
                            type: "NUMBER";
                            name: string;
                            label: string;
                            visibility: string;
                            placeholder?: string | undefined;
                            helperText?: string | undefined;
                            required?: boolean | undefined;
                        } | {
                            options: {
                                minLength?: number | undefined;
                                maxLength?: number | undefined;
                                pattern?: string | undefined;
                            };
                            type: "TEXT";
                            name: string;
                            label: string;
                            visibility: string;
                            placeholder?: string | undefined;
                            helperText?: string | undefined;
                            required?: boolean | undefined;
                        } | {
                            options: {
                                isMulti: boolean;
                                optionList: string[];
                                maxSelect: number | null;
                                minSelect: number | null;
                            };
                            type: "SELECT";
                            name: string;
                            label: string;
                            visibility: string;
                            placeholder?: string | undefined;
                            helperText?: string | undefined;
                            required?: boolean | undefined;
                        } | {
                            options: {
                                min?: string | undefined;
                                max?: string | undefined;
                            };
                            type: "DATETIME";
                            name: string;
                            label: string;
                            visibility: string;
                            placeholder?: string | undefined;
                            helperText?: string | undefined;
                            required?: boolean | undefined;
                        } | {
                            options: {
                                minLength?: number | undefined;
                                maxLength?: number | undefined;
                                disableImages?: boolean | undefined;
                            };
                            type: "RICHTEXT";
                            name: string;
                            label: string;
                            visibility: string;
                            placeholder?: string | undefined;
                            helperText?: string | undefined;
                            required?: boolean | undefined;
                        } | {
                            type: "SEPARATOR";
                            name: string;
                        })[];
                        state: string;
                        points: number;
                        commentsCount: number;
                        lastChangeAt: Date;
                        project: {
                            id: string;
                            name: string;
                            slug: string;
                            displayName: string;
                        };
                        group: {
                            id: string;
                            name: string;
                            slug: string;
                            displayName: string;
                        };
                        isSuspend?: boolean | undefined;
                    } | {
                        id: string;
                        authorId: string;
                        createdAt: Date;
                        updatedAt: Date;
                        title: string;
                        key: string;
                        tags: {
                            id: string;
                            name: string;
                            description: string;
                            displayName: string;
                            color: string;
                        }[];
                        author: {
                            id: string;
                            username: string;
                            email: string;
                            roleDisplayName: string;
                            roleName: string;
                        };
                        visibility: string;
                        projectId: string;
                        schema: ({
                            options: {
                                min?: number | undefined;
                                max?: number | undefined;
                                noDecimal?: boolean | undefined;
                            };
                            type: "NUMBER";
                            name: string;
                            label: string;
                            visibility: string;
                            placeholder?: string | undefined;
                            helperText?: string | undefined;
                            required?: boolean | undefined;
                        } | {
                            options: {
                                minLength?: number | undefined;
                                maxLength?: number | undefined;
                                pattern?: string | undefined;
                            };
                            type: "TEXT";
                            name: string;
                            label: string;
                            visibility: string;
                            placeholder?: string | undefined;
                            helperText?: string | undefined;
                            required?: boolean | undefined;
                        } | {
                            options: {
                                isMulti: boolean;
                                optionList: string[];
                                maxSelect: number | null;
                                minSelect: number | null;
                            };
                            type: "SELECT";
                            name: string;
                            label: string;
                            visibility: string;
                            placeholder?: string | undefined;
                            helperText?: string | undefined;
                            required?: boolean | undefined;
                        } | {
                            options: {
                                min?: string | undefined;
                                max?: string | undefined;
                            };
                            type: "DATETIME";
                            name: string;
                            label: string;
                            visibility: string;
                            placeholder?: string | undefined;
                            helperText?: string | undefined;
                            required?: boolean | undefined;
                        } | {
                            options: {
                                minLength?: number | undefined;
                                maxLength?: number | undefined;
                                disableImages?: boolean | undefined;
                            };
                            type: "RICHTEXT";
                            name: string;
                            label: string;
                            visibility: string;
                            placeholder?: string | undefined;
                            helperText?: string | undefined;
                            required?: boolean | undefined;
                        } | {
                            type: "SEPARATOR";
                            name: string;
                        })[];
                        state: string;
                        points: number;
                        commentsCount: number;
                        lastChangeAt: Date;
                        project: {
                            id: string;
                            name: string;
                            slug: string;
                            displayName: string;
                        };
                        group: {
                            id: string;
                            name: string;
                            slug: string;
                            displayName: string;
                        };
                        isSuspend?: boolean | undefined;
                    })[];
                    count: number;
                }, z.ZodTypeDef, {
                    data: ({
                        id: string;
                        authorId: string;
                        createdAt: Date;
                        title: string;
                        key: string;
                        tags: {
                            id: string;
                            name: string;
                            description: string;
                            displayName: string;
                            color: string;
                        }[];
                        author: {
                            id: string;
                            username: string;
                            email: string;
                            roleDisplayName: string;
                            roleName: string;
                        };
                        visibility: string;
                        projectId: string;
                        schema: ({
                            options: {
                                min?: number | undefined;
                                max?: number | undefined;
                                noDecimal?: boolean | undefined;
                            };
                            type: "NUMBER";
                            name: string;
                            label: string;
                            visibility: string;
                            placeholder?: string | undefined;
                            helperText?: string | undefined;
                            required?: boolean | undefined;
                        } | {
                            options: {
                                minLength?: number | undefined;
                                maxLength?: number | undefined;
                                pattern?: string | undefined;
                            };
                            type: "TEXT";
                            name: string;
                            label: string;
                            visibility: string;
                            placeholder?: string | undefined;
                            helperText?: string | undefined;
                            required?: boolean | undefined;
                        } | {
                            options: {
                                isMulti: boolean;
                                optionList: string[];
                                maxSelect: number | null;
                                minSelect: number | null;
                            };
                            type: "SELECT";
                            name: string;
                            label: string;
                            visibility: string;
                            placeholder?: string | undefined;
                            helperText?: string | undefined;
                            required?: boolean | undefined;
                        } | {
                            options: {
                                min?: string | undefined;
                                max?: string | undefined;
                            };
                            type: "DATETIME";
                            name: string;
                            label: string;
                            visibility: string;
                            placeholder?: string | undefined;
                            helperText?: string | undefined;
                            required?: boolean | undefined;
                        } | {
                            options: {
                                minLength?: number | undefined;
                                maxLength?: number | undefined;
                                disableImages?: boolean | undefined;
                            };
                            type: "RICHTEXT";
                            name: string;
                            label: string;
                            visibility: string;
                            placeholder?: string | undefined;
                            helperText?: string | undefined;
                            required?: boolean | undefined;
                        } | {
                            type: "SEPARATOR";
                            name: string;
                        })[];
                        state: string;
                        points: number;
                        commentsCount: number;
                        lastChangeAt: Date;
                        project: {
                            id: string;
                            name: string;
                            slug: string;
                            displayName: string;
                        };
                        group: {
                            id: string;
                            name: string;
                            slug: string;
                            displayName: string;
                        };
                        isSuspend?: boolean | undefined;
                    } | {
                        id: string;
                        authorId: string;
                        createdAt: Date;
                        updatedAt: Date;
                        title: string;
                        key: string;
                        tags: {
                            id: string;
                            name: string;
                            description: string;
                            displayName: string;
                            color: string;
                        }[];
                        author: {
                            id: string;
                            username: string;
                            email: string;
                            roleDisplayName: string;
                            roleName: string;
                        };
                        visibility: string;
                        projectId: string;
                        schema: ({
                            options: {
                                min?: number | undefined;
                                max?: number | undefined;
                                noDecimal?: boolean | undefined;
                            };
                            type: "NUMBER";
                            name: string;
                            label: string;
                            visibility: string;
                            placeholder?: string | undefined;
                            helperText?: string | undefined;
                            required?: boolean | undefined;
                        } | {
                            options: {
                                minLength?: number | undefined;
                                maxLength?: number | undefined;
                                pattern?: string | undefined;
                            };
                            type: "TEXT";
                            name: string;
                            label: string;
                            visibility: string;
                            placeholder?: string | undefined;
                            helperText?: string | undefined;
                            required?: boolean | undefined;
                        } | {
                            options: {
                                isMulti: boolean;
                                optionList: string[];
                                maxSelect: number | null;
                                minSelect: number | null;
                            };
                            type: "SELECT";
                            name: string;
                            label: string;
                            visibility: string;
                            placeholder?: string | undefined;
                            helperText?: string | undefined;
                            required?: boolean | undefined;
                        } | {
                            options: {
                                min?: string | undefined;
                                max?: string | undefined;
                            };
                            type: "DATETIME";
                            name: string;
                            label: string;
                            visibility: string;
                            placeholder?: string | undefined;
                            helperText?: string | undefined;
                            required?: boolean | undefined;
                        } | {
                            options: {
                                minLength?: number | undefined;
                                maxLength?: number | undefined;
                                disableImages?: boolean | undefined;
                            };
                            type: "RICHTEXT";
                            name: string;
                            label: string;
                            visibility: string;
                            placeholder?: string | undefined;
                            helperText?: string | undefined;
                            required?: boolean | undefined;
                        } | {
                            type: "SEPARATOR";
                            name: string;
                        })[];
                        state: string;
                        points: number;
                        commentsCount: number;
                        lastChangeAt: Date;
                        project: {
                            id: string;
                            name: string;
                            slug: string;
                            displayName: string;
                        };
                        group: {
                            id: string;
                            name: string;
                            slug: string;
                            displayName: string;
                        };
                        isSuspend?: boolean | undefined;
                    })[];
                    count: number;
                }> | z.ZodObject<{}, "strip", z.ZodTypeAny, {}, {}>;
            }, "strip", z.ZodTypeAny, {
                data: {
                    data: ({
                        id: string;
                        authorId: string;
                        createdAt: Date;
                        title: string;
                        key: string;
                        tags: {
                            id: string;
                            name: string;
                            description: string;
                            displayName: string;
                            color: string;
                        }[];
                        author: {
                            id: string;
                            username: string;
                            email: string;
                            roleDisplayName: string;
                            roleName: string;
                        };
                        visibility: string;
                        projectId: string;
                        schema: ({
                            options: {
                                min?: number | undefined;
                                max?: number | undefined;
                                noDecimal?: boolean | undefined;
                            };
                            type: "NUMBER";
                            name: string;
                            label: string;
                            visibility: string;
                            placeholder?: string | undefined;
                            helperText?: string | undefined;
                            required?: boolean | undefined;
                        } | {
                            options: {
                                minLength?: number | undefined;
                                maxLength?: number | undefined;
                                pattern?: string | undefined;
                            };
                            type: "TEXT";
                            name: string;
                            label: string;
                            visibility: string;
                            placeholder?: string | undefined;
                            helperText?: string | undefined;
                            required?: boolean | undefined;
                        } | {
                            options: {
                                isMulti: boolean;
                                optionList: string[];
                                maxSelect: number | null;
                                minSelect: number | null;
                            };
                            type: "SELECT";
                            name: string;
                            label: string;
                            visibility: string;
                            placeholder?: string | undefined;
                            helperText?: string | undefined;
                            required?: boolean | undefined;
                        } | {
                            options: {
                                min?: string | undefined;
                                max?: string | undefined;
                            };
                            type: "DATETIME";
                            name: string;
                            label: string;
                            visibility: string;
                            placeholder?: string | undefined;
                            helperText?: string | undefined;
                            required?: boolean | undefined;
                        } | {
                            options: {
                                minLength?: number | undefined;
                                maxLength?: number | undefined;
                                disableImages?: boolean | undefined;
                            };
                            type: "RICHTEXT";
                            name: string;
                            label: string;
                            visibility: string;
                            placeholder?: string | undefined;
                            helperText?: string | undefined;
                            required?: boolean | undefined;
                        } | {
                            type: "SEPARATOR";
                            name: string;
                        })[];
                        state: string;
                        points: number;
                        commentsCount: number;
                        lastChangeAt: Date;
                        project: {
                            id: string;
                            name: string;
                            slug: string;
                            displayName: string;
                        };
                        group: {
                            id: string;
                            name: string;
                            slug: string;
                            displayName: string;
                        };
                        isSuspend?: boolean | undefined;
                    } | {
                        id: string;
                        authorId: string;
                        createdAt: Date;
                        updatedAt: Date;
                        title: string;
                        key: string;
                        tags: {
                            id: string;
                            name: string;
                            description: string;
                            displayName: string;
                            color: string;
                        }[];
                        author: {
                            id: string;
                            username: string;
                            email: string;
                            roleDisplayName: string;
                            roleName: string;
                        };
                        visibility: string;
                        projectId: string;
                        schema: ({
                            options: {
                                min?: number | undefined;
                                max?: number | undefined;
                                noDecimal?: boolean | undefined;
                            };
                            type: "NUMBER";
                            name: string;
                            label: string;
                            visibility: string;
                            placeholder?: string | undefined;
                            helperText?: string | undefined;
                            required?: boolean | undefined;
                        } | {
                            options: {
                                minLength?: number | undefined;
                                maxLength?: number | undefined;
                                pattern?: string | undefined;
                            };
                            type: "TEXT";
                            name: string;
                            label: string;
                            visibility: string;
                            placeholder?: string | undefined;
                            helperText?: string | undefined;
                            required?: boolean | undefined;
                        } | {
                            options: {
                                isMulti: boolean;
                                optionList: string[];
                                maxSelect: number | null;
                                minSelect: number | null;
                            };
                            type: "SELECT";
                            name: string;
                            label: string;
                            visibility: string;
                            placeholder?: string | undefined;
                            helperText?: string | undefined;
                            required?: boolean | undefined;
                        } | {
                            options: {
                                min?: string | undefined;
                                max?: string | undefined;
                            };
                            type: "DATETIME";
                            name: string;
                            label: string;
                            visibility: string;
                            placeholder?: string | undefined;
                            helperText?: string | undefined;
                            required?: boolean | undefined;
                        } | {
                            options: {
                                minLength?: number | undefined;
                                maxLength?: number | undefined;
                                disableImages?: boolean | undefined;
                            };
                            type: "RICHTEXT";
                            name: string;
                            label: string;
                            visibility: string;
                            placeholder?: string | undefined;
                            helperText?: string | undefined;
                            required?: boolean | undefined;
                        } | {
                            type: "SEPARATOR";
                            name: string;
                        })[];
                        state: string;
                        points: number;
                        commentsCount: number;
                        lastChangeAt: Date;
                        project: {
                            id: string;
                            name: string;
                            slug: string;
                            displayName: string;
                        };
                        group: {
                            id: string;
                            name: string;
                            slug: string;
                            displayName: string;
                        };
                        isSuspend?: boolean | undefined;
                    })[];
                    count: number;
                } | {};
            }, {
                data: {
                    data: ({
                        id: string;
                        authorId: string;
                        createdAt: Date;
                        title: string;
                        key: string;
                        tags: {
                            id: string;
                            name: string;
                            description: string;
                            displayName: string;
                            color: string;
                        }[];
                        author: {
                            id: string;
                            username: string;
                            email: string;
                            roleDisplayName: string;
                            roleName: string;
                        };
                        visibility: string;
                        projectId: string;
                        schema: ({
                            options: {
                                min?: number | undefined;
                                max?: number | undefined;
                                noDecimal?: boolean | undefined;
                            };
                            type: "NUMBER";
                            name: string;
                            label: string;
                            visibility: string;
                            placeholder?: string | undefined;
                            helperText?: string | undefined;
                            required?: boolean | undefined;
                        } | {
                            options: {
                                minLength?: number | undefined;
                                maxLength?: number | undefined;
                                pattern?: string | undefined;
                            };
                            type: "TEXT";
                            name: string;
                            label: string;
                            visibility: string;
                            placeholder?: string | undefined;
                            helperText?: string | undefined;
                            required?: boolean | undefined;
                        } | {
                            options: {
                                isMulti: boolean;
                                optionList: string[];
                                maxSelect: number | null;
                                minSelect: number | null;
                            };
                            type: "SELECT";
                            name: string;
                            label: string;
                            visibility: string;
                            placeholder?: string | undefined;
                            helperText?: string | undefined;
                            required?: boolean | undefined;
                        } | {
                            options: {
                                min?: string | undefined;
                                max?: string | undefined;
                            };
                            type: "DATETIME";
                            name: string;
                            label: string;
                            visibility: string;
                            placeholder?: string | undefined;
                            helperText?: string | undefined;
                            required?: boolean | undefined;
                        } | {
                            options: {
                                minLength?: number | undefined;
                                maxLength?: number | undefined;
                                disableImages?: boolean | undefined;
                            };
                            type: "RICHTEXT";
                            name: string;
                            label: string;
                            visibility: string;
                            placeholder?: string | undefined;
                            helperText?: string | undefined;
                            required?: boolean | undefined;
                        } | {
                            type: "SEPARATOR";
                            name: string;
                        })[];
                        state: string;
                        points: number;
                        commentsCount: number;
                        lastChangeAt: Date;
                        project: {
                            id: string;
                            name: string;
                            slug: string;
                            displayName: string;
                        };
                        group: {
                            id: string;
                            name: string;
                            slug: string;
                            displayName: string;
                        };
                        isSuspend?: boolean | undefined;
                    } | {
                        id: string;
                        authorId: string;
                        createdAt: Date;
                        updatedAt: Date;
                        title: string;
                        key: string;
                        tags: {
                            id: string;
                            name: string;
                            description: string;
                            displayName: string;
                            color: string;
                        }[];
                        author: {
                            id: string;
                            username: string;
                            email: string;
                            roleDisplayName: string;
                            roleName: string;
                        };
                        visibility: string;
                        projectId: string;
                        schema: ({
                            options: {
                                min?: number | undefined;
                                max?: number | undefined;
                                noDecimal?: boolean | undefined;
                            };
                            type: "NUMBER";
                            name: string;
                            label: string;
                            visibility: string;
                            placeholder?: string | undefined;
                            helperText?: string | undefined;
                            required?: boolean | undefined;
                        } | {
                            options: {
                                minLength?: number | undefined;
                                maxLength?: number | undefined;
                                pattern?: string | undefined;
                            };
                            type: "TEXT";
                            name: string;
                            label: string;
                            visibility: string;
                            placeholder?: string | undefined;
                            helperText?: string | undefined;
                            required?: boolean | undefined;
                        } | {
                            options: {
                                isMulti: boolean;
                                optionList: string[];
                                maxSelect: number | null;
                                minSelect: number | null;
                            };
                            type: "SELECT";
                            name: string;
                            label: string;
                            visibility: string;
                            placeholder?: string | undefined;
                            helperText?: string | undefined;
                            required?: boolean | undefined;
                        } | {
                            options: {
                                min?: string | undefined;
                                max?: string | undefined;
                            };
                            type: "DATETIME";
                            name: string;
                            label: string;
                            visibility: string;
                            placeholder?: string | undefined;
                            helperText?: string | undefined;
                            required?: boolean | undefined;
                        } | {
                            options: {
                                minLength?: number | undefined;
                                maxLength?: number | undefined;
                                disableImages?: boolean | undefined;
                            };
                            type: "RICHTEXT";
                            name: string;
                            label: string;
                            visibility: string;
                            placeholder?: string | undefined;
                            helperText?: string | undefined;
                            required?: boolean | undefined;
                        } | {
                            type: "SEPARATOR";
                            name: string;
                        })[];
                        state: string;
                        points: number;
                        commentsCount: number;
                        lastChangeAt: Date;
                        project: {
                            id: string;
                            name: string;
                            slug: string;
                            displayName: string;
                        };
                        group: {
                            id: string;
                            name: string;
                            slug: string;
                            displayName: string;
                        };
                        isSuspend?: boolean | undefined;
                    })[];
                    count: number;
                } | {};
            }>;
            404: z.ZodObject<{
                title: z.ZodString;
                status: z.ZodNumber;
                detail: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                status: number;
                title: string;
                detail?: string | undefined;
            }, {
                status: number;
                title: string;
                detail?: string | undefined;
            }>;
            403: z.ZodObject<{
                title: z.ZodString;
                status: z.ZodNumber;
                detail: z.ZodOptional<z.ZodString>;
                errors: z.ZodOptional<z.ZodArray<z.ZodType<ErrorObject, z.ZodTypeDef, ErrorObject>, "many">>;
            }, "strip", z.ZodTypeAny, {
                status: number;
                title: string;
                errors?: ErrorObject[] | undefined;
                detail?: string | undefined;
            }, {
                status: number;
                title: string;
                errors?: ErrorObject[] | undefined;
                detail?: string | undefined;
            }>;
            500: z.ZodObject<{
                message: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                message: string;
            }, {
                message: string;
            }>;
        };
    };
    getIssueConfidents: {
        metadata: {
            permissions: {
                OR: ("read:confidence:any" | "read:confidence:own")[];
            };
        };
        query: z.ZodObject<{
            /**
             * @type {string} - limit of records
             */
            limit: z.ZodOptional<z.ZodString>;
            /**
             * @type {string} - page number
             */
            page: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            limit?: string | undefined;
            page?: string | undefined;
        }, {
            limit?: string | undefined;
            page?: string | undefined;
        }>;
        summary: "Get issue confidents by issue id";
        method: "GET";
        path: "/api/issues/:issueId/confidents";
        headers: z.ZodObject<{
            authorization: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            authorization: string;
        }, {
            authorization: string;
        }>;
        responses: {
            200: z.ZodObject<{
                data: z.ZodType<{
                    id: string;
                    authorId: string;
                    memberId: string;
                    issueId: string;
                    createdAt: string;
                    updatedAt: string;
                }, z.ZodTypeDef, {
                    id: string;
                    authorId: string;
                    memberId: string;
                    issueId: string;
                    createdAt: string;
                    updatedAt: string;
                }> | z.ZodObject<{}, "strip", z.ZodTypeAny, {}, {}>;
            }, "strip", z.ZodTypeAny, {
                data: {
                    id: string;
                    authorId: string;
                    memberId: string;
                    issueId: string;
                    createdAt: string;
                    updatedAt: string;
                } | {};
            }, {
                data: {
                    id: string;
                    authorId: string;
                    memberId: string;
                    issueId: string;
                    createdAt: string;
                    updatedAt: string;
                } | {};
            }>;
            500: z.ZodObject<{
                title: z.ZodString;
                status: z.ZodNumber;
                detail: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                status: number;
                title: string;
                detail?: string | undefined;
            }, {
                status: number;
                title: string;
                detail?: string | undefined;
            }>;
        };
    };
};

declare const issueSchema: {
    PreviewDTO: zod.ZodObject<{
        id: zod.ZodString;
        title: zod.ZodString;
        tags: zod.ZodArray<zod.ZodString, "many">;
        state: zod.ZodString;
        key: zod.ZodString;
        points: zod.ZodNumber;
        commentsCount: zod.ZodNumber;
        attachmentsCount: zod.ZodNumber;
    }, "strip", zod.ZodTypeAny, {
        id: string;
        title: string;
        key: string;
        tags: string[];
        state: string;
        points: number;
        commentsCount: number;
        attachmentsCount: number;
    }, {
        id: string;
        title: string;
        key: string;
        tags: string[];
        state: string;
        points: number;
        commentsCount: number;
        attachmentsCount: number;
    }>;
    PublicDTO: zod.ZodObject<{
        id: zod.ZodString;
        title: zod.ZodString;
        tags: zod.ZodArray<zod.ZodString, "many">;
        state: zod.ZodString;
        key: zod.ZodString;
        schema: zod.ZodArray<zod.ZodDiscriminatedUnion<"type", [zod.ZodObject<zod.objectUtil.extendShape<{
            name: zod.ZodString;
            label: zod.ZodString;
            placeholder: zod.ZodOptional<zod.ZodString>;
            helperText: zod.ZodOptional<zod.ZodString>;
            visibility: zod.ZodString;
            required: zod.ZodOptional<zod.ZodBoolean>;
        }, {
            type: zod.ZodLiteral<"NUMBER">;
            options: zod.ZodObject<{
                min: zod.ZodOptional<zod.ZodNumber>;
                max: zod.ZodOptional<zod.ZodNumber>;
                noDecimal: zod.ZodOptional<zod.ZodBoolean>;
            }, "strip", zod.ZodTypeAny, {
                min?: number | undefined;
                max?: number | undefined;
                noDecimal?: boolean | undefined;
            }, {
                min?: number | undefined;
                max?: number | undefined;
                noDecimal?: boolean | undefined;
            }>;
        }>, "strip", zod.ZodTypeAny, {
            options: {
                min?: number | undefined;
                max?: number | undefined;
                noDecimal?: boolean | undefined;
            };
            type: "NUMBER";
            name: string;
            label: string;
            visibility: string;
            placeholder?: string | undefined;
            helperText?: string | undefined;
            required?: boolean | undefined;
        }, {
            options: {
                min?: number | undefined;
                max?: number | undefined;
                noDecimal?: boolean | undefined;
            };
            type: "NUMBER";
            name: string;
            label: string;
            visibility: string;
            placeholder?: string | undefined;
            helperText?: string | undefined;
            required?: boolean | undefined;
        }>, zod.ZodObject<zod.objectUtil.extendShape<{
            name: zod.ZodString;
            label: zod.ZodString;
            placeholder: zod.ZodOptional<zod.ZodString>;
            helperText: zod.ZodOptional<zod.ZodString>;
            visibility: zod.ZodString;
            required: zod.ZodOptional<zod.ZodBoolean>;
        }, {
            type: zod.ZodLiteral<"TEXT">;
            options: zod.ZodObject<{
                minLength: zod.ZodOptional<zod.ZodNumber>;
                maxLength: zod.ZodOptional<zod.ZodNumber>;
                pattern: zod.ZodOptional<zod.ZodString>;
            }, "strip", zod.ZodTypeAny, {
                minLength?: number | undefined;
                maxLength?: number | undefined;
                pattern?: string | undefined;
            }, {
                minLength?: number | undefined;
                maxLength?: number | undefined;
                pattern?: string | undefined;
            }>;
        }>, "strip", zod.ZodTypeAny, {
            options: {
                minLength?: number | undefined;
                maxLength?: number | undefined;
                pattern?: string | undefined;
            };
            type: "TEXT";
            name: string;
            label: string;
            visibility: string;
            placeholder?: string | undefined;
            helperText?: string | undefined;
            required?: boolean | undefined;
        }, {
            options: {
                minLength?: number | undefined;
                maxLength?: number | undefined;
                pattern?: string | undefined;
            };
            type: "TEXT";
            name: string;
            label: string;
            visibility: string;
            placeholder?: string | undefined;
            helperText?: string | undefined;
            required?: boolean | undefined;
        }>, zod.ZodObject<zod.objectUtil.extendShape<{
            name: zod.ZodString;
            label: zod.ZodString;
            placeholder: zod.ZodOptional<zod.ZodString>;
            helperText: zod.ZodOptional<zod.ZodString>;
            visibility: zod.ZodString;
            required: zod.ZodOptional<zod.ZodBoolean>;
        }, {
            type: zod.ZodLiteral<"SELECT">;
            options: zod.ZodObject<{
                isMulti: zod.ZodBoolean;
                optionList: zod.ZodArray<zod.ZodString, "many">;
                maxSelect: zod.ZodNullable<zod.ZodNumber>;
                minSelect: zod.ZodNullable<zod.ZodNumber>;
            }, "strip", zod.ZodTypeAny, {
                isMulti: boolean;
                optionList: string[];
                maxSelect: number | null;
                minSelect: number | null;
            }, {
                isMulti: boolean;
                optionList: string[];
                maxSelect: number | null;
                minSelect: number | null;
            }>;
        }>, "strip", zod.ZodTypeAny, {
            options: {
                isMulti: boolean;
                optionList: string[];
                maxSelect: number | null;
                minSelect: number | null;
            };
            type: "SELECT";
            name: string;
            label: string;
            visibility: string;
            placeholder?: string | undefined;
            helperText?: string | undefined;
            required?: boolean | undefined;
        }, {
            options: {
                isMulti: boolean;
                optionList: string[];
                maxSelect: number | null;
                minSelect: number | null;
            };
            type: "SELECT";
            name: string;
            label: string;
            visibility: string;
            placeholder?: string | undefined;
            helperText?: string | undefined;
            required?: boolean | undefined;
        }>, zod.ZodObject<zod.objectUtil.extendShape<{
            name: zod.ZodString;
            label: zod.ZodString;
            placeholder: zod.ZodOptional<zod.ZodString>;
            helperText: zod.ZodOptional<zod.ZodString>;
            visibility: zod.ZodString;
            required: zod.ZodOptional<zod.ZodBoolean>;
        }, {
            type: zod.ZodLiteral<"DATETIME">;
            options: zod.ZodObject<{
                min: zod.ZodOptional<zod.ZodString>;
                max: zod.ZodOptional<zod.ZodString>;
            }, "strip", zod.ZodTypeAny, {
                min?: string | undefined;
                max?: string | undefined;
            }, {
                min?: string | undefined;
                max?: string | undefined;
            }>;
        }>, "strip", zod.ZodTypeAny, {
            options: {
                min?: string | undefined;
                max?: string | undefined;
            };
            type: "DATETIME";
            name: string;
            label: string;
            visibility: string;
            placeholder?: string | undefined;
            helperText?: string | undefined;
            required?: boolean | undefined;
        }, {
            options: {
                min?: string | undefined;
                max?: string | undefined;
            };
            type: "DATETIME";
            name: string;
            label: string;
            visibility: string;
            placeholder?: string | undefined;
            helperText?: string | undefined;
            required?: boolean | undefined;
        }>, zod.ZodObject<zod.objectUtil.extendShape<{
            name: zod.ZodString;
            label: zod.ZodString;
            placeholder: zod.ZodOptional<zod.ZodString>;
            helperText: zod.ZodOptional<zod.ZodString>;
            visibility: zod.ZodString;
            required: zod.ZodOptional<zod.ZodBoolean>;
        }, {
            type: zod.ZodLiteral<"RICHTEXT">;
            options: zod.ZodObject<{
                minLength: zod.ZodOptional<zod.ZodNumber>;
                maxLength: zod.ZodOptional<zod.ZodNumber>;
                disableImages: zod.ZodOptional<zod.ZodBoolean>;
            }, "strip", zod.ZodTypeAny, {
                minLength?: number | undefined;
                maxLength?: number | undefined;
                disableImages?: boolean | undefined;
            }, {
                minLength?: number | undefined;
                maxLength?: number | undefined;
                disableImages?: boolean | undefined;
            }>;
        }>, "strip", zod.ZodTypeAny, {
            options: {
                minLength?: number | undefined;
                maxLength?: number | undefined;
                disableImages?: boolean | undefined;
            };
            type: "RICHTEXT";
            name: string;
            label: string;
            visibility: string;
            placeholder?: string | undefined;
            helperText?: string | undefined;
            required?: boolean | undefined;
        }, {
            options: {
                minLength?: number | undefined;
                maxLength?: number | undefined;
                disableImages?: boolean | undefined;
            };
            type: "RICHTEXT";
            name: string;
            label: string;
            visibility: string;
            placeholder?: string | undefined;
            helperText?: string | undefined;
            required?: boolean | undefined;
        }>, zod.ZodObject<zod.objectUtil.extendShape<{
            name: zod.ZodString;
            type: zod.ZodString;
        }, {
            type: zod.ZodLiteral<"SEPARATOR">;
        }>, "strip", zod.ZodTypeAny, {
            type: "SEPARATOR";
            name: string;
        }, {
            type: "SEPARATOR";
            name: string;
        }>]>, "many">;
        fields: zod.ZodArray<zod.ZodObject<{
            name: zod.ZodString;
            type: zod.ZodString;
            value: zod.ZodAny;
        }, "strip", zod.ZodTypeAny, {
            type: string;
            name: string;
            value?: any;
        }, {
            type: string;
            name: string;
            value?: any;
        }>, "many">;
        points: zod.ZodNumber;
        commentsCount: zod.ZodNumber;
        authorId: zod.ZodString;
        projectId: zod.ZodString;
        isSuspend: zod.ZodOptional<zod.ZodBoolean>;
        visibility: zod.ZodString;
        lastChangeAt: zod.ZodDate;
        createdAt: zod.ZodDate;
    }, "strip", zod.ZodTypeAny, {
        id: string;
        authorId: string;
        createdAt: Date;
        title: string;
        key: string;
        tags: string[];
        visibility: string;
        projectId: string;
        schema: ({
            options: {
                min?: number | undefined;
                max?: number | undefined;
                noDecimal?: boolean | undefined;
            };
            type: "NUMBER";
            name: string;
            label: string;
            visibility: string;
            placeholder?: string | undefined;
            helperText?: string | undefined;
            required?: boolean | undefined;
        } | {
            options: {
                minLength?: number | undefined;
                maxLength?: number | undefined;
                pattern?: string | undefined;
            };
            type: "TEXT";
            name: string;
            label: string;
            visibility: string;
            placeholder?: string | undefined;
            helperText?: string | undefined;
            required?: boolean | undefined;
        } | {
            options: {
                isMulti: boolean;
                optionList: string[];
                maxSelect: number | null;
                minSelect: number | null;
            };
            type: "SELECT";
            name: string;
            label: string;
            visibility: string;
            placeholder?: string | undefined;
            helperText?: string | undefined;
            required?: boolean | undefined;
        } | {
            options: {
                min?: string | undefined;
                max?: string | undefined;
            };
            type: "DATETIME";
            name: string;
            label: string;
            visibility: string;
            placeholder?: string | undefined;
            helperText?: string | undefined;
            required?: boolean | undefined;
        } | {
            options: {
                minLength?: number | undefined;
                maxLength?: number | undefined;
                disableImages?: boolean | undefined;
            };
            type: "RICHTEXT";
            name: string;
            label: string;
            visibility: string;
            placeholder?: string | undefined;
            helperText?: string | undefined;
            required?: boolean | undefined;
        } | {
            type: "SEPARATOR";
            name: string;
        })[];
        state: string;
        points: number;
        commentsCount: number;
        fields: {
            type: string;
            name: string;
            value?: any;
        }[];
        lastChangeAt: Date;
        isSuspend?: boolean | undefined;
    }, {
        id: string;
        authorId: string;
        createdAt: Date;
        title: string;
        key: string;
        tags: string[];
        visibility: string;
        projectId: string;
        schema: ({
            options: {
                min?: number | undefined;
                max?: number | undefined;
                noDecimal?: boolean | undefined;
            };
            type: "NUMBER";
            name: string;
            label: string;
            visibility: string;
            placeholder?: string | undefined;
            helperText?: string | undefined;
            required?: boolean | undefined;
        } | {
            options: {
                minLength?: number | undefined;
                maxLength?: number | undefined;
                pattern?: string | undefined;
            };
            type: "TEXT";
            name: string;
            label: string;
            visibility: string;
            placeholder?: string | undefined;
            helperText?: string | undefined;
            required?: boolean | undefined;
        } | {
            options: {
                isMulti: boolean;
                optionList: string[];
                maxSelect: number | null;
                minSelect: number | null;
            };
            type: "SELECT";
            name: string;
            label: string;
            visibility: string;
            placeholder?: string | undefined;
            helperText?: string | undefined;
            required?: boolean | undefined;
        } | {
            options: {
                min?: string | undefined;
                max?: string | undefined;
            };
            type: "DATETIME";
            name: string;
            label: string;
            visibility: string;
            placeholder?: string | undefined;
            helperText?: string | undefined;
            required?: boolean | undefined;
        } | {
            options: {
                minLength?: number | undefined;
                maxLength?: number | undefined;
                disableImages?: boolean | undefined;
            };
            type: "RICHTEXT";
            name: string;
            label: string;
            visibility: string;
            placeholder?: string | undefined;
            helperText?: string | undefined;
            required?: boolean | undefined;
        } | {
            type: "SEPARATOR";
            name: string;
        })[];
        state: string;
        points: number;
        commentsCount: number;
        fields: {
            type: string;
            name: string;
            value?: any;
        }[];
        lastChangeAt: Date;
        isSuspend?: boolean | undefined;
    }>;
    PublicDetailsDTO: zod.ZodObject<zod.objectUtil.extendShape<{
        id: zod.ZodString;
        title: zod.ZodString;
        tags: zod.ZodArray<zod.ZodString, "many">;
        state: zod.ZodString;
        key: zod.ZodString;
        schema: zod.ZodArray<zod.ZodDiscriminatedUnion<"type", [zod.ZodObject<zod.objectUtil.extendShape<{
            name: zod.ZodString;
            label: zod.ZodString;
            placeholder: zod.ZodOptional<zod.ZodString>;
            helperText: zod.ZodOptional<zod.ZodString>;
            visibility: zod.ZodString;
            required: zod.ZodOptional<zod.ZodBoolean>;
        }, {
            type: zod.ZodLiteral<"NUMBER">;
            options: zod.ZodObject<{
                min: zod.ZodOptional<zod.ZodNumber>;
                max: zod.ZodOptional<zod.ZodNumber>;
                noDecimal: zod.ZodOptional<zod.ZodBoolean>;
            }, "strip", zod.ZodTypeAny, {
                min?: number | undefined;
                max?: number | undefined;
                noDecimal?: boolean | undefined;
            }, {
                min?: number | undefined;
                max?: number | undefined;
                noDecimal?: boolean | undefined;
            }>;
        }>, "strip", zod.ZodTypeAny, {
            options: {
                min?: number | undefined;
                max?: number | undefined;
                noDecimal?: boolean | undefined;
            };
            type: "NUMBER";
            name: string;
            label: string;
            visibility: string;
            placeholder?: string | undefined;
            helperText?: string | undefined;
            required?: boolean | undefined;
        }, {
            options: {
                min?: number | undefined;
                max?: number | undefined;
                noDecimal?: boolean | undefined;
            };
            type: "NUMBER";
            name: string;
            label: string;
            visibility: string;
            placeholder?: string | undefined;
            helperText?: string | undefined;
            required?: boolean | undefined;
        }>, zod.ZodObject<zod.objectUtil.extendShape<{
            name: zod.ZodString;
            label: zod.ZodString;
            placeholder: zod.ZodOptional<zod.ZodString>;
            helperText: zod.ZodOptional<zod.ZodString>;
            visibility: zod.ZodString;
            required: zod.ZodOptional<zod.ZodBoolean>;
        }, {
            type: zod.ZodLiteral<"TEXT">;
            options: zod.ZodObject<{
                minLength: zod.ZodOptional<zod.ZodNumber>;
                maxLength: zod.ZodOptional<zod.ZodNumber>;
                pattern: zod.ZodOptional<zod.ZodString>;
            }, "strip", zod.ZodTypeAny, {
                minLength?: number | undefined;
                maxLength?: number | undefined;
                pattern?: string | undefined;
            }, {
                minLength?: number | undefined;
                maxLength?: number | undefined;
                pattern?: string | undefined;
            }>;
        }>, "strip", zod.ZodTypeAny, {
            options: {
                minLength?: number | undefined;
                maxLength?: number | undefined;
                pattern?: string | undefined;
            };
            type: "TEXT";
            name: string;
            label: string;
            visibility: string;
            placeholder?: string | undefined;
            helperText?: string | undefined;
            required?: boolean | undefined;
        }, {
            options: {
                minLength?: number | undefined;
                maxLength?: number | undefined;
                pattern?: string | undefined;
            };
            type: "TEXT";
            name: string;
            label: string;
            visibility: string;
            placeholder?: string | undefined;
            helperText?: string | undefined;
            required?: boolean | undefined;
        }>, zod.ZodObject<zod.objectUtil.extendShape<{
            name: zod.ZodString;
            label: zod.ZodString;
            placeholder: zod.ZodOptional<zod.ZodString>;
            helperText: zod.ZodOptional<zod.ZodString>;
            visibility: zod.ZodString;
            required: zod.ZodOptional<zod.ZodBoolean>;
        }, {
            type: zod.ZodLiteral<"SELECT">;
            options: zod.ZodObject<{
                isMulti: zod.ZodBoolean;
                optionList: zod.ZodArray<zod.ZodString, "many">;
                maxSelect: zod.ZodNullable<zod.ZodNumber>;
                minSelect: zod.ZodNullable<zod.ZodNumber>;
            }, "strip", zod.ZodTypeAny, {
                isMulti: boolean;
                optionList: string[];
                maxSelect: number | null;
                minSelect: number | null;
            }, {
                isMulti: boolean;
                optionList: string[];
                maxSelect: number | null;
                minSelect: number | null;
            }>;
        }>, "strip", zod.ZodTypeAny, {
            options: {
                isMulti: boolean;
                optionList: string[];
                maxSelect: number | null;
                minSelect: number | null;
            };
            type: "SELECT";
            name: string;
            label: string;
            visibility: string;
            placeholder?: string | undefined;
            helperText?: string | undefined;
            required?: boolean | undefined;
        }, {
            options: {
                isMulti: boolean;
                optionList: string[];
                maxSelect: number | null;
                minSelect: number | null;
            };
            type: "SELECT";
            name: string;
            label: string;
            visibility: string;
            placeholder?: string | undefined;
            helperText?: string | undefined;
            required?: boolean | undefined;
        }>, zod.ZodObject<zod.objectUtil.extendShape<{
            name: zod.ZodString;
            label: zod.ZodString;
            placeholder: zod.ZodOptional<zod.ZodString>;
            helperText: zod.ZodOptional<zod.ZodString>;
            visibility: zod.ZodString;
            required: zod.ZodOptional<zod.ZodBoolean>;
        }, {
            type: zod.ZodLiteral<"DATETIME">;
            options: zod.ZodObject<{
                min: zod.ZodOptional<zod.ZodString>;
                max: zod.ZodOptional<zod.ZodString>;
            }, "strip", zod.ZodTypeAny, {
                min?: string | undefined;
                max?: string | undefined;
            }, {
                min?: string | undefined;
                max?: string | undefined;
            }>;
        }>, "strip", zod.ZodTypeAny, {
            options: {
                min?: string | undefined;
                max?: string | undefined;
            };
            type: "DATETIME";
            name: string;
            label: string;
            visibility: string;
            placeholder?: string | undefined;
            helperText?: string | undefined;
            required?: boolean | undefined;
        }, {
            options: {
                min?: string | undefined;
                max?: string | undefined;
            };
            type: "DATETIME";
            name: string;
            label: string;
            visibility: string;
            placeholder?: string | undefined;
            helperText?: string | undefined;
            required?: boolean | undefined;
        }>, zod.ZodObject<zod.objectUtil.extendShape<{
            name: zod.ZodString;
            label: zod.ZodString;
            placeholder: zod.ZodOptional<zod.ZodString>;
            helperText: zod.ZodOptional<zod.ZodString>;
            visibility: zod.ZodString;
            required: zod.ZodOptional<zod.ZodBoolean>;
        }, {
            type: zod.ZodLiteral<"RICHTEXT">;
            options: zod.ZodObject<{
                minLength: zod.ZodOptional<zod.ZodNumber>;
                maxLength: zod.ZodOptional<zod.ZodNumber>;
                disableImages: zod.ZodOptional<zod.ZodBoolean>;
            }, "strip", zod.ZodTypeAny, {
                minLength?: number | undefined;
                maxLength?: number | undefined;
                disableImages?: boolean | undefined;
            }, {
                minLength?: number | undefined;
                maxLength?: number | undefined;
                disableImages?: boolean | undefined;
            }>;
        }>, "strip", zod.ZodTypeAny, {
            options: {
                minLength?: number | undefined;
                maxLength?: number | undefined;
                disableImages?: boolean | undefined;
            };
            type: "RICHTEXT";
            name: string;
            label: string;
            visibility: string;
            placeholder?: string | undefined;
            helperText?: string | undefined;
            required?: boolean | undefined;
        }, {
            options: {
                minLength?: number | undefined;
                maxLength?: number | undefined;
                disableImages?: boolean | undefined;
            };
            type: "RICHTEXT";
            name: string;
            label: string;
            visibility: string;
            placeholder?: string | undefined;
            helperText?: string | undefined;
            required?: boolean | undefined;
        }>, zod.ZodObject<zod.objectUtil.extendShape<{
            name: zod.ZodString;
            type: zod.ZodString;
        }, {
            type: zod.ZodLiteral<"SEPARATOR">;
        }>, "strip", zod.ZodTypeAny, {
            type: "SEPARATOR";
            name: string;
        }, {
            type: "SEPARATOR";
            name: string;
        }>]>, "many">;
        fields: zod.ZodArray<zod.ZodObject<{
            name: zod.ZodString;
            type: zod.ZodString;
            value: zod.ZodAny;
        }, "strip", zod.ZodTypeAny, {
            type: string;
            name: string;
            value?: any;
        }, {
            type: string;
            name: string;
            value?: any;
        }>, "many">;
        points: zod.ZodNumber;
        commentsCount: zod.ZodNumber;
        authorId: zod.ZodString;
        projectId: zod.ZodString;
        isSuspend: zod.ZodOptional<zod.ZodBoolean>;
        visibility: zod.ZodString;
        lastChangeAt: zod.ZodDate;
        createdAt: zod.ZodDate;
    }, {
        id: zod.ZodString;
        title: zod.ZodString;
        tags: zod.ZodArray<zod.ZodObject<{
            id: zod.ZodString;
            displayName: zod.ZodString;
            name: zod.ZodString;
            color: zod.ZodString;
            description: zod.ZodString;
        }, "strip", zod.ZodTypeAny, {
            id: string;
            name: string;
            description: string;
            displayName: string;
            color: string;
        }, {
            id: string;
            name: string;
            description: string;
            displayName: string;
            color: string;
        }>, "many">;
        state: zod.ZodString;
        key: zod.ZodString;
        points: zod.ZodNumber;
        commentsCount: zod.ZodNumber;
        fields: zod.ZodArray<zod.ZodObject<{
            name: zod.ZodString;
            type: zod.ZodString;
            value: zod.ZodAny;
        }, "strip", zod.ZodTypeAny, {
            type: string;
            name: string;
            value?: any;
        }, {
            type: string;
            name: string;
            value?: any;
        }>, "many">;
        author: zod.ZodObject<{
            id: zod.ZodString;
            username: zod.ZodString;
            email: zod.ZodString;
            roleName: zod.ZodString;
            roleDisplayName: zod.ZodString;
        }, "strip", zod.ZodTypeAny, {
            id: string;
            username: string;
            email: string;
            roleDisplayName: string;
            roleName: string;
        }, {
            id: string;
            username: string;
            email: string;
            roleDisplayName: string;
            roleName: string;
        }>;
        project: zod.ZodObject<{
            id: zod.ZodString;
            slug: zod.ZodString;
            name: zod.ZodString;
            displayName: zod.ZodString;
        }, "strip", zod.ZodTypeAny, {
            id: string;
            name: string;
            slug: string;
            displayName: string;
        }, {
            id: string;
            name: string;
            slug: string;
            displayName: string;
        }>;
        group: zod.ZodObject<{
            id: zod.ZodString;
            slug: zod.ZodString;
            name: zod.ZodString;
            displayName: zod.ZodString;
        }, "strip", zod.ZodTypeAny, {
            id: string;
            name: string;
            slug: string;
            displayName: string;
        }, {
            id: string;
            name: string;
            slug: string;
            displayName: string;
        }>;
        isSuspend: zod.ZodOptional<zod.ZodBoolean>;
        visibility: zod.ZodString;
        lastChangeAt: zod.ZodDate;
        createdAt: zod.ZodDate;
    }>, "strip", zod.ZodTypeAny, {
        id: string;
        authorId: string;
        createdAt: Date;
        title: string;
        key: string;
        tags: {
            id: string;
            name: string;
            description: string;
            displayName: string;
            color: string;
        }[];
        author: {
            id: string;
            username: string;
            email: string;
            roleDisplayName: string;
            roleName: string;
        };
        visibility: string;
        projectId: string;
        schema: ({
            options: {
                min?: number | undefined;
                max?: number | undefined;
                noDecimal?: boolean | undefined;
            };
            type: "NUMBER";
            name: string;
            label: string;
            visibility: string;
            placeholder?: string | undefined;
            helperText?: string | undefined;
            required?: boolean | undefined;
        } | {
            options: {
                minLength?: number | undefined;
                maxLength?: number | undefined;
                pattern?: string | undefined;
            };
            type: "TEXT";
            name: string;
            label: string;
            visibility: string;
            placeholder?: string | undefined;
            helperText?: string | undefined;
            required?: boolean | undefined;
        } | {
            options: {
                isMulti: boolean;
                optionList: string[];
                maxSelect: number | null;
                minSelect: number | null;
            };
            type: "SELECT";
            name: string;
            label: string;
            visibility: string;
            placeholder?: string | undefined;
            helperText?: string | undefined;
            required?: boolean | undefined;
        } | {
            options: {
                min?: string | undefined;
                max?: string | undefined;
            };
            type: "DATETIME";
            name: string;
            label: string;
            visibility: string;
            placeholder?: string | undefined;
            helperText?: string | undefined;
            required?: boolean | undefined;
        } | {
            options: {
                minLength?: number | undefined;
                maxLength?: number | undefined;
                disableImages?: boolean | undefined;
            };
            type: "RICHTEXT";
            name: string;
            label: string;
            visibility: string;
            placeholder?: string | undefined;
            helperText?: string | undefined;
            required?: boolean | undefined;
        } | {
            type: "SEPARATOR";
            name: string;
        })[];
        state: string;
        points: number;
        commentsCount: number;
        fields: {
            type: string;
            name: string;
            value?: any;
        }[];
        lastChangeAt: Date;
        project: {
            id: string;
            name: string;
            slug: string;
            displayName: string;
        };
        group: {
            id: string;
            name: string;
            slug: string;
            displayName: string;
        };
        isSuspend?: boolean | undefined;
    }, {
        id: string;
        authorId: string;
        createdAt: Date;
        title: string;
        key: string;
        tags: {
            id: string;
            name: string;
            description: string;
            displayName: string;
            color: string;
        }[];
        author: {
            id: string;
            username: string;
            email: string;
            roleDisplayName: string;
            roleName: string;
        };
        visibility: string;
        projectId: string;
        schema: ({
            options: {
                min?: number | undefined;
                max?: number | undefined;
                noDecimal?: boolean | undefined;
            };
            type: "NUMBER";
            name: string;
            label: string;
            visibility: string;
            placeholder?: string | undefined;
            helperText?: string | undefined;
            required?: boolean | undefined;
        } | {
            options: {
                minLength?: number | undefined;
                maxLength?: number | undefined;
                pattern?: string | undefined;
            };
            type: "TEXT";
            name: string;
            label: string;
            visibility: string;
            placeholder?: string | undefined;
            helperText?: string | undefined;
            required?: boolean | undefined;
        } | {
            options: {
                isMulti: boolean;
                optionList: string[];
                maxSelect: number | null;
                minSelect: number | null;
            };
            type: "SELECT";
            name: string;
            label: string;
            visibility: string;
            placeholder?: string | undefined;
            helperText?: string | undefined;
            required?: boolean | undefined;
        } | {
            options: {
                min?: string | undefined;
                max?: string | undefined;
            };
            type: "DATETIME";
            name: string;
            label: string;
            visibility: string;
            placeholder?: string | undefined;
            helperText?: string | undefined;
            required?: boolean | undefined;
        } | {
            options: {
                minLength?: number | undefined;
                maxLength?: number | undefined;
                disableImages?: boolean | undefined;
            };
            type: "RICHTEXT";
            name: string;
            label: string;
            visibility: string;
            placeholder?: string | undefined;
            helperText?: string | undefined;
            required?: boolean | undefined;
        } | {
            type: "SEPARATOR";
            name: string;
        })[];
        state: string;
        points: number;
        commentsCount: number;
        fields: {
            type: string;
            name: string;
            value?: any;
        }[];
        lastChangeAt: Date;
        project: {
            id: string;
            name: string;
            slug: string;
            displayName: string;
        };
        group: {
            id: string;
            name: string;
            slug: string;
            displayName: string;
        };
        isSuspend?: boolean | undefined;
    }>;
    RegularDTO: zod.ZodObject<zod.objectUtil.extendShape<{
        id: zod.ZodString;
        title: zod.ZodString;
        tags: zod.ZodArray<zod.ZodString, "many">;
        state: zod.ZodString;
        key: zod.ZodString;
        schema: zod.ZodArray<zod.ZodDiscriminatedUnion<"type", [zod.ZodObject<zod.objectUtil.extendShape<{
            name: zod.ZodString;
            label: zod.ZodString;
            placeholder: zod.ZodOptional<zod.ZodString>;
            helperText: zod.ZodOptional<zod.ZodString>;
            visibility: zod.ZodString;
            required: zod.ZodOptional<zod.ZodBoolean>;
        }, {
            type: zod.ZodLiteral<"NUMBER">;
            options: zod.ZodObject<{
                min: zod.ZodOptional<zod.ZodNumber>;
                max: zod.ZodOptional<zod.ZodNumber>;
                noDecimal: zod.ZodOptional<zod.ZodBoolean>;
            }, "strip", zod.ZodTypeAny, {
                min?: number | undefined;
                max?: number | undefined;
                noDecimal?: boolean | undefined;
            }, {
                min?: number | undefined;
                max?: number | undefined;
                noDecimal?: boolean | undefined;
            }>;
        }>, "strip", zod.ZodTypeAny, {
            options: {
                min?: number | undefined;
                max?: number | undefined;
                noDecimal?: boolean | undefined;
            };
            type: "NUMBER";
            name: string;
            label: string;
            visibility: string;
            placeholder?: string | undefined;
            helperText?: string | undefined;
            required?: boolean | undefined;
        }, {
            options: {
                min?: number | undefined;
                max?: number | undefined;
                noDecimal?: boolean | undefined;
            };
            type: "NUMBER";
            name: string;
            label: string;
            visibility: string;
            placeholder?: string | undefined;
            helperText?: string | undefined;
            required?: boolean | undefined;
        }>, zod.ZodObject<zod.objectUtil.extendShape<{
            name: zod.ZodString;
            label: zod.ZodString;
            placeholder: zod.ZodOptional<zod.ZodString>;
            helperText: zod.ZodOptional<zod.ZodString>;
            visibility: zod.ZodString;
            required: zod.ZodOptional<zod.ZodBoolean>;
        }, {
            type: zod.ZodLiteral<"TEXT">;
            options: zod.ZodObject<{
                minLength: zod.ZodOptional<zod.ZodNumber>;
                maxLength: zod.ZodOptional<zod.ZodNumber>;
                pattern: zod.ZodOptional<zod.ZodString>;
            }, "strip", zod.ZodTypeAny, {
                minLength?: number | undefined;
                maxLength?: number | undefined;
                pattern?: string | undefined;
            }, {
                minLength?: number | undefined;
                maxLength?: number | undefined;
                pattern?: string | undefined;
            }>;
        }>, "strip", zod.ZodTypeAny, {
            options: {
                minLength?: number | undefined;
                maxLength?: number | undefined;
                pattern?: string | undefined;
            };
            type: "TEXT";
            name: string;
            label: string;
            visibility: string;
            placeholder?: string | undefined;
            helperText?: string | undefined;
            required?: boolean | undefined;
        }, {
            options: {
                minLength?: number | undefined;
                maxLength?: number | undefined;
                pattern?: string | undefined;
            };
            type: "TEXT";
            name: string;
            label: string;
            visibility: string;
            placeholder?: string | undefined;
            helperText?: string | undefined;
            required?: boolean | undefined;
        }>, zod.ZodObject<zod.objectUtil.extendShape<{
            name: zod.ZodString;
            label: zod.ZodString;
            placeholder: zod.ZodOptional<zod.ZodString>;
            helperText: zod.ZodOptional<zod.ZodString>;
            visibility: zod.ZodString;
            required: zod.ZodOptional<zod.ZodBoolean>;
        }, {
            type: zod.ZodLiteral<"SELECT">;
            options: zod.ZodObject<{
                isMulti: zod.ZodBoolean;
                optionList: zod.ZodArray<zod.ZodString, "many">;
                maxSelect: zod.ZodNullable<zod.ZodNumber>;
                minSelect: zod.ZodNullable<zod.ZodNumber>;
            }, "strip", zod.ZodTypeAny, {
                isMulti: boolean;
                optionList: string[];
                maxSelect: number | null;
                minSelect: number | null;
            }, {
                isMulti: boolean;
                optionList: string[];
                maxSelect: number | null;
                minSelect: number | null;
            }>;
        }>, "strip", zod.ZodTypeAny, {
            options: {
                isMulti: boolean;
                optionList: string[];
                maxSelect: number | null;
                minSelect: number | null;
            };
            type: "SELECT";
            name: string;
            label: string;
            visibility: string;
            placeholder?: string | undefined;
            helperText?: string | undefined;
            required?: boolean | undefined;
        }, {
            options: {
                isMulti: boolean;
                optionList: string[];
                maxSelect: number | null;
                minSelect: number | null;
            };
            type: "SELECT";
            name: string;
            label: string;
            visibility: string;
            placeholder?: string | undefined;
            helperText?: string | undefined;
            required?: boolean | undefined;
        }>, zod.ZodObject<zod.objectUtil.extendShape<{
            name: zod.ZodString;
            label: zod.ZodString;
            placeholder: zod.ZodOptional<zod.ZodString>;
            helperText: zod.ZodOptional<zod.ZodString>;
            visibility: zod.ZodString;
            required: zod.ZodOptional<zod.ZodBoolean>;
        }, {
            type: zod.ZodLiteral<"DATETIME">;
            options: zod.ZodObject<{
                min: zod.ZodOptional<zod.ZodString>;
                max: zod.ZodOptional<zod.ZodString>;
            }, "strip", zod.ZodTypeAny, {
                min?: string | undefined;
                max?: string | undefined;
            }, {
                min?: string | undefined;
                max?: string | undefined;
            }>;
        }>, "strip", zod.ZodTypeAny, {
            options: {
                min?: string | undefined;
                max?: string | undefined;
            };
            type: "DATETIME";
            name: string;
            label: string;
            visibility: string;
            placeholder?: string | undefined;
            helperText?: string | undefined;
            required?: boolean | undefined;
        }, {
            options: {
                min?: string | undefined;
                max?: string | undefined;
            };
            type: "DATETIME";
            name: string;
            label: string;
            visibility: string;
            placeholder?: string | undefined;
            helperText?: string | undefined;
            required?: boolean | undefined;
        }>, zod.ZodObject<zod.objectUtil.extendShape<{
            name: zod.ZodString;
            label: zod.ZodString;
            placeholder: zod.ZodOptional<zod.ZodString>;
            helperText: zod.ZodOptional<zod.ZodString>;
            visibility: zod.ZodString;
            required: zod.ZodOptional<zod.ZodBoolean>;
        }, {
            type: zod.ZodLiteral<"RICHTEXT">;
            options: zod.ZodObject<{
                minLength: zod.ZodOptional<zod.ZodNumber>;
                maxLength: zod.ZodOptional<zod.ZodNumber>;
                disableImages: zod.ZodOptional<zod.ZodBoolean>;
            }, "strip", zod.ZodTypeAny, {
                minLength?: number | undefined;
                maxLength?: number | undefined;
                disableImages?: boolean | undefined;
            }, {
                minLength?: number | undefined;
                maxLength?: number | undefined;
                disableImages?: boolean | undefined;
            }>;
        }>, "strip", zod.ZodTypeAny, {
            options: {
                minLength?: number | undefined;
                maxLength?: number | undefined;
                disableImages?: boolean | undefined;
            };
            type: "RICHTEXT";
            name: string;
            label: string;
            visibility: string;
            placeholder?: string | undefined;
            helperText?: string | undefined;
            required?: boolean | undefined;
        }, {
            options: {
                minLength?: number | undefined;
                maxLength?: number | undefined;
                disableImages?: boolean | undefined;
            };
            type: "RICHTEXT";
            name: string;
            label: string;
            visibility: string;
            placeholder?: string | undefined;
            helperText?: string | undefined;
            required?: boolean | undefined;
        }>, zod.ZodObject<zod.objectUtil.extendShape<{
            name: zod.ZodString;
            type: zod.ZodString;
        }, {
            type: zod.ZodLiteral<"SEPARATOR">;
        }>, "strip", zod.ZodTypeAny, {
            type: "SEPARATOR";
            name: string;
        }, {
            type: "SEPARATOR";
            name: string;
        }>]>, "many">;
        fields: zod.ZodArray<zod.ZodObject<{
            name: zod.ZodString;
            type: zod.ZodString;
            value: zod.ZodAny;
        }, "strip", zod.ZodTypeAny, {
            type: string;
            name: string;
            value?: any;
        }, {
            type: string;
            name: string;
            value?: any;
        }>, "many">;
        points: zod.ZodNumber;
        commentsCount: zod.ZodNumber;
        authorId: zod.ZodString;
        projectId: zod.ZodString;
        isSuspend: zod.ZodOptional<zod.ZodBoolean>;
        visibility: zod.ZodString;
        lastChangeAt: zod.ZodDate;
        createdAt: zod.ZodDate;
    }, {}>, "strip", zod.ZodTypeAny, {
        id: string;
        authorId: string;
        createdAt: Date;
        title: string;
        key: string;
        tags: string[];
        visibility: string;
        projectId: string;
        schema: ({
            options: {
                min?: number | undefined;
                max?: number | undefined;
                noDecimal?: boolean | undefined;
            };
            type: "NUMBER";
            name: string;
            label: string;
            visibility: string;
            placeholder?: string | undefined;
            helperText?: string | undefined;
            required?: boolean | undefined;
        } | {
            options: {
                minLength?: number | undefined;
                maxLength?: number | undefined;
                pattern?: string | undefined;
            };
            type: "TEXT";
            name: string;
            label: string;
            visibility: string;
            placeholder?: string | undefined;
            helperText?: string | undefined;
            required?: boolean | undefined;
        } | {
            options: {
                isMulti: boolean;
                optionList: string[];
                maxSelect: number | null;
                minSelect: number | null;
            };
            type: "SELECT";
            name: string;
            label: string;
            visibility: string;
            placeholder?: string | undefined;
            helperText?: string | undefined;
            required?: boolean | undefined;
        } | {
            options: {
                min?: string | undefined;
                max?: string | undefined;
            };
            type: "DATETIME";
            name: string;
            label: string;
            visibility: string;
            placeholder?: string | undefined;
            helperText?: string | undefined;
            required?: boolean | undefined;
        } | {
            options: {
                minLength?: number | undefined;
                maxLength?: number | undefined;
                disableImages?: boolean | undefined;
            };
            type: "RICHTEXT";
            name: string;
            label: string;
            visibility: string;
            placeholder?: string | undefined;
            helperText?: string | undefined;
            required?: boolean | undefined;
        } | {
            type: "SEPARATOR";
            name: string;
        })[];
        state: string;
        points: number;
        commentsCount: number;
        fields: {
            type: string;
            name: string;
            value?: any;
        }[];
        lastChangeAt: Date;
        isSuspend?: boolean | undefined;
    }, {
        id: string;
        authorId: string;
        createdAt: Date;
        title: string;
        key: string;
        tags: string[];
        visibility: string;
        projectId: string;
        schema: ({
            options: {
                min?: number | undefined;
                max?: number | undefined;
                noDecimal?: boolean | undefined;
            };
            type: "NUMBER";
            name: string;
            label: string;
            visibility: string;
            placeholder?: string | undefined;
            helperText?: string | undefined;
            required?: boolean | undefined;
        } | {
            options: {
                minLength?: number | undefined;
                maxLength?: number | undefined;
                pattern?: string | undefined;
            };
            type: "TEXT";
            name: string;
            label: string;
            visibility: string;
            placeholder?: string | undefined;
            helperText?: string | undefined;
            required?: boolean | undefined;
        } | {
            options: {
                isMulti: boolean;
                optionList: string[];
                maxSelect: number | null;
                minSelect: number | null;
            };
            type: "SELECT";
            name: string;
            label: string;
            visibility: string;
            placeholder?: string | undefined;
            helperText?: string | undefined;
            required?: boolean | undefined;
        } | {
            options: {
                min?: string | undefined;
                max?: string | undefined;
            };
            type: "DATETIME";
            name: string;
            label: string;
            visibility: string;
            placeholder?: string | undefined;
            helperText?: string | undefined;
            required?: boolean | undefined;
        } | {
            options: {
                minLength?: number | undefined;
                maxLength?: number | undefined;
                disableImages?: boolean | undefined;
            };
            type: "RICHTEXT";
            name: string;
            label: string;
            visibility: string;
            placeholder?: string | undefined;
            helperText?: string | undefined;
            required?: boolean | undefined;
        } | {
            type: "SEPARATOR";
            name: string;
        })[];
        state: string;
        points: number;
        commentsCount: number;
        fields: {
            type: string;
            name: string;
            value?: any;
        }[];
        lastChangeAt: Date;
        isSuspend?: boolean | undefined;
    }>;
    RegularDetailsDTO: zod.ZodObject<zod.objectUtil.extendShape<zod.objectUtil.extendShape<{
        id: zod.ZodString;
        title: zod.ZodString;
        tags: zod.ZodArray<zod.ZodString, "many">;
        state: zod.ZodString;
        key: zod.ZodString;
        schema: zod.ZodArray<zod.ZodDiscriminatedUnion<"type", [zod.ZodObject<zod.objectUtil.extendShape<{
            name: zod.ZodString;
            label: zod.ZodString;
            placeholder: zod.ZodOptional<zod.ZodString>;
            helperText: zod.ZodOptional<zod.ZodString>;
            visibility: zod.ZodString;
            required: zod.ZodOptional<zod.ZodBoolean>;
        }, {
            type: zod.ZodLiteral<"NUMBER">;
            options: zod.ZodObject<{
                min: zod.ZodOptional<zod.ZodNumber>;
                max: zod.ZodOptional<zod.ZodNumber>;
                noDecimal: zod.ZodOptional<zod.ZodBoolean>;
            }, "strip", zod.ZodTypeAny, {
                min?: number | undefined;
                max?: number | undefined;
                noDecimal?: boolean | undefined;
            }, {
                min?: number | undefined;
                max?: number | undefined;
                noDecimal?: boolean | undefined;
            }>;
        }>, "strip", zod.ZodTypeAny, {
            options: {
                min?: number | undefined;
                max?: number | undefined;
                noDecimal?: boolean | undefined;
            };
            type: "NUMBER";
            name: string;
            label: string;
            visibility: string;
            placeholder?: string | undefined;
            helperText?: string | undefined;
            required?: boolean | undefined;
        }, {
            options: {
                min?: number | undefined;
                max?: number | undefined;
                noDecimal?: boolean | undefined;
            };
            type: "NUMBER";
            name: string;
            label: string;
            visibility: string;
            placeholder?: string | undefined;
            helperText?: string | undefined;
            required?: boolean | undefined;
        }>, zod.ZodObject<zod.objectUtil.extendShape<{
            name: zod.ZodString;
            label: zod.ZodString;
            placeholder: zod.ZodOptional<zod.ZodString>;
            helperText: zod.ZodOptional<zod.ZodString>;
            visibility: zod.ZodString;
            required: zod.ZodOptional<zod.ZodBoolean>;
        }, {
            type: zod.ZodLiteral<"TEXT">;
            options: zod.ZodObject<{
                minLength: zod.ZodOptional<zod.ZodNumber>;
                maxLength: zod.ZodOptional<zod.ZodNumber>;
                pattern: zod.ZodOptional<zod.ZodString>;
            }, "strip", zod.ZodTypeAny, {
                minLength?: number | undefined;
                maxLength?: number | undefined;
                pattern?: string | undefined;
            }, {
                minLength?: number | undefined;
                maxLength?: number | undefined;
                pattern?: string | undefined;
            }>;
        }>, "strip", zod.ZodTypeAny, {
            options: {
                minLength?: number | undefined;
                maxLength?: number | undefined;
                pattern?: string | undefined;
            };
            type: "TEXT";
            name: string;
            label: string;
            visibility: string;
            placeholder?: string | undefined;
            helperText?: string | undefined;
            required?: boolean | undefined;
        }, {
            options: {
                minLength?: number | undefined;
                maxLength?: number | undefined;
                pattern?: string | undefined;
            };
            type: "TEXT";
            name: string;
            label: string;
            visibility: string;
            placeholder?: string | undefined;
            helperText?: string | undefined;
            required?: boolean | undefined;
        }>, zod.ZodObject<zod.objectUtil.extendShape<{
            name: zod.ZodString;
            label: zod.ZodString;
            placeholder: zod.ZodOptional<zod.ZodString>;
            helperText: zod.ZodOptional<zod.ZodString>;
            visibility: zod.ZodString;
            required: zod.ZodOptional<zod.ZodBoolean>;
        }, {
            type: zod.ZodLiteral<"SELECT">;
            options: zod.ZodObject<{
                isMulti: zod.ZodBoolean;
                optionList: zod.ZodArray<zod.ZodString, "many">;
                maxSelect: zod.ZodNullable<zod.ZodNumber>;
                minSelect: zod.ZodNullable<zod.ZodNumber>;
            }, "strip", zod.ZodTypeAny, {
                isMulti: boolean;
                optionList: string[];
                maxSelect: number | null;
                minSelect: number | null;
            }, {
                isMulti: boolean;
                optionList: string[];
                maxSelect: number | null;
                minSelect: number | null;
            }>;
        }>, "strip", zod.ZodTypeAny, {
            options: {
                isMulti: boolean;
                optionList: string[];
                maxSelect: number | null;
                minSelect: number | null;
            };
            type: "SELECT";
            name: string;
            label: string;
            visibility: string;
            placeholder?: string | undefined;
            helperText?: string | undefined;
            required?: boolean | undefined;
        }, {
            options: {
                isMulti: boolean;
                optionList: string[];
                maxSelect: number | null;
                minSelect: number | null;
            };
            type: "SELECT";
            name: string;
            label: string;
            visibility: string;
            placeholder?: string | undefined;
            helperText?: string | undefined;
            required?: boolean | undefined;
        }>, zod.ZodObject<zod.objectUtil.extendShape<{
            name: zod.ZodString;
            label: zod.ZodString;
            placeholder: zod.ZodOptional<zod.ZodString>;
            helperText: zod.ZodOptional<zod.ZodString>;
            visibility: zod.ZodString;
            required: zod.ZodOptional<zod.ZodBoolean>;
        }, {
            type: zod.ZodLiteral<"DATETIME">;
            options: zod.ZodObject<{
                min: zod.ZodOptional<zod.ZodString>;
                max: zod.ZodOptional<zod.ZodString>;
            }, "strip", zod.ZodTypeAny, {
                min?: string | undefined;
                max?: string | undefined;
            }, {
                min?: string | undefined;
                max?: string | undefined;
            }>;
        }>, "strip", zod.ZodTypeAny, {
            options: {
                min?: string | undefined;
                max?: string | undefined;
            };
            type: "DATETIME";
            name: string;
            label: string;
            visibility: string;
            placeholder?: string | undefined;
            helperText?: string | undefined;
            required?: boolean | undefined;
        }, {
            options: {
                min?: string | undefined;
                max?: string | undefined;
            };
            type: "DATETIME";
            name: string;
            label: string;
            visibility: string;
            placeholder?: string | undefined;
            helperText?: string | undefined;
            required?: boolean | undefined;
        }>, zod.ZodObject<zod.objectUtil.extendShape<{
            name: zod.ZodString;
            label: zod.ZodString;
            placeholder: zod.ZodOptional<zod.ZodString>;
            helperText: zod.ZodOptional<zod.ZodString>;
            visibility: zod.ZodString;
            required: zod.ZodOptional<zod.ZodBoolean>;
        }, {
            type: zod.ZodLiteral<"RICHTEXT">;
            options: zod.ZodObject<{
                minLength: zod.ZodOptional<zod.ZodNumber>;
                maxLength: zod.ZodOptional<zod.ZodNumber>;
                disableImages: zod.ZodOptional<zod.ZodBoolean>;
            }, "strip", zod.ZodTypeAny, {
                minLength?: number | undefined;
                maxLength?: number | undefined;
                disableImages?: boolean | undefined;
            }, {
                minLength?: number | undefined;
                maxLength?: number | undefined;
                disableImages?: boolean | undefined;
            }>;
        }>, "strip", zod.ZodTypeAny, {
            options: {
                minLength?: number | undefined;
                maxLength?: number | undefined;
                disableImages?: boolean | undefined;
            };
            type: "RICHTEXT";
            name: string;
            label: string;
            visibility: string;
            placeholder?: string | undefined;
            helperText?: string | undefined;
            required?: boolean | undefined;
        }, {
            options: {
                minLength?: number | undefined;
                maxLength?: number | undefined;
                disableImages?: boolean | undefined;
            };
            type: "RICHTEXT";
            name: string;
            label: string;
            visibility: string;
            placeholder?: string | undefined;
            helperText?: string | undefined;
            required?: boolean | undefined;
        }>, zod.ZodObject<zod.objectUtil.extendShape<{
            name: zod.ZodString;
            type: zod.ZodString;
        }, {
            type: zod.ZodLiteral<"SEPARATOR">;
        }>, "strip", zod.ZodTypeAny, {
            type: "SEPARATOR";
            name: string;
        }, {
            type: "SEPARATOR";
            name: string;
        }>]>, "many">;
        fields: zod.ZodArray<zod.ZodObject<{
            name: zod.ZodString;
            type: zod.ZodString;
            value: zod.ZodAny;
        }, "strip", zod.ZodTypeAny, {
            type: string;
            name: string;
            value?: any;
        }, {
            type: string;
            name: string;
            value?: any;
        }>, "many">;
        points: zod.ZodNumber;
        commentsCount: zod.ZodNumber;
        authorId: zod.ZodString;
        projectId: zod.ZodString;
        isSuspend: zod.ZodOptional<zod.ZodBoolean>;
        visibility: zod.ZodString;
        lastChangeAt: zod.ZodDate;
        createdAt: zod.ZodDate;
    }, {
        id: zod.ZodString;
        title: zod.ZodString;
        tags: zod.ZodArray<zod.ZodObject<{
            id: zod.ZodString;
            displayName: zod.ZodString;
            name: zod.ZodString;
            color: zod.ZodString;
            description: zod.ZodString;
        }, "strip", zod.ZodTypeAny, {
            id: string;
            name: string;
            description: string;
            displayName: string;
            color: string;
        }, {
            id: string;
            name: string;
            description: string;
            displayName: string;
            color: string;
        }>, "many">;
        state: zod.ZodString;
        key: zod.ZodString;
        points: zod.ZodNumber;
        commentsCount: zod.ZodNumber;
        fields: zod.ZodArray<zod.ZodObject<{
            name: zod.ZodString;
            type: zod.ZodString;
            value: zod.ZodAny;
        }, "strip", zod.ZodTypeAny, {
            type: string;
            name: string;
            value?: any;
        }, {
            type: string;
            name: string;
            value?: any;
        }>, "many">;
        author: zod.ZodObject<{
            id: zod.ZodString;
            username: zod.ZodString;
            email: zod.ZodString;
            roleName: zod.ZodString;
            roleDisplayName: zod.ZodString;
        }, "strip", zod.ZodTypeAny, {
            id: string;
            username: string;
            email: string;
            roleDisplayName: string;
            roleName: string;
        }, {
            id: string;
            username: string;
            email: string;
            roleDisplayName: string;
            roleName: string;
        }>;
        project: zod.ZodObject<{
            id: zod.ZodString;
            slug: zod.ZodString;
            name: zod.ZodString;
            displayName: zod.ZodString;
        }, "strip", zod.ZodTypeAny, {
            id: string;
            name: string;
            slug: string;
            displayName: string;
        }, {
            id: string;
            name: string;
            slug: string;
            displayName: string;
        }>;
        group: zod.ZodObject<{
            id: zod.ZodString;
            slug: zod.ZodString;
            name: zod.ZodString;
            displayName: zod.ZodString;
        }, "strip", zod.ZodTypeAny, {
            id: string;
            name: string;
            slug: string;
            displayName: string;
        }, {
            id: string;
            name: string;
            slug: string;
            displayName: string;
        }>;
        isSuspend: zod.ZodOptional<zod.ZodBoolean>;
        visibility: zod.ZodString;
        lastChangeAt: zod.ZodDate;
        createdAt: zod.ZodDate;
    }>, {
        operations: zod.ZodObject<{
            canBlock: zod.ZodBoolean;
            canDelete: zod.ZodBoolean;
            canUpdateState: zod.ZodBoolean;
            canEditFields: zod.ZodBoolean;
            canEditInternalFields: zod.ZodBoolean;
            canEditHiddenFields: zod.ZodBoolean;
            canUpdateConfidents: zod.ZodBoolean;
            canBlockComments: zod.ZodBoolean;
            canDeleteComments: zod.ZodBoolean;
            canUpdateTags: zod.ZodBoolean;
            canUpdateVisibility: zod.ZodBoolean;
        }, "strip", zod.ZodTypeAny, {
            canBlock: boolean;
            canDelete: boolean;
            canUpdateState: boolean;
            canEditFields: boolean;
            canEditInternalFields: boolean;
            canEditHiddenFields: boolean;
            canUpdateConfidents: boolean;
            canBlockComments: boolean;
            canDeleteComments: boolean;
            canUpdateTags: boolean;
            canUpdateVisibility: boolean;
        }, {
            canBlock: boolean;
            canDelete: boolean;
            canUpdateState: boolean;
            canEditFields: boolean;
            canEditInternalFields: boolean;
            canEditHiddenFields: boolean;
            canUpdateConfidents: boolean;
            canBlockComments: boolean;
            canDeleteComments: boolean;
            canUpdateTags: boolean;
            canUpdateVisibility: boolean;
        }>;
        isUpvotedByMe: zod.ZodBoolean;
        isDownvotedByMe: zod.ZodBoolean;
    }>, "strip", zod.ZodTypeAny, {
        id: string;
        authorId: string;
        createdAt: Date;
        title: string;
        key: string;
        tags: {
            id: string;
            name: string;
            description: string;
            displayName: string;
            color: string;
        }[];
        author: {
            id: string;
            username: string;
            email: string;
            roleDisplayName: string;
            roleName: string;
        };
        visibility: string;
        projectId: string;
        schema: ({
            options: {
                min?: number | undefined;
                max?: number | undefined;
                noDecimal?: boolean | undefined;
            };
            type: "NUMBER";
            name: string;
            label: string;
            visibility: string;
            placeholder?: string | undefined;
            helperText?: string | undefined;
            required?: boolean | undefined;
        } | {
            options: {
                minLength?: number | undefined;
                maxLength?: number | undefined;
                pattern?: string | undefined;
            };
            type: "TEXT";
            name: string;
            label: string;
            visibility: string;
            placeholder?: string | undefined;
            helperText?: string | undefined;
            required?: boolean | undefined;
        } | {
            options: {
                isMulti: boolean;
                optionList: string[];
                maxSelect: number | null;
                minSelect: number | null;
            };
            type: "SELECT";
            name: string;
            label: string;
            visibility: string;
            placeholder?: string | undefined;
            helperText?: string | undefined;
            required?: boolean | undefined;
        } | {
            options: {
                min?: string | undefined;
                max?: string | undefined;
            };
            type: "DATETIME";
            name: string;
            label: string;
            visibility: string;
            placeholder?: string | undefined;
            helperText?: string | undefined;
            required?: boolean | undefined;
        } | {
            options: {
                minLength?: number | undefined;
                maxLength?: number | undefined;
                disableImages?: boolean | undefined;
            };
            type: "RICHTEXT";
            name: string;
            label: string;
            visibility: string;
            placeholder?: string | undefined;
            helperText?: string | undefined;
            required?: boolean | undefined;
        } | {
            type: "SEPARATOR";
            name: string;
        })[];
        state: string;
        points: number;
        commentsCount: number;
        fields: {
            type: string;
            name: string;
            value?: any;
        }[];
        lastChangeAt: Date;
        project: {
            id: string;
            name: string;
            slug: string;
            displayName: string;
        };
        group: {
            id: string;
            name: string;
            slug: string;
            displayName: string;
        };
        operations: {
            canBlock: boolean;
            canDelete: boolean;
            canUpdateState: boolean;
            canEditFields: boolean;
            canEditInternalFields: boolean;
            canEditHiddenFields: boolean;
            canUpdateConfidents: boolean;
            canBlockComments: boolean;
            canDeleteComments: boolean;
            canUpdateTags: boolean;
            canUpdateVisibility: boolean;
        };
        isUpvotedByMe: boolean;
        isDownvotedByMe: boolean;
        isSuspend?: boolean | undefined;
    }, {
        id: string;
        authorId: string;
        createdAt: Date;
        title: string;
        key: string;
        tags: {
            id: string;
            name: string;
            description: string;
            displayName: string;
            color: string;
        }[];
        author: {
            id: string;
            username: string;
            email: string;
            roleDisplayName: string;
            roleName: string;
        };
        visibility: string;
        projectId: string;
        schema: ({
            options: {
                min?: number | undefined;
                max?: number | undefined;
                noDecimal?: boolean | undefined;
            };
            type: "NUMBER";
            name: string;
            label: string;
            visibility: string;
            placeholder?: string | undefined;
            helperText?: string | undefined;
            required?: boolean | undefined;
        } | {
            options: {
                minLength?: number | undefined;
                maxLength?: number | undefined;
                pattern?: string | undefined;
            };
            type: "TEXT";
            name: string;
            label: string;
            visibility: string;
            placeholder?: string | undefined;
            helperText?: string | undefined;
            required?: boolean | undefined;
        } | {
            options: {
                isMulti: boolean;
                optionList: string[];
                maxSelect: number | null;
                minSelect: number | null;
            };
            type: "SELECT";
            name: string;
            label: string;
            visibility: string;
            placeholder?: string | undefined;
            helperText?: string | undefined;
            required?: boolean | undefined;
        } | {
            options: {
                min?: string | undefined;
                max?: string | undefined;
            };
            type: "DATETIME";
            name: string;
            label: string;
            visibility: string;
            placeholder?: string | undefined;
            helperText?: string | undefined;
            required?: boolean | undefined;
        } | {
            options: {
                minLength?: number | undefined;
                maxLength?: number | undefined;
                disableImages?: boolean | undefined;
            };
            type: "RICHTEXT";
            name: string;
            label: string;
            visibility: string;
            placeholder?: string | undefined;
            helperText?: string | undefined;
            required?: boolean | undefined;
        } | {
            type: "SEPARATOR";
            name: string;
        })[];
        state: string;
        points: number;
        commentsCount: number;
        fields: {
            type: string;
            name: string;
            value?: any;
        }[];
        lastChangeAt: Date;
        project: {
            id: string;
            name: string;
            slug: string;
            displayName: string;
        };
        group: {
            id: string;
            name: string;
            slug: string;
            displayName: string;
        };
        operations: {
            canBlock: boolean;
            canDelete: boolean;
            canUpdateState: boolean;
            canEditFields: boolean;
            canEditInternalFields: boolean;
            canEditHiddenFields: boolean;
            canUpdateConfidents: boolean;
            canBlockComments: boolean;
            canDeleteComments: boolean;
            canUpdateTags: boolean;
            canUpdateVisibility: boolean;
        };
        isUpvotedByMe: boolean;
        isDownvotedByMe: boolean;
        isSuspend?: boolean | undefined;
    }>;
    ConfidentialDTO: zod.ZodObject<zod.objectUtil.extendShape<zod.objectUtil.extendShape<{
        id: zod.ZodString;
        title: zod.ZodString;
        tags: zod.ZodArray<zod.ZodString, "many">;
        state: zod.ZodString;
        key: zod.ZodString;
        schema: zod.ZodArray<zod.ZodDiscriminatedUnion<"type", [zod.ZodObject<zod.objectUtil.extendShape<{
            name: zod.ZodString;
            label: zod.ZodString;
            placeholder: zod.ZodOptional<zod.ZodString>;
            helperText: zod.ZodOptional<zod.ZodString>;
            visibility: zod.ZodString;
            required: zod.ZodOptional<zod.ZodBoolean>;
        }, {
            type: zod.ZodLiteral<"NUMBER">;
            options: zod.ZodObject<{
                min: zod.ZodOptional<zod.ZodNumber>;
                max: zod.ZodOptional<zod.ZodNumber>;
                noDecimal: zod.ZodOptional<zod.ZodBoolean>;
            }, "strip", zod.ZodTypeAny, {
                min?: number | undefined;
                max?: number | undefined;
                noDecimal?: boolean | undefined;
            }, {
                min?: number | undefined;
                max?: number | undefined;
                noDecimal?: boolean | undefined;
            }>;
        }>, "strip", zod.ZodTypeAny, {
            options: {
                min?: number | undefined;
                max?: number | undefined;
                noDecimal?: boolean | undefined;
            };
            type: "NUMBER";
            name: string;
            label: string;
            visibility: string;
            placeholder?: string | undefined;
            helperText?: string | undefined;
            required?: boolean | undefined;
        }, {
            options: {
                min?: number | undefined;
                max?: number | undefined;
                noDecimal?: boolean | undefined;
            };
            type: "NUMBER";
            name: string;
            label: string;
            visibility: string;
            placeholder?: string | undefined;
            helperText?: string | undefined;
            required?: boolean | undefined;
        }>, zod.ZodObject<zod.objectUtil.extendShape<{
            name: zod.ZodString;
            label: zod.ZodString;
            placeholder: zod.ZodOptional<zod.ZodString>;
            helperText: zod.ZodOptional<zod.ZodString>;
            visibility: zod.ZodString;
            required: zod.ZodOptional<zod.ZodBoolean>;
        }, {
            type: zod.ZodLiteral<"TEXT">;
            options: zod.ZodObject<{
                minLength: zod.ZodOptional<zod.ZodNumber>;
                maxLength: zod.ZodOptional<zod.ZodNumber>;
                pattern: zod.ZodOptional<zod.ZodString>;
            }, "strip", zod.ZodTypeAny, {
                minLength?: number | undefined;
                maxLength?: number | undefined;
                pattern?: string | undefined;
            }, {
                minLength?: number | undefined;
                maxLength?: number | undefined;
                pattern?: string | undefined;
            }>;
        }>, "strip", zod.ZodTypeAny, {
            options: {
                minLength?: number | undefined;
                maxLength?: number | undefined;
                pattern?: string | undefined;
            };
            type: "TEXT";
            name: string;
            label: string;
            visibility: string;
            placeholder?: string | undefined;
            helperText?: string | undefined;
            required?: boolean | undefined;
        }, {
            options: {
                minLength?: number | undefined;
                maxLength?: number | undefined;
                pattern?: string | undefined;
            };
            type: "TEXT";
            name: string;
            label: string;
            visibility: string;
            placeholder?: string | undefined;
            helperText?: string | undefined;
            required?: boolean | undefined;
        }>, zod.ZodObject<zod.objectUtil.extendShape<{
            name: zod.ZodString;
            label: zod.ZodString;
            placeholder: zod.ZodOptional<zod.ZodString>;
            helperText: zod.ZodOptional<zod.ZodString>;
            visibility: zod.ZodString;
            required: zod.ZodOptional<zod.ZodBoolean>;
        }, {
            type: zod.ZodLiteral<"SELECT">;
            options: zod.ZodObject<{
                isMulti: zod.ZodBoolean;
                optionList: zod.ZodArray<zod.ZodString, "many">;
                maxSelect: zod.ZodNullable<zod.ZodNumber>;
                minSelect: zod.ZodNullable<zod.ZodNumber>;
            }, "strip", zod.ZodTypeAny, {
                isMulti: boolean;
                optionList: string[];
                maxSelect: number | null;
                minSelect: number | null;
            }, {
                isMulti: boolean;
                optionList: string[];
                maxSelect: number | null;
                minSelect: number | null;
            }>;
        }>, "strip", zod.ZodTypeAny, {
            options: {
                isMulti: boolean;
                optionList: string[];
                maxSelect: number | null;
                minSelect: number | null;
            };
            type: "SELECT";
            name: string;
            label: string;
            visibility: string;
            placeholder?: string | undefined;
            helperText?: string | undefined;
            required?: boolean | undefined;
        }, {
            options: {
                isMulti: boolean;
                optionList: string[];
                maxSelect: number | null;
                minSelect: number | null;
            };
            type: "SELECT";
            name: string;
            label: string;
            visibility: string;
            placeholder?: string | undefined;
            helperText?: string | undefined;
            required?: boolean | undefined;
        }>, zod.ZodObject<zod.objectUtil.extendShape<{
            name: zod.ZodString;
            label: zod.ZodString;
            placeholder: zod.ZodOptional<zod.ZodString>;
            helperText: zod.ZodOptional<zod.ZodString>;
            visibility: zod.ZodString;
            required: zod.ZodOptional<zod.ZodBoolean>;
        }, {
            type: zod.ZodLiteral<"DATETIME">;
            options: zod.ZodObject<{
                min: zod.ZodOptional<zod.ZodString>;
                max: zod.ZodOptional<zod.ZodString>;
            }, "strip", zod.ZodTypeAny, {
                min?: string | undefined;
                max?: string | undefined;
            }, {
                min?: string | undefined;
                max?: string | undefined;
            }>;
        }>, "strip", zod.ZodTypeAny, {
            options: {
                min?: string | undefined;
                max?: string | undefined;
            };
            type: "DATETIME";
            name: string;
            label: string;
            visibility: string;
            placeholder?: string | undefined;
            helperText?: string | undefined;
            required?: boolean | undefined;
        }, {
            options: {
                min?: string | undefined;
                max?: string | undefined;
            };
            type: "DATETIME";
            name: string;
            label: string;
            visibility: string;
            placeholder?: string | undefined;
            helperText?: string | undefined;
            required?: boolean | undefined;
        }>, zod.ZodObject<zod.objectUtil.extendShape<{
            name: zod.ZodString;
            label: zod.ZodString;
            placeholder: zod.ZodOptional<zod.ZodString>;
            helperText: zod.ZodOptional<zod.ZodString>;
            visibility: zod.ZodString;
            required: zod.ZodOptional<zod.ZodBoolean>;
        }, {
            type: zod.ZodLiteral<"RICHTEXT">;
            options: zod.ZodObject<{
                minLength: zod.ZodOptional<zod.ZodNumber>;
                maxLength: zod.ZodOptional<zod.ZodNumber>;
                disableImages: zod.ZodOptional<zod.ZodBoolean>;
            }, "strip", zod.ZodTypeAny, {
                minLength?: number | undefined;
                maxLength?: number | undefined;
                disableImages?: boolean | undefined;
            }, {
                minLength?: number | undefined;
                maxLength?: number | undefined;
                disableImages?: boolean | undefined;
            }>;
        }>, "strip", zod.ZodTypeAny, {
            options: {
                minLength?: number | undefined;
                maxLength?: number | undefined;
                disableImages?: boolean | undefined;
            };
            type: "RICHTEXT";
            name: string;
            label: string;
            visibility: string;
            placeholder?: string | undefined;
            helperText?: string | undefined;
            required?: boolean | undefined;
        }, {
            options: {
                minLength?: number | undefined;
                maxLength?: number | undefined;
                disableImages?: boolean | undefined;
            };
            type: "RICHTEXT";
            name: string;
            label: string;
            visibility: string;
            placeholder?: string | undefined;
            helperText?: string | undefined;
            required?: boolean | undefined;
        }>, zod.ZodObject<zod.objectUtil.extendShape<{
            name: zod.ZodString;
            type: zod.ZodString;
        }, {
            type: zod.ZodLiteral<"SEPARATOR">;
        }>, "strip", zod.ZodTypeAny, {
            type: "SEPARATOR";
            name: string;
        }, {
            type: "SEPARATOR";
            name: string;
        }>]>, "many">;
        fields: zod.ZodArray<zod.ZodObject<{
            name: zod.ZodString;
            type: zod.ZodString;
            value: zod.ZodAny;
        }, "strip", zod.ZodTypeAny, {
            type: string;
            name: string;
            value?: any;
        }, {
            type: string;
            name: string;
            value?: any;
        }>, "many">;
        points: zod.ZodNumber;
        commentsCount: zod.ZodNumber;
        authorId: zod.ZodString;
        projectId: zod.ZodString;
        isSuspend: zod.ZodOptional<zod.ZodBoolean>;
        visibility: zod.ZodString;
        lastChangeAt: zod.ZodDate;
        createdAt: zod.ZodDate;
    }, {}>, {
        updatedAt: zod.ZodDate;
    }>, "strip", zod.ZodTypeAny, {
        id: string;
        authorId: string;
        createdAt: Date;
        updatedAt: Date;
        title: string;
        key: string;
        tags: string[];
        visibility: string;
        projectId: string;
        schema: ({
            options: {
                min?: number | undefined;
                max?: number | undefined;
                noDecimal?: boolean | undefined;
            };
            type: "NUMBER";
            name: string;
            label: string;
            visibility: string;
            placeholder?: string | undefined;
            helperText?: string | undefined;
            required?: boolean | undefined;
        } | {
            options: {
                minLength?: number | undefined;
                maxLength?: number | undefined;
                pattern?: string | undefined;
            };
            type: "TEXT";
            name: string;
            label: string;
            visibility: string;
            placeholder?: string | undefined;
            helperText?: string | undefined;
            required?: boolean | undefined;
        } | {
            options: {
                isMulti: boolean;
                optionList: string[];
                maxSelect: number | null;
                minSelect: number | null;
            };
            type: "SELECT";
            name: string;
            label: string;
            visibility: string;
            placeholder?: string | undefined;
            helperText?: string | undefined;
            required?: boolean | undefined;
        } | {
            options: {
                min?: string | undefined;
                max?: string | undefined;
            };
            type: "DATETIME";
            name: string;
            label: string;
            visibility: string;
            placeholder?: string | undefined;
            helperText?: string | undefined;
            required?: boolean | undefined;
        } | {
            options: {
                minLength?: number | undefined;
                maxLength?: number | undefined;
                disableImages?: boolean | undefined;
            };
            type: "RICHTEXT";
            name: string;
            label: string;
            visibility: string;
            placeholder?: string | undefined;
            helperText?: string | undefined;
            required?: boolean | undefined;
        } | {
            type: "SEPARATOR";
            name: string;
        })[];
        state: string;
        points: number;
        commentsCount: number;
        fields: {
            type: string;
            name: string;
            value?: any;
        }[];
        lastChangeAt: Date;
        isSuspend?: boolean | undefined;
    }, {
        id: string;
        authorId: string;
        createdAt: Date;
        updatedAt: Date;
        title: string;
        key: string;
        tags: string[];
        visibility: string;
        projectId: string;
        schema: ({
            options: {
                min?: number | undefined;
                max?: number | undefined;
                noDecimal?: boolean | undefined;
            };
            type: "NUMBER";
            name: string;
            label: string;
            visibility: string;
            placeholder?: string | undefined;
            helperText?: string | undefined;
            required?: boolean | undefined;
        } | {
            options: {
                minLength?: number | undefined;
                maxLength?: number | undefined;
                pattern?: string | undefined;
            };
            type: "TEXT";
            name: string;
            label: string;
            visibility: string;
            placeholder?: string | undefined;
            helperText?: string | undefined;
            required?: boolean | undefined;
        } | {
            options: {
                isMulti: boolean;
                optionList: string[];
                maxSelect: number | null;
                minSelect: number | null;
            };
            type: "SELECT";
            name: string;
            label: string;
            visibility: string;
            placeholder?: string | undefined;
            helperText?: string | undefined;
            required?: boolean | undefined;
        } | {
            options: {
                min?: string | undefined;
                max?: string | undefined;
            };
            type: "DATETIME";
            name: string;
            label: string;
            visibility: string;
            placeholder?: string | undefined;
            helperText?: string | undefined;
            required?: boolean | undefined;
        } | {
            options: {
                minLength?: number | undefined;
                maxLength?: number | undefined;
                disableImages?: boolean | undefined;
            };
            type: "RICHTEXT";
            name: string;
            label: string;
            visibility: string;
            placeholder?: string | undefined;
            helperText?: string | undefined;
            required?: boolean | undefined;
        } | {
            type: "SEPARATOR";
            name: string;
        })[];
        state: string;
        points: number;
        commentsCount: number;
        fields: {
            type: string;
            name: string;
            value?: any;
        }[];
        lastChangeAt: Date;
        isSuspend?: boolean | undefined;
    }>;
    ConfidentialDetailsDTO: zod.ZodObject<zod.objectUtil.extendShape<zod.objectUtil.extendShape<zod.objectUtil.extendShape<{
        id: zod.ZodString;
        title: zod.ZodString;
        tags: zod.ZodArray<zod.ZodString, "many">;
        state: zod.ZodString;
        key: zod.ZodString;
        schema: zod.ZodArray<zod.ZodDiscriminatedUnion<"type", [zod.ZodObject<zod.objectUtil.extendShape<{
            name: zod.ZodString;
            label: zod.ZodString;
            placeholder: zod.ZodOptional<zod.ZodString>;
            helperText: zod.ZodOptional<zod.ZodString>;
            visibility: zod.ZodString;
            required: zod.ZodOptional<zod.ZodBoolean>;
        }, {
            type: zod.ZodLiteral<"NUMBER">;
            options: zod.ZodObject<{
                min: zod.ZodOptional<zod.ZodNumber>;
                max: zod.ZodOptional<zod.ZodNumber>;
                noDecimal: zod.ZodOptional<zod.ZodBoolean>;
            }, "strip", zod.ZodTypeAny, {
                min?: number | undefined;
                max?: number | undefined;
                noDecimal?: boolean | undefined;
            }, {
                min?: number | undefined;
                max?: number | undefined;
                noDecimal?: boolean | undefined;
            }>;
        }>, "strip", zod.ZodTypeAny, {
            options: {
                min?: number | undefined;
                max?: number | undefined;
                noDecimal?: boolean | undefined;
            };
            type: "NUMBER";
            name: string;
            label: string;
            visibility: string;
            placeholder?: string | undefined;
            helperText?: string | undefined;
            required?: boolean | undefined;
        }, {
            options: {
                min?: number | undefined;
                max?: number | undefined;
                noDecimal?: boolean | undefined;
            };
            type: "NUMBER";
            name: string;
            label: string;
            visibility: string;
            placeholder?: string | undefined;
            helperText?: string | undefined;
            required?: boolean | undefined;
        }>, zod.ZodObject<zod.objectUtil.extendShape<{
            name: zod.ZodString;
            label: zod.ZodString;
            placeholder: zod.ZodOptional<zod.ZodString>;
            helperText: zod.ZodOptional<zod.ZodString>;
            visibility: zod.ZodString;
            required: zod.ZodOptional<zod.ZodBoolean>;
        }, {
            type: zod.ZodLiteral<"TEXT">;
            options: zod.ZodObject<{
                minLength: zod.ZodOptional<zod.ZodNumber>;
                maxLength: zod.ZodOptional<zod.ZodNumber>;
                pattern: zod.ZodOptional<zod.ZodString>;
            }, "strip", zod.ZodTypeAny, {
                minLength?: number | undefined;
                maxLength?: number | undefined;
                pattern?: string | undefined;
            }, {
                minLength?: number | undefined;
                maxLength?: number | undefined;
                pattern?: string | undefined;
            }>;
        }>, "strip", zod.ZodTypeAny, {
            options: {
                minLength?: number | undefined;
                maxLength?: number | undefined;
                pattern?: string | undefined;
            };
            type: "TEXT";
            name: string;
            label: string;
            visibility: string;
            placeholder?: string | undefined;
            helperText?: string | undefined;
            required?: boolean | undefined;
        }, {
            options: {
                minLength?: number | undefined;
                maxLength?: number | undefined;
                pattern?: string | undefined;
            };
            type: "TEXT";
            name: string;
            label: string;
            visibility: string;
            placeholder?: string | undefined;
            helperText?: string | undefined;
            required?: boolean | undefined;
        }>, zod.ZodObject<zod.objectUtil.extendShape<{
            name: zod.ZodString;
            label: zod.ZodString;
            placeholder: zod.ZodOptional<zod.ZodString>;
            helperText: zod.ZodOptional<zod.ZodString>;
            visibility: zod.ZodString;
            required: zod.ZodOptional<zod.ZodBoolean>;
        }, {
            type: zod.ZodLiteral<"SELECT">;
            options: zod.ZodObject<{
                isMulti: zod.ZodBoolean;
                optionList: zod.ZodArray<zod.ZodString, "many">;
                maxSelect: zod.ZodNullable<zod.ZodNumber>;
                minSelect: zod.ZodNullable<zod.ZodNumber>;
            }, "strip", zod.ZodTypeAny, {
                isMulti: boolean;
                optionList: string[];
                maxSelect: number | null;
                minSelect: number | null;
            }, {
                isMulti: boolean;
                optionList: string[];
                maxSelect: number | null;
                minSelect: number | null;
            }>;
        }>, "strip", zod.ZodTypeAny, {
            options: {
                isMulti: boolean;
                optionList: string[];
                maxSelect: number | null;
                minSelect: number | null;
            };
            type: "SELECT";
            name: string;
            label: string;
            visibility: string;
            placeholder?: string | undefined;
            helperText?: string | undefined;
            required?: boolean | undefined;
        }, {
            options: {
                isMulti: boolean;
                optionList: string[];
                maxSelect: number | null;
                minSelect: number | null;
            };
            type: "SELECT";
            name: string;
            label: string;
            visibility: string;
            placeholder?: string | undefined;
            helperText?: string | undefined;
            required?: boolean | undefined;
        }>, zod.ZodObject<zod.objectUtil.extendShape<{
            name: zod.ZodString;
            label: zod.ZodString;
            placeholder: zod.ZodOptional<zod.ZodString>;
            helperText: zod.ZodOptional<zod.ZodString>;
            visibility: zod.ZodString;
            required: zod.ZodOptional<zod.ZodBoolean>;
        }, {
            type: zod.ZodLiteral<"DATETIME">;
            options: zod.ZodObject<{
                min: zod.ZodOptional<zod.ZodString>;
                max: zod.ZodOptional<zod.ZodString>;
            }, "strip", zod.ZodTypeAny, {
                min?: string | undefined;
                max?: string | undefined;
            }, {
                min?: string | undefined;
                max?: string | undefined;
            }>;
        }>, "strip", zod.ZodTypeAny, {
            options: {
                min?: string | undefined;
                max?: string | undefined;
            };
            type: "DATETIME";
            name: string;
            label: string;
            visibility: string;
            placeholder?: string | undefined;
            helperText?: string | undefined;
            required?: boolean | undefined;
        }, {
            options: {
                min?: string | undefined;
                max?: string | undefined;
            };
            type: "DATETIME";
            name: string;
            label: string;
            visibility: string;
            placeholder?: string | undefined;
            helperText?: string | undefined;
            required?: boolean | undefined;
        }>, zod.ZodObject<zod.objectUtil.extendShape<{
            name: zod.ZodString;
            label: zod.ZodString;
            placeholder: zod.ZodOptional<zod.ZodString>;
            helperText: zod.ZodOptional<zod.ZodString>;
            visibility: zod.ZodString;
            required: zod.ZodOptional<zod.ZodBoolean>;
        }, {
            type: zod.ZodLiteral<"RICHTEXT">;
            options: zod.ZodObject<{
                minLength: zod.ZodOptional<zod.ZodNumber>;
                maxLength: zod.ZodOptional<zod.ZodNumber>;
                disableImages: zod.ZodOptional<zod.ZodBoolean>;
            }, "strip", zod.ZodTypeAny, {
                minLength?: number | undefined;
                maxLength?: number | undefined;
                disableImages?: boolean | undefined;
            }, {
                minLength?: number | undefined;
                maxLength?: number | undefined;
                disableImages?: boolean | undefined;
            }>;
        }>, "strip", zod.ZodTypeAny, {
            options: {
                minLength?: number | undefined;
                maxLength?: number | undefined;
                disableImages?: boolean | undefined;
            };
            type: "RICHTEXT";
            name: string;
            label: string;
            visibility: string;
            placeholder?: string | undefined;
            helperText?: string | undefined;
            required?: boolean | undefined;
        }, {
            options: {
                minLength?: number | undefined;
                maxLength?: number | undefined;
                disableImages?: boolean | undefined;
            };
            type: "RICHTEXT";
            name: string;
            label: string;
            visibility: string;
            placeholder?: string | undefined;
            helperText?: string | undefined;
            required?: boolean | undefined;
        }>, zod.ZodObject<zod.objectUtil.extendShape<{
            name: zod.ZodString;
            type: zod.ZodString;
        }, {
            type: zod.ZodLiteral<"SEPARATOR">;
        }>, "strip", zod.ZodTypeAny, {
            type: "SEPARATOR";
            name: string;
        }, {
            type: "SEPARATOR";
            name: string;
        }>]>, "many">;
        fields: zod.ZodArray<zod.ZodObject<{
            name: zod.ZodString;
            type: zod.ZodString;
            value: zod.ZodAny;
        }, "strip", zod.ZodTypeAny, {
            type: string;
            name: string;
            value?: any;
        }, {
            type: string;
            name: string;
            value?: any;
        }>, "many">;
        points: zod.ZodNumber;
        commentsCount: zod.ZodNumber;
        authorId: zod.ZodString;
        projectId: zod.ZodString;
        isSuspend: zod.ZodOptional<zod.ZodBoolean>;
        visibility: zod.ZodString;
        lastChangeAt: zod.ZodDate;
        createdAt: zod.ZodDate;
    }, {
        id: zod.ZodString;
        title: zod.ZodString;
        tags: zod.ZodArray<zod.ZodObject<{
            id: zod.ZodString;
            displayName: zod.ZodString;
            name: zod.ZodString;
            color: zod.ZodString;
            description: zod.ZodString;
        }, "strip", zod.ZodTypeAny, {
            id: string;
            name: string;
            description: string;
            displayName: string;
            color: string;
        }, {
            id: string;
            name: string;
            description: string;
            displayName: string;
            color: string;
        }>, "many">;
        state: zod.ZodString;
        key: zod.ZodString;
        points: zod.ZodNumber;
        commentsCount: zod.ZodNumber;
        fields: zod.ZodArray<zod.ZodObject<{
            name: zod.ZodString;
            type: zod.ZodString;
            value: zod.ZodAny;
        }, "strip", zod.ZodTypeAny, {
            type: string;
            name: string;
            value?: any;
        }, {
            type: string;
            name: string;
            value?: any;
        }>, "many">;
        author: zod.ZodObject<{
            id: zod.ZodString;
            username: zod.ZodString;
            email: zod.ZodString;
            roleName: zod.ZodString;
            roleDisplayName: zod.ZodString;
        }, "strip", zod.ZodTypeAny, {
            id: string;
            username: string;
            email: string;
            roleDisplayName: string;
            roleName: string;
        }, {
            id: string;
            username: string;
            email: string;
            roleDisplayName: string;
            roleName: string;
        }>;
        project: zod.ZodObject<{
            id: zod.ZodString;
            slug: zod.ZodString;
            name: zod.ZodString;
            displayName: zod.ZodString;
        }, "strip", zod.ZodTypeAny, {
            id: string;
            name: string;
            slug: string;
            displayName: string;
        }, {
            id: string;
            name: string;
            slug: string;
            displayName: string;
        }>;
        group: zod.ZodObject<{
            id: zod.ZodString;
            slug: zod.ZodString;
            name: zod.ZodString;
            displayName: zod.ZodString;
        }, "strip", zod.ZodTypeAny, {
            id: string;
            name: string;
            slug: string;
            displayName: string;
        }, {
            id: string;
            name: string;
            slug: string;
            displayName: string;
        }>;
        isSuspend: zod.ZodOptional<zod.ZodBoolean>;
        visibility: zod.ZodString;
        lastChangeAt: zod.ZodDate;
        createdAt: zod.ZodDate;
    }>, {
        operations: zod.ZodObject<{
            canBlock: zod.ZodBoolean;
            canDelete: zod.ZodBoolean;
            canUpdateState: zod.ZodBoolean;
            canEditFields: zod.ZodBoolean;
            canEditInternalFields: zod.ZodBoolean;
            canEditHiddenFields: zod.ZodBoolean;
            canUpdateConfidents: zod.ZodBoolean;
            canBlockComments: zod.ZodBoolean;
            canDeleteComments: zod.ZodBoolean;
            canUpdateTags: zod.ZodBoolean;
            canUpdateVisibility: zod.ZodBoolean;
        }, "strip", zod.ZodTypeAny, {
            canBlock: boolean;
            canDelete: boolean;
            canUpdateState: boolean;
            canEditFields: boolean;
            canEditInternalFields: boolean;
            canEditHiddenFields: boolean;
            canUpdateConfidents: boolean;
            canBlockComments: boolean;
            canDeleteComments: boolean;
            canUpdateTags: boolean;
            canUpdateVisibility: boolean;
        }, {
            canBlock: boolean;
            canDelete: boolean;
            canUpdateState: boolean;
            canEditFields: boolean;
            canEditInternalFields: boolean;
            canEditHiddenFields: boolean;
            canUpdateConfidents: boolean;
            canBlockComments: boolean;
            canDeleteComments: boolean;
            canUpdateTags: boolean;
            canUpdateVisibility: boolean;
        }>;
        isUpvotedByMe: zod.ZodBoolean;
        isDownvotedByMe: zod.ZodBoolean;
    }>, {
        updatedAt: zod.ZodDate;
    }>, "strip", zod.ZodTypeAny, {
        id: string;
        authorId: string;
        createdAt: Date;
        updatedAt: Date;
        title: string;
        key: string;
        tags: {
            id: string;
            name: string;
            description: string;
            displayName: string;
            color: string;
        }[];
        author: {
            id: string;
            username: string;
            email: string;
            roleDisplayName: string;
            roleName: string;
        };
        visibility: string;
        projectId: string;
        schema: ({
            options: {
                min?: number | undefined;
                max?: number | undefined;
                noDecimal?: boolean | undefined;
            };
            type: "NUMBER";
            name: string;
            label: string;
            visibility: string;
            placeholder?: string | undefined;
            helperText?: string | undefined;
            required?: boolean | undefined;
        } | {
            options: {
                minLength?: number | undefined;
                maxLength?: number | undefined;
                pattern?: string | undefined;
            };
            type: "TEXT";
            name: string;
            label: string;
            visibility: string;
            placeholder?: string | undefined;
            helperText?: string | undefined;
            required?: boolean | undefined;
        } | {
            options: {
                isMulti: boolean;
                optionList: string[];
                maxSelect: number | null;
                minSelect: number | null;
            };
            type: "SELECT";
            name: string;
            label: string;
            visibility: string;
            placeholder?: string | undefined;
            helperText?: string | undefined;
            required?: boolean | undefined;
        } | {
            options: {
                min?: string | undefined;
                max?: string | undefined;
            };
            type: "DATETIME";
            name: string;
            label: string;
            visibility: string;
            placeholder?: string | undefined;
            helperText?: string | undefined;
            required?: boolean | undefined;
        } | {
            options: {
                minLength?: number | undefined;
                maxLength?: number | undefined;
                disableImages?: boolean | undefined;
            };
            type: "RICHTEXT";
            name: string;
            label: string;
            visibility: string;
            placeholder?: string | undefined;
            helperText?: string | undefined;
            required?: boolean | undefined;
        } | {
            type: "SEPARATOR";
            name: string;
        })[];
        state: string;
        points: number;
        commentsCount: number;
        fields: {
            type: string;
            name: string;
            value?: any;
        }[];
        lastChangeAt: Date;
        project: {
            id: string;
            name: string;
            slug: string;
            displayName: string;
        };
        group: {
            id: string;
            name: string;
            slug: string;
            displayName: string;
        };
        operations: {
            canBlock: boolean;
            canDelete: boolean;
            canUpdateState: boolean;
            canEditFields: boolean;
            canEditInternalFields: boolean;
            canEditHiddenFields: boolean;
            canUpdateConfidents: boolean;
            canBlockComments: boolean;
            canDeleteComments: boolean;
            canUpdateTags: boolean;
            canUpdateVisibility: boolean;
        };
        isUpvotedByMe: boolean;
        isDownvotedByMe: boolean;
        isSuspend?: boolean | undefined;
    }, {
        id: string;
        authorId: string;
        createdAt: Date;
        updatedAt: Date;
        title: string;
        key: string;
        tags: {
            id: string;
            name: string;
            description: string;
            displayName: string;
            color: string;
        }[];
        author: {
            id: string;
            username: string;
            email: string;
            roleDisplayName: string;
            roleName: string;
        };
        visibility: string;
        projectId: string;
        schema: ({
            options: {
                min?: number | undefined;
                max?: number | undefined;
                noDecimal?: boolean | undefined;
            };
            type: "NUMBER";
            name: string;
            label: string;
            visibility: string;
            placeholder?: string | undefined;
            helperText?: string | undefined;
            required?: boolean | undefined;
        } | {
            options: {
                minLength?: number | undefined;
                maxLength?: number | undefined;
                pattern?: string | undefined;
            };
            type: "TEXT";
            name: string;
            label: string;
            visibility: string;
            placeholder?: string | undefined;
            helperText?: string | undefined;
            required?: boolean | undefined;
        } | {
            options: {
                isMulti: boolean;
                optionList: string[];
                maxSelect: number | null;
                minSelect: number | null;
            };
            type: "SELECT";
            name: string;
            label: string;
            visibility: string;
            placeholder?: string | undefined;
            helperText?: string | undefined;
            required?: boolean | undefined;
        } | {
            options: {
                min?: string | undefined;
                max?: string | undefined;
            };
            type: "DATETIME";
            name: string;
            label: string;
            visibility: string;
            placeholder?: string | undefined;
            helperText?: string | undefined;
            required?: boolean | undefined;
        } | {
            options: {
                minLength?: number | undefined;
                maxLength?: number | undefined;
                disableImages?: boolean | undefined;
            };
            type: "RICHTEXT";
            name: string;
            label: string;
            visibility: string;
            placeholder?: string | undefined;
            helperText?: string | undefined;
            required?: boolean | undefined;
        } | {
            type: "SEPARATOR";
            name: string;
        })[];
        state: string;
        points: number;
        commentsCount: number;
        fields: {
            type: string;
            name: string;
            value?: any;
        }[];
        lastChangeAt: Date;
        project: {
            id: string;
            name: string;
            slug: string;
            displayName: string;
        };
        group: {
            id: string;
            name: string;
            slug: string;
            displayName: string;
        };
        operations: {
            canBlock: boolean;
            canDelete: boolean;
            canUpdateState: boolean;
            canEditFields: boolean;
            canEditInternalFields: boolean;
            canEditHiddenFields: boolean;
            canUpdateConfidents: boolean;
            canBlockComments: boolean;
            canDeleteComments: boolean;
            canUpdateTags: boolean;
            canUpdateVisibility: boolean;
        };
        isUpvotedByMe: boolean;
        isDownvotedByMe: boolean;
        isSuspend?: boolean | undefined;
    }>;
    PublicInListDetailsDTO: zod.ZodObject<Omit<zod.objectUtil.extendShape<{
        id: zod.ZodString;
        title: zod.ZodString;
        tags: zod.ZodArray<zod.ZodString, "many">;
        state: zod.ZodString;
        key: zod.ZodString;
        schema: zod.ZodArray<zod.ZodDiscriminatedUnion<"type", [zod.ZodObject<zod.objectUtil.extendShape<{
            name: zod.ZodString;
            label: zod.ZodString;
            placeholder: zod.ZodOptional<zod.ZodString>;
            helperText: zod.ZodOptional<zod.ZodString>;
            visibility: zod.ZodString;
            required: zod.ZodOptional<zod.ZodBoolean>;
        }, {
            type: zod.ZodLiteral<"NUMBER">;
            options: zod.ZodObject<{
                min: zod.ZodOptional<zod.ZodNumber>;
                max: zod.ZodOptional<zod.ZodNumber>;
                noDecimal: zod.ZodOptional<zod.ZodBoolean>;
            }, "strip", zod.ZodTypeAny, {
                min?: number | undefined;
                max?: number | undefined;
                noDecimal?: boolean | undefined;
            }, {
                min?: number | undefined;
                max?: number | undefined;
                noDecimal?: boolean | undefined;
            }>;
        }>, "strip", zod.ZodTypeAny, {
            options: {
                min?: number | undefined;
                max?: number | undefined;
                noDecimal?: boolean | undefined;
            };
            type: "NUMBER";
            name: string;
            label: string;
            visibility: string;
            placeholder?: string | undefined;
            helperText?: string | undefined;
            required?: boolean | undefined;
        }, {
            options: {
                min?: number | undefined;
                max?: number | undefined;
                noDecimal?: boolean | undefined;
            };
            type: "NUMBER";
            name: string;
            label: string;
            visibility: string;
            placeholder?: string | undefined;
            helperText?: string | undefined;
            required?: boolean | undefined;
        }>, zod.ZodObject<zod.objectUtil.extendShape<{
            name: zod.ZodString;
            label: zod.ZodString;
            placeholder: zod.ZodOptional<zod.ZodString>;
            helperText: zod.ZodOptional<zod.ZodString>;
            visibility: zod.ZodString;
            required: zod.ZodOptional<zod.ZodBoolean>;
        }, {
            type: zod.ZodLiteral<"TEXT">;
            options: zod.ZodObject<{
                minLength: zod.ZodOptional<zod.ZodNumber>;
                maxLength: zod.ZodOptional<zod.ZodNumber>;
                pattern: zod.ZodOptional<zod.ZodString>;
            }, "strip", zod.ZodTypeAny, {
                minLength?: number | undefined;
                maxLength?: number | undefined;
                pattern?: string | undefined;
            }, {
                minLength?: number | undefined;
                maxLength?: number | undefined;
                pattern?: string | undefined;
            }>;
        }>, "strip", zod.ZodTypeAny, {
            options: {
                minLength?: number | undefined;
                maxLength?: number | undefined;
                pattern?: string | undefined;
            };
            type: "TEXT";
            name: string;
            label: string;
            visibility: string;
            placeholder?: string | undefined;
            helperText?: string | undefined;
            required?: boolean | undefined;
        }, {
            options: {
                minLength?: number | undefined;
                maxLength?: number | undefined;
                pattern?: string | undefined;
            };
            type: "TEXT";
            name: string;
            label: string;
            visibility: string;
            placeholder?: string | undefined;
            helperText?: string | undefined;
            required?: boolean | undefined;
        }>, zod.ZodObject<zod.objectUtil.extendShape<{
            name: zod.ZodString;
            label: zod.ZodString;
            placeholder: zod.ZodOptional<zod.ZodString>;
            helperText: zod.ZodOptional<zod.ZodString>;
            visibility: zod.ZodString;
            required: zod.ZodOptional<zod.ZodBoolean>;
        }, {
            type: zod.ZodLiteral<"SELECT">;
            options: zod.ZodObject<{
                isMulti: zod.ZodBoolean;
                optionList: zod.ZodArray<zod.ZodString, "many">;
                maxSelect: zod.ZodNullable<zod.ZodNumber>;
                minSelect: zod.ZodNullable<zod.ZodNumber>;
            }, "strip", zod.ZodTypeAny, {
                isMulti: boolean;
                optionList: string[];
                maxSelect: number | null;
                minSelect: number | null;
            }, {
                isMulti: boolean;
                optionList: string[];
                maxSelect: number | null;
                minSelect: number | null;
            }>;
        }>, "strip", zod.ZodTypeAny, {
            options: {
                isMulti: boolean;
                optionList: string[];
                maxSelect: number | null;
                minSelect: number | null;
            };
            type: "SELECT";
            name: string;
            label: string;
            visibility: string;
            placeholder?: string | undefined;
            helperText?: string | undefined;
            required?: boolean | undefined;
        }, {
            options: {
                isMulti: boolean;
                optionList: string[];
                maxSelect: number | null;
                minSelect: number | null;
            };
            type: "SELECT";
            name: string;
            label: string;
            visibility: string;
            placeholder?: string | undefined;
            helperText?: string | undefined;
            required?: boolean | undefined;
        }>, zod.ZodObject<zod.objectUtil.extendShape<{
            name: zod.ZodString;
            label: zod.ZodString;
            placeholder: zod.ZodOptional<zod.ZodString>;
            helperText: zod.ZodOptional<zod.ZodString>;
            visibility: zod.ZodString;
            required: zod.ZodOptional<zod.ZodBoolean>;
        }, {
            type: zod.ZodLiteral<"DATETIME">;
            options: zod.ZodObject<{
                min: zod.ZodOptional<zod.ZodString>;
                max: zod.ZodOptional<zod.ZodString>;
            }, "strip", zod.ZodTypeAny, {
                min?: string | undefined;
                max?: string | undefined;
            }, {
                min?: string | undefined;
                max?: string | undefined;
            }>;
        }>, "strip", zod.ZodTypeAny, {
            options: {
                min?: string | undefined;
                max?: string | undefined;
            };
            type: "DATETIME";
            name: string;
            label: string;
            visibility: string;
            placeholder?: string | undefined;
            helperText?: string | undefined;
            required?: boolean | undefined;
        }, {
            options: {
                min?: string | undefined;
                max?: string | undefined;
            };
            type: "DATETIME";
            name: string;
            label: string;
            visibility: string;
            placeholder?: string | undefined;
            helperText?: string | undefined;
            required?: boolean | undefined;
        }>, zod.ZodObject<zod.objectUtil.extendShape<{
            name: zod.ZodString;
            label: zod.ZodString;
            placeholder: zod.ZodOptional<zod.ZodString>;
            helperText: zod.ZodOptional<zod.ZodString>;
            visibility: zod.ZodString;
            required: zod.ZodOptional<zod.ZodBoolean>;
        }, {
            type: zod.ZodLiteral<"RICHTEXT">;
            options: zod.ZodObject<{
                minLength: zod.ZodOptional<zod.ZodNumber>;
                maxLength: zod.ZodOptional<zod.ZodNumber>;
                disableImages: zod.ZodOptional<zod.ZodBoolean>;
            }, "strip", zod.ZodTypeAny, {
                minLength?: number | undefined;
                maxLength?: number | undefined;
                disableImages?: boolean | undefined;
            }, {
                minLength?: number | undefined;
                maxLength?: number | undefined;
                disableImages?: boolean | undefined;
            }>;
        }>, "strip", zod.ZodTypeAny, {
            options: {
                minLength?: number | undefined;
                maxLength?: number | undefined;
                disableImages?: boolean | undefined;
            };
            type: "RICHTEXT";
            name: string;
            label: string;
            visibility: string;
            placeholder?: string | undefined;
            helperText?: string | undefined;
            required?: boolean | undefined;
        }, {
            options: {
                minLength?: number | undefined;
                maxLength?: number | undefined;
                disableImages?: boolean | undefined;
            };
            type: "RICHTEXT";
            name: string;
            label: string;
            visibility: string;
            placeholder?: string | undefined;
            helperText?: string | undefined;
            required?: boolean | undefined;
        }>, zod.ZodObject<zod.objectUtil.extendShape<{
            name: zod.ZodString;
            type: zod.ZodString;
        }, {
            type: zod.ZodLiteral<"SEPARATOR">;
        }>, "strip", zod.ZodTypeAny, {
            type: "SEPARATOR";
            name: string;
        }, {
            type: "SEPARATOR";
            name: string;
        }>]>, "many">;
        fields: zod.ZodArray<zod.ZodObject<{
            name: zod.ZodString;
            type: zod.ZodString;
            value: zod.ZodAny;
        }, "strip", zod.ZodTypeAny, {
            type: string;
            name: string;
            value?: any;
        }, {
            type: string;
            name: string;
            value?: any;
        }>, "many">;
        points: zod.ZodNumber;
        commentsCount: zod.ZodNumber;
        authorId: zod.ZodString;
        projectId: zod.ZodString;
        isSuspend: zod.ZodOptional<zod.ZodBoolean>;
        visibility: zod.ZodString;
        lastChangeAt: zod.ZodDate;
        createdAt: zod.ZodDate;
    }, {
        id: zod.ZodString;
        title: zod.ZodString;
        tags: zod.ZodArray<zod.ZodObject<{
            id: zod.ZodString;
            displayName: zod.ZodString;
            name: zod.ZodString;
            color: zod.ZodString;
            description: zod.ZodString;
        }, "strip", zod.ZodTypeAny, {
            id: string;
            name: string;
            description: string;
            displayName: string;
            color: string;
        }, {
            id: string;
            name: string;
            description: string;
            displayName: string;
            color: string;
        }>, "many">;
        state: zod.ZodString;
        key: zod.ZodString;
        points: zod.ZodNumber;
        commentsCount: zod.ZodNumber;
        fields: zod.ZodArray<zod.ZodObject<{
            name: zod.ZodString;
            type: zod.ZodString;
            value: zod.ZodAny;
        }, "strip", zod.ZodTypeAny, {
            type: string;
            name: string;
            value?: any;
        }, {
            type: string;
            name: string;
            value?: any;
        }>, "many">;
        author: zod.ZodObject<{
            id: zod.ZodString;
            username: zod.ZodString;
            email: zod.ZodString;
            roleName: zod.ZodString;
            roleDisplayName: zod.ZodString;
        }, "strip", zod.ZodTypeAny, {
            id: string;
            username: string;
            email: string;
            roleDisplayName: string;
            roleName: string;
        }, {
            id: string;
            username: string;
            email: string;
            roleDisplayName: string;
            roleName: string;
        }>;
        project: zod.ZodObject<{
            id: zod.ZodString;
            slug: zod.ZodString;
            name: zod.ZodString;
            displayName: zod.ZodString;
        }, "strip", zod.ZodTypeAny, {
            id: string;
            name: string;
            slug: string;
            displayName: string;
        }, {
            id: string;
            name: string;
            slug: string;
            displayName: string;
        }>;
        group: zod.ZodObject<{
            id: zod.ZodString;
            slug: zod.ZodString;
            name: zod.ZodString;
            displayName: zod.ZodString;
        }, "strip", zod.ZodTypeAny, {
            id: string;
            name: string;
            slug: string;
            displayName: string;
        }, {
            id: string;
            name: string;
            slug: string;
            displayName: string;
        }>;
        isSuspend: zod.ZodOptional<zod.ZodBoolean>;
        visibility: zod.ZodString;
        lastChangeAt: zod.ZodDate;
        createdAt: zod.ZodDate;
    }>, "fields">, "strip", zod.ZodTypeAny, {
        id: string;
        authorId: string;
        createdAt: Date;
        title: string;
        key: string;
        tags: {
            id: string;
            name: string;
            description: string;
            displayName: string;
            color: string;
        }[];
        author: {
            id: string;
            username: string;
            email: string;
            roleDisplayName: string;
            roleName: string;
        };
        visibility: string;
        projectId: string;
        schema: ({
            options: {
                min?: number | undefined;
                max?: number | undefined;
                noDecimal?: boolean | undefined;
            };
            type: "NUMBER";
            name: string;
            label: string;
            visibility: string;
            placeholder?: string | undefined;
            helperText?: string | undefined;
            required?: boolean | undefined;
        } | {
            options: {
                minLength?: number | undefined;
                maxLength?: number | undefined;
                pattern?: string | undefined;
            };
            type: "TEXT";
            name: string;
            label: string;
            visibility: string;
            placeholder?: string | undefined;
            helperText?: string | undefined;
            required?: boolean | undefined;
        } | {
            options: {
                isMulti: boolean;
                optionList: string[];
                maxSelect: number | null;
                minSelect: number | null;
            };
            type: "SELECT";
            name: string;
            label: string;
            visibility: string;
            placeholder?: string | undefined;
            helperText?: string | undefined;
            required?: boolean | undefined;
        } | {
            options: {
                min?: string | undefined;
                max?: string | undefined;
            };
            type: "DATETIME";
            name: string;
            label: string;
            visibility: string;
            placeholder?: string | undefined;
            helperText?: string | undefined;
            required?: boolean | undefined;
        } | {
            options: {
                minLength?: number | undefined;
                maxLength?: number | undefined;
                disableImages?: boolean | undefined;
            };
            type: "RICHTEXT";
            name: string;
            label: string;
            visibility: string;
            placeholder?: string | undefined;
            helperText?: string | undefined;
            required?: boolean | undefined;
        } | {
            type: "SEPARATOR";
            name: string;
        })[];
        state: string;
        points: number;
        commentsCount: number;
        lastChangeAt: Date;
        project: {
            id: string;
            name: string;
            slug: string;
            displayName: string;
        };
        group: {
            id: string;
            name: string;
            slug: string;
            displayName: string;
        };
        isSuspend?: boolean | undefined;
    }, {
        id: string;
        authorId: string;
        createdAt: Date;
        title: string;
        key: string;
        tags: {
            id: string;
            name: string;
            description: string;
            displayName: string;
            color: string;
        }[];
        author: {
            id: string;
            username: string;
            email: string;
            roleDisplayName: string;
            roleName: string;
        };
        visibility: string;
        projectId: string;
        schema: ({
            options: {
                min?: number | undefined;
                max?: number | undefined;
                noDecimal?: boolean | undefined;
            };
            type: "NUMBER";
            name: string;
            label: string;
            visibility: string;
            placeholder?: string | undefined;
            helperText?: string | undefined;
            required?: boolean | undefined;
        } | {
            options: {
                minLength?: number | undefined;
                maxLength?: number | undefined;
                pattern?: string | undefined;
            };
            type: "TEXT";
            name: string;
            label: string;
            visibility: string;
            placeholder?: string | undefined;
            helperText?: string | undefined;
            required?: boolean | undefined;
        } | {
            options: {
                isMulti: boolean;
                optionList: string[];
                maxSelect: number | null;
                minSelect: number | null;
            };
            type: "SELECT";
            name: string;
            label: string;
            visibility: string;
            placeholder?: string | undefined;
            helperText?: string | undefined;
            required?: boolean | undefined;
        } | {
            options: {
                min?: string | undefined;
                max?: string | undefined;
            };
            type: "DATETIME";
            name: string;
            label: string;
            visibility: string;
            placeholder?: string | undefined;
            helperText?: string | undefined;
            required?: boolean | undefined;
        } | {
            options: {
                minLength?: number | undefined;
                maxLength?: number | undefined;
                disableImages?: boolean | undefined;
            };
            type: "RICHTEXT";
            name: string;
            label: string;
            visibility: string;
            placeholder?: string | undefined;
            helperText?: string | undefined;
            required?: boolean | undefined;
        } | {
            type: "SEPARATOR";
            name: string;
        })[];
        state: string;
        points: number;
        commentsCount: number;
        lastChangeAt: Date;
        project: {
            id: string;
            name: string;
            slug: string;
            displayName: string;
        };
        group: {
            id: string;
            name: string;
            slug: string;
            displayName: string;
        };
        isSuspend?: boolean | undefined;
    }>;
    RegularInListDetailsDTO: zod.ZodObject<Omit<zod.objectUtil.extendShape<{
        id: zod.ZodString;
        title: zod.ZodString;
        tags: zod.ZodArray<zod.ZodString, "many">;
        state: zod.ZodString;
        key: zod.ZodString;
        schema: zod.ZodArray<zod.ZodDiscriminatedUnion<"type", [zod.ZodObject<zod.objectUtil.extendShape<{
            name: zod.ZodString;
            label: zod.ZodString;
            placeholder: zod.ZodOptional<zod.ZodString>;
            helperText: zod.ZodOptional<zod.ZodString>;
            visibility: zod.ZodString;
            required: zod.ZodOptional<zod.ZodBoolean>;
        }, {
            type: zod.ZodLiteral<"NUMBER">;
            options: zod.ZodObject<{
                min: zod.ZodOptional<zod.ZodNumber>;
                max: zod.ZodOptional<zod.ZodNumber>;
                noDecimal: zod.ZodOptional<zod.ZodBoolean>;
            }, "strip", zod.ZodTypeAny, {
                min?: number | undefined;
                max?: number | undefined;
                noDecimal?: boolean | undefined;
            }, {
                min?: number | undefined;
                max?: number | undefined;
                noDecimal?: boolean | undefined;
            }>;
        }>, "strip", zod.ZodTypeAny, {
            options: {
                min?: number | undefined;
                max?: number | undefined;
                noDecimal?: boolean | undefined;
            };
            type: "NUMBER";
            name: string;
            label: string;
            visibility: string;
            placeholder?: string | undefined;
            helperText?: string | undefined;
            required?: boolean | undefined;
        }, {
            options: {
                min?: number | undefined;
                max?: number | undefined;
                noDecimal?: boolean | undefined;
            };
            type: "NUMBER";
            name: string;
            label: string;
            visibility: string;
            placeholder?: string | undefined;
            helperText?: string | undefined;
            required?: boolean | undefined;
        }>, zod.ZodObject<zod.objectUtil.extendShape<{
            name: zod.ZodString;
            label: zod.ZodString;
            placeholder: zod.ZodOptional<zod.ZodString>;
            helperText: zod.ZodOptional<zod.ZodString>;
            visibility: zod.ZodString;
            required: zod.ZodOptional<zod.ZodBoolean>;
        }, {
            type: zod.ZodLiteral<"TEXT">;
            options: zod.ZodObject<{
                minLength: zod.ZodOptional<zod.ZodNumber>;
                maxLength: zod.ZodOptional<zod.ZodNumber>;
                pattern: zod.ZodOptional<zod.ZodString>;
            }, "strip", zod.ZodTypeAny, {
                minLength?: number | undefined;
                maxLength?: number | undefined;
                pattern?: string | undefined;
            }, {
                minLength?: number | undefined;
                maxLength?: number | undefined;
                pattern?: string | undefined;
            }>;
        }>, "strip", zod.ZodTypeAny, {
            options: {
                minLength?: number | undefined;
                maxLength?: number | undefined;
                pattern?: string | undefined;
            };
            type: "TEXT";
            name: string;
            label: string;
            visibility: string;
            placeholder?: string | undefined;
            helperText?: string | undefined;
            required?: boolean | undefined;
        }, {
            options: {
                minLength?: number | undefined;
                maxLength?: number | undefined;
                pattern?: string | undefined;
            };
            type: "TEXT";
            name: string;
            label: string;
            visibility: string;
            placeholder?: string | undefined;
            helperText?: string | undefined;
            required?: boolean | undefined;
        }>, zod.ZodObject<zod.objectUtil.extendShape<{
            name: zod.ZodString;
            label: zod.ZodString;
            placeholder: zod.ZodOptional<zod.ZodString>;
            helperText: zod.ZodOptional<zod.ZodString>;
            visibility: zod.ZodString;
            required: zod.ZodOptional<zod.ZodBoolean>;
        }, {
            type: zod.ZodLiteral<"SELECT">;
            options: zod.ZodObject<{
                isMulti: zod.ZodBoolean;
                optionList: zod.ZodArray<zod.ZodString, "many">;
                maxSelect: zod.ZodNullable<zod.ZodNumber>;
                minSelect: zod.ZodNullable<zod.ZodNumber>;
            }, "strip", zod.ZodTypeAny, {
                isMulti: boolean;
                optionList: string[];
                maxSelect: number | null;
                minSelect: number | null;
            }, {
                isMulti: boolean;
                optionList: string[];
                maxSelect: number | null;
                minSelect: number | null;
            }>;
        }>, "strip", zod.ZodTypeAny, {
            options: {
                isMulti: boolean;
                optionList: string[];
                maxSelect: number | null;
                minSelect: number | null;
            };
            type: "SELECT";
            name: string;
            label: string;
            visibility: string;
            placeholder?: string | undefined;
            helperText?: string | undefined;
            required?: boolean | undefined;
        }, {
            options: {
                isMulti: boolean;
                optionList: string[];
                maxSelect: number | null;
                minSelect: number | null;
            };
            type: "SELECT";
            name: string;
            label: string;
            visibility: string;
            placeholder?: string | undefined;
            helperText?: string | undefined;
            required?: boolean | undefined;
        }>, zod.ZodObject<zod.objectUtil.extendShape<{
            name: zod.ZodString;
            label: zod.ZodString;
            placeholder: zod.ZodOptional<zod.ZodString>;
            helperText: zod.ZodOptional<zod.ZodString>;
            visibility: zod.ZodString;
            required: zod.ZodOptional<zod.ZodBoolean>;
        }, {
            type: zod.ZodLiteral<"DATETIME">;
            options: zod.ZodObject<{
                min: zod.ZodOptional<zod.ZodString>;
                max: zod.ZodOptional<zod.ZodString>;
            }, "strip", zod.ZodTypeAny, {
                min?: string | undefined;
                max?: string | undefined;
            }, {
                min?: string | undefined;
                max?: string | undefined;
            }>;
        }>, "strip", zod.ZodTypeAny, {
            options: {
                min?: string | undefined;
                max?: string | undefined;
            };
            type: "DATETIME";
            name: string;
            label: string;
            visibility: string;
            placeholder?: string | undefined;
            helperText?: string | undefined;
            required?: boolean | undefined;
        }, {
            options: {
                min?: string | undefined;
                max?: string | undefined;
            };
            type: "DATETIME";
            name: string;
            label: string;
            visibility: string;
            placeholder?: string | undefined;
            helperText?: string | undefined;
            required?: boolean | undefined;
        }>, zod.ZodObject<zod.objectUtil.extendShape<{
            name: zod.ZodString;
            label: zod.ZodString;
            placeholder: zod.ZodOptional<zod.ZodString>;
            helperText: zod.ZodOptional<zod.ZodString>;
            visibility: zod.ZodString;
            required: zod.ZodOptional<zod.ZodBoolean>;
        }, {
            type: zod.ZodLiteral<"RICHTEXT">;
            options: zod.ZodObject<{
                minLength: zod.ZodOptional<zod.ZodNumber>;
                maxLength: zod.ZodOptional<zod.ZodNumber>;
                disableImages: zod.ZodOptional<zod.ZodBoolean>;
            }, "strip", zod.ZodTypeAny, {
                minLength?: number | undefined;
                maxLength?: number | undefined;
                disableImages?: boolean | undefined;
            }, {
                minLength?: number | undefined;
                maxLength?: number | undefined;
                disableImages?: boolean | undefined;
            }>;
        }>, "strip", zod.ZodTypeAny, {
            options: {
                minLength?: number | undefined;
                maxLength?: number | undefined;
                disableImages?: boolean | undefined;
            };
            type: "RICHTEXT";
            name: string;
            label: string;
            visibility: string;
            placeholder?: string | undefined;
            helperText?: string | undefined;
            required?: boolean | undefined;
        }, {
            options: {
                minLength?: number | undefined;
                maxLength?: number | undefined;
                disableImages?: boolean | undefined;
            };
            type: "RICHTEXT";
            name: string;
            label: string;
            visibility: string;
            placeholder?: string | undefined;
            helperText?: string | undefined;
            required?: boolean | undefined;
        }>, zod.ZodObject<zod.objectUtil.extendShape<{
            name: zod.ZodString;
            type: zod.ZodString;
        }, {
            type: zod.ZodLiteral<"SEPARATOR">;
        }>, "strip", zod.ZodTypeAny, {
            type: "SEPARATOR";
            name: string;
        }, {
            type: "SEPARATOR";
            name: string;
        }>]>, "many">;
        fields: zod.ZodArray<zod.ZodObject<{
            name: zod.ZodString;
            type: zod.ZodString;
            value: zod.ZodAny;
        }, "strip", zod.ZodTypeAny, {
            type: string;
            name: string;
            value?: any;
        }, {
            type: string;
            name: string;
            value?: any;
        }>, "many">;
        points: zod.ZodNumber;
        commentsCount: zod.ZodNumber;
        authorId: zod.ZodString;
        projectId: zod.ZodString;
        isSuspend: zod.ZodOptional<zod.ZodBoolean>;
        visibility: zod.ZodString;
        lastChangeAt: zod.ZodDate;
        createdAt: zod.ZodDate;
    }, {
        id: zod.ZodString;
        title: zod.ZodString;
        tags: zod.ZodArray<zod.ZodObject<{
            id: zod.ZodString;
            displayName: zod.ZodString;
            name: zod.ZodString;
            color: zod.ZodString;
            description: zod.ZodString;
        }, "strip", zod.ZodTypeAny, {
            id: string;
            name: string;
            description: string;
            displayName: string;
            color: string;
        }, {
            id: string;
            name: string;
            description: string;
            displayName: string;
            color: string;
        }>, "many">;
        state: zod.ZodString;
        key: zod.ZodString;
        points: zod.ZodNumber;
        commentsCount: zod.ZodNumber;
        fields: zod.ZodArray<zod.ZodObject<{
            name: zod.ZodString;
            type: zod.ZodString;
            value: zod.ZodAny;
        }, "strip", zod.ZodTypeAny, {
            type: string;
            name: string;
            value?: any;
        }, {
            type: string;
            name: string;
            value?: any;
        }>, "many">;
        author: zod.ZodObject<{
            id: zod.ZodString;
            username: zod.ZodString;
            email: zod.ZodString;
            roleName: zod.ZodString;
            roleDisplayName: zod.ZodString;
        }, "strip", zod.ZodTypeAny, {
            id: string;
            username: string;
            email: string;
            roleDisplayName: string;
            roleName: string;
        }, {
            id: string;
            username: string;
            email: string;
            roleDisplayName: string;
            roleName: string;
        }>;
        project: zod.ZodObject<{
            id: zod.ZodString;
            slug: zod.ZodString;
            name: zod.ZodString;
            displayName: zod.ZodString;
        }, "strip", zod.ZodTypeAny, {
            id: string;
            name: string;
            slug: string;
            displayName: string;
        }, {
            id: string;
            name: string;
            slug: string;
            displayName: string;
        }>;
        group: zod.ZodObject<{
            id: zod.ZodString;
            slug: zod.ZodString;
            name: zod.ZodString;
            displayName: zod.ZodString;
        }, "strip", zod.ZodTypeAny, {
            id: string;
            name: string;
            slug: string;
            displayName: string;
        }, {
            id: string;
            name: string;
            slug: string;
            displayName: string;
        }>;
        isSuspend: zod.ZodOptional<zod.ZodBoolean>;
        visibility: zod.ZodString;
        lastChangeAt: zod.ZodDate;
        createdAt: zod.ZodDate;
    }>, "fields">, "strip", zod.ZodTypeAny, {
        id: string;
        authorId: string;
        createdAt: Date;
        title: string;
        key: string;
        tags: {
            id: string;
            name: string;
            description: string;
            displayName: string;
            color: string;
        }[];
        author: {
            id: string;
            username: string;
            email: string;
            roleDisplayName: string;
            roleName: string;
        };
        visibility: string;
        projectId: string;
        schema: ({
            options: {
                min?: number | undefined;
                max?: number | undefined;
                noDecimal?: boolean | undefined;
            };
            type: "NUMBER";
            name: string;
            label: string;
            visibility: string;
            placeholder?: string | undefined;
            helperText?: string | undefined;
            required?: boolean | undefined;
        } | {
            options: {
                minLength?: number | undefined;
                maxLength?: number | undefined;
                pattern?: string | undefined;
            };
            type: "TEXT";
            name: string;
            label: string;
            visibility: string;
            placeholder?: string | undefined;
            helperText?: string | undefined;
            required?: boolean | undefined;
        } | {
            options: {
                isMulti: boolean;
                optionList: string[];
                maxSelect: number | null;
                minSelect: number | null;
            };
            type: "SELECT";
            name: string;
            label: string;
            visibility: string;
            placeholder?: string | undefined;
            helperText?: string | undefined;
            required?: boolean | undefined;
        } | {
            options: {
                min?: string | undefined;
                max?: string | undefined;
            };
            type: "DATETIME";
            name: string;
            label: string;
            visibility: string;
            placeholder?: string | undefined;
            helperText?: string | undefined;
            required?: boolean | undefined;
        } | {
            options: {
                minLength?: number | undefined;
                maxLength?: number | undefined;
                disableImages?: boolean | undefined;
            };
            type: "RICHTEXT";
            name: string;
            label: string;
            visibility: string;
            placeholder?: string | undefined;
            helperText?: string | undefined;
            required?: boolean | undefined;
        } | {
            type: "SEPARATOR";
            name: string;
        })[];
        state: string;
        points: number;
        commentsCount: number;
        lastChangeAt: Date;
        project: {
            id: string;
            name: string;
            slug: string;
            displayName: string;
        };
        group: {
            id: string;
            name: string;
            slug: string;
            displayName: string;
        };
        isSuspend?: boolean | undefined;
    }, {
        id: string;
        authorId: string;
        createdAt: Date;
        title: string;
        key: string;
        tags: {
            id: string;
            name: string;
            description: string;
            displayName: string;
            color: string;
        }[];
        author: {
            id: string;
            username: string;
            email: string;
            roleDisplayName: string;
            roleName: string;
        };
        visibility: string;
        projectId: string;
        schema: ({
            options: {
                min?: number | undefined;
                max?: number | undefined;
                noDecimal?: boolean | undefined;
            };
            type: "NUMBER";
            name: string;
            label: string;
            visibility: string;
            placeholder?: string | undefined;
            helperText?: string | undefined;
            required?: boolean | undefined;
        } | {
            options: {
                minLength?: number | undefined;
                maxLength?: number | undefined;
                pattern?: string | undefined;
            };
            type: "TEXT";
            name: string;
            label: string;
            visibility: string;
            placeholder?: string | undefined;
            helperText?: string | undefined;
            required?: boolean | undefined;
        } | {
            options: {
                isMulti: boolean;
                optionList: string[];
                maxSelect: number | null;
                minSelect: number | null;
            };
            type: "SELECT";
            name: string;
            label: string;
            visibility: string;
            placeholder?: string | undefined;
            helperText?: string | undefined;
            required?: boolean | undefined;
        } | {
            options: {
                min?: string | undefined;
                max?: string | undefined;
            };
            type: "DATETIME";
            name: string;
            label: string;
            visibility: string;
            placeholder?: string | undefined;
            helperText?: string | undefined;
            required?: boolean | undefined;
        } | {
            options: {
                minLength?: number | undefined;
                maxLength?: number | undefined;
                disableImages?: boolean | undefined;
            };
            type: "RICHTEXT";
            name: string;
            label: string;
            visibility: string;
            placeholder?: string | undefined;
            helperText?: string | undefined;
            required?: boolean | undefined;
        } | {
            type: "SEPARATOR";
            name: string;
        })[];
        state: string;
        points: number;
        commentsCount: number;
        lastChangeAt: Date;
        project: {
            id: string;
            name: string;
            slug: string;
            displayName: string;
        };
        group: {
            id: string;
            name: string;
            slug: string;
            displayName: string;
        };
        isSuspend?: boolean | undefined;
    }>;
    ConfidentialInListDetailsDTO: zod.ZodObject<zod.objectUtil.extendShape<Omit<zod.objectUtil.extendShape<{
        id: zod.ZodString;
        title: zod.ZodString;
        tags: zod.ZodArray<zod.ZodString, "many">;
        state: zod.ZodString;
        key: zod.ZodString;
        schema: zod.ZodArray<zod.ZodDiscriminatedUnion<"type", [zod.ZodObject<zod.objectUtil.extendShape<{
            name: zod.ZodString;
            label: zod.ZodString;
            placeholder: zod.ZodOptional<zod.ZodString>;
            helperText: zod.ZodOptional<zod.ZodString>;
            visibility: zod.ZodString;
            required: zod.ZodOptional<zod.ZodBoolean>;
        }, {
            type: zod.ZodLiteral<"NUMBER">;
            options: zod.ZodObject<{
                min: zod.ZodOptional<zod.ZodNumber>;
                max: zod.ZodOptional<zod.ZodNumber>;
                noDecimal: zod.ZodOptional<zod.ZodBoolean>;
            }, "strip", zod.ZodTypeAny, {
                min?: number | undefined;
                max?: number | undefined;
                noDecimal?: boolean | undefined;
            }, {
                min?: number | undefined;
                max?: number | undefined;
                noDecimal?: boolean | undefined;
            }>;
        }>, "strip", zod.ZodTypeAny, {
            options: {
                min?: number | undefined;
                max?: number | undefined;
                noDecimal?: boolean | undefined;
            };
            type: "NUMBER";
            name: string;
            label: string;
            visibility: string;
            placeholder?: string | undefined;
            helperText?: string | undefined;
            required?: boolean | undefined;
        }, {
            options: {
                min?: number | undefined;
                max?: number | undefined;
                noDecimal?: boolean | undefined;
            };
            type: "NUMBER";
            name: string;
            label: string;
            visibility: string;
            placeholder?: string | undefined;
            helperText?: string | undefined;
            required?: boolean | undefined;
        }>, zod.ZodObject<zod.objectUtil.extendShape<{
            name: zod.ZodString;
            label: zod.ZodString;
            placeholder: zod.ZodOptional<zod.ZodString>;
            helperText: zod.ZodOptional<zod.ZodString>;
            visibility: zod.ZodString;
            required: zod.ZodOptional<zod.ZodBoolean>;
        }, {
            type: zod.ZodLiteral<"TEXT">;
            options: zod.ZodObject<{
                minLength: zod.ZodOptional<zod.ZodNumber>;
                maxLength: zod.ZodOptional<zod.ZodNumber>;
                pattern: zod.ZodOptional<zod.ZodString>;
            }, "strip", zod.ZodTypeAny, {
                minLength?: number | undefined;
                maxLength?: number | undefined;
                pattern?: string | undefined;
            }, {
                minLength?: number | undefined;
                maxLength?: number | undefined;
                pattern?: string | undefined;
            }>;
        }>, "strip", zod.ZodTypeAny, {
            options: {
                minLength?: number | undefined;
                maxLength?: number | undefined;
                pattern?: string | undefined;
            };
            type: "TEXT";
            name: string;
            label: string;
            visibility: string;
            placeholder?: string | undefined;
            helperText?: string | undefined;
            required?: boolean | undefined;
        }, {
            options: {
                minLength?: number | undefined;
                maxLength?: number | undefined;
                pattern?: string | undefined;
            };
            type: "TEXT";
            name: string;
            label: string;
            visibility: string;
            placeholder?: string | undefined;
            helperText?: string | undefined;
            required?: boolean | undefined;
        }>, zod.ZodObject<zod.objectUtil.extendShape<{
            name: zod.ZodString;
            label: zod.ZodString;
            placeholder: zod.ZodOptional<zod.ZodString>;
            helperText: zod.ZodOptional<zod.ZodString>;
            visibility: zod.ZodString;
            required: zod.ZodOptional<zod.ZodBoolean>;
        }, {
            type: zod.ZodLiteral<"SELECT">;
            options: zod.ZodObject<{
                isMulti: zod.ZodBoolean;
                optionList: zod.ZodArray<zod.ZodString, "many">;
                maxSelect: zod.ZodNullable<zod.ZodNumber>;
                minSelect: zod.ZodNullable<zod.ZodNumber>;
            }, "strip", zod.ZodTypeAny, {
                isMulti: boolean;
                optionList: string[];
                maxSelect: number | null;
                minSelect: number | null;
            }, {
                isMulti: boolean;
                optionList: string[];
                maxSelect: number | null;
                minSelect: number | null;
            }>;
        }>, "strip", zod.ZodTypeAny, {
            options: {
                isMulti: boolean;
                optionList: string[];
                maxSelect: number | null;
                minSelect: number | null;
            };
            type: "SELECT";
            name: string;
            label: string;
            visibility: string;
            placeholder?: string | undefined;
            helperText?: string | undefined;
            required?: boolean | undefined;
        }, {
            options: {
                isMulti: boolean;
                optionList: string[];
                maxSelect: number | null;
                minSelect: number | null;
            };
            type: "SELECT";
            name: string;
            label: string;
            visibility: string;
            placeholder?: string | undefined;
            helperText?: string | undefined;
            required?: boolean | undefined;
        }>, zod.ZodObject<zod.objectUtil.extendShape<{
            name: zod.ZodString;
            label: zod.ZodString;
            placeholder: zod.ZodOptional<zod.ZodString>;
            helperText: zod.ZodOptional<zod.ZodString>;
            visibility: zod.ZodString;
            required: zod.ZodOptional<zod.ZodBoolean>;
        }, {
            type: zod.ZodLiteral<"DATETIME">;
            options: zod.ZodObject<{
                min: zod.ZodOptional<zod.ZodString>;
                max: zod.ZodOptional<zod.ZodString>;
            }, "strip", zod.ZodTypeAny, {
                min?: string | undefined;
                max?: string | undefined;
            }, {
                min?: string | undefined;
                max?: string | undefined;
            }>;
        }>, "strip", zod.ZodTypeAny, {
            options: {
                min?: string | undefined;
                max?: string | undefined;
            };
            type: "DATETIME";
            name: string;
            label: string;
            visibility: string;
            placeholder?: string | undefined;
            helperText?: string | undefined;
            required?: boolean | undefined;
        }, {
            options: {
                min?: string | undefined;
                max?: string | undefined;
            };
            type: "DATETIME";
            name: string;
            label: string;
            visibility: string;
            placeholder?: string | undefined;
            helperText?: string | undefined;
            required?: boolean | undefined;
        }>, zod.ZodObject<zod.objectUtil.extendShape<{
            name: zod.ZodString;
            label: zod.ZodString;
            placeholder: zod.ZodOptional<zod.ZodString>;
            helperText: zod.ZodOptional<zod.ZodString>;
            visibility: zod.ZodString;
            required: zod.ZodOptional<zod.ZodBoolean>;
        }, {
            type: zod.ZodLiteral<"RICHTEXT">;
            options: zod.ZodObject<{
                minLength: zod.ZodOptional<zod.ZodNumber>;
                maxLength: zod.ZodOptional<zod.ZodNumber>;
                disableImages: zod.ZodOptional<zod.ZodBoolean>;
            }, "strip", zod.ZodTypeAny, {
                minLength?: number | undefined;
                maxLength?: number | undefined;
                disableImages?: boolean | undefined;
            }, {
                minLength?: number | undefined;
                maxLength?: number | undefined;
                disableImages?: boolean | undefined;
            }>;
        }>, "strip", zod.ZodTypeAny, {
            options: {
                minLength?: number | undefined;
                maxLength?: number | undefined;
                disableImages?: boolean | undefined;
            };
            type: "RICHTEXT";
            name: string;
            label: string;
            visibility: string;
            placeholder?: string | undefined;
            helperText?: string | undefined;
            required?: boolean | undefined;
        }, {
            options: {
                minLength?: number | undefined;
                maxLength?: number | undefined;
                disableImages?: boolean | undefined;
            };
            type: "RICHTEXT";
            name: string;
            label: string;
            visibility: string;
            placeholder?: string | undefined;
            helperText?: string | undefined;
            required?: boolean | undefined;
        }>, zod.ZodObject<zod.objectUtil.extendShape<{
            name: zod.ZodString;
            type: zod.ZodString;
        }, {
            type: zod.ZodLiteral<"SEPARATOR">;
        }>, "strip", zod.ZodTypeAny, {
            type: "SEPARATOR";
            name: string;
        }, {
            type: "SEPARATOR";
            name: string;
        }>]>, "many">;
        fields: zod.ZodArray<zod.ZodObject<{
            name: zod.ZodString;
            type: zod.ZodString;
            value: zod.ZodAny;
        }, "strip", zod.ZodTypeAny, {
            type: string;
            name: string;
            value?: any;
        }, {
            type: string;
            name: string;
            value?: any;
        }>, "many">;
        points: zod.ZodNumber;
        commentsCount: zod.ZodNumber;
        authorId: zod.ZodString;
        projectId: zod.ZodString;
        isSuspend: zod.ZodOptional<zod.ZodBoolean>;
        visibility: zod.ZodString;
        lastChangeAt: zod.ZodDate;
        createdAt: zod.ZodDate;
    }, {
        id: zod.ZodString;
        title: zod.ZodString;
        tags: zod.ZodArray<zod.ZodObject<{
            id: zod.ZodString;
            displayName: zod.ZodString;
            name: zod.ZodString;
            color: zod.ZodString;
            description: zod.ZodString;
        }, "strip", zod.ZodTypeAny, {
            id: string;
            name: string;
            description: string;
            displayName: string;
            color: string;
        }, {
            id: string;
            name: string;
            description: string;
            displayName: string;
            color: string;
        }>, "many">;
        state: zod.ZodString;
        key: zod.ZodString;
        points: zod.ZodNumber;
        commentsCount: zod.ZodNumber;
        fields: zod.ZodArray<zod.ZodObject<{
            name: zod.ZodString;
            type: zod.ZodString;
            value: zod.ZodAny;
        }, "strip", zod.ZodTypeAny, {
            type: string;
            name: string;
            value?: any;
        }, {
            type: string;
            name: string;
            value?: any;
        }>, "many">;
        author: zod.ZodObject<{
            id: zod.ZodString;
            username: zod.ZodString;
            email: zod.ZodString;
            roleName: zod.ZodString;
            roleDisplayName: zod.ZodString;
        }, "strip", zod.ZodTypeAny, {
            id: string;
            username: string;
            email: string;
            roleDisplayName: string;
            roleName: string;
        }, {
            id: string;
            username: string;
            email: string;
            roleDisplayName: string;
            roleName: string;
        }>;
        project: zod.ZodObject<{
            id: zod.ZodString;
            slug: zod.ZodString;
            name: zod.ZodString;
            displayName: zod.ZodString;
        }, "strip", zod.ZodTypeAny, {
            id: string;
            name: string;
            slug: string;
            displayName: string;
        }, {
            id: string;
            name: string;
            slug: string;
            displayName: string;
        }>;
        group: zod.ZodObject<{
            id: zod.ZodString;
            slug: zod.ZodString;
            name: zod.ZodString;
            displayName: zod.ZodString;
        }, "strip", zod.ZodTypeAny, {
            id: string;
            name: string;
            slug: string;
            displayName: string;
        }, {
            id: string;
            name: string;
            slug: string;
            displayName: string;
        }>;
        isSuspend: zod.ZodOptional<zod.ZodBoolean>;
        visibility: zod.ZodString;
        lastChangeAt: zod.ZodDate;
        createdAt: zod.ZodDate;
    }>, "fields">, {
        updatedAt: zod.ZodDate;
    }>, "strip", zod.ZodTypeAny, {
        id: string;
        authorId: string;
        createdAt: Date;
        updatedAt: Date;
        title: string;
        key: string;
        tags: {
            id: string;
            name: string;
            description: string;
            displayName: string;
            color: string;
        }[];
        author: {
            id: string;
            username: string;
            email: string;
            roleDisplayName: string;
            roleName: string;
        };
        visibility: string;
        projectId: string;
        schema: ({
            options: {
                min?: number | undefined;
                max?: number | undefined;
                noDecimal?: boolean | undefined;
            };
            type: "NUMBER";
            name: string;
            label: string;
            visibility: string;
            placeholder?: string | undefined;
            helperText?: string | undefined;
            required?: boolean | undefined;
        } | {
            options: {
                minLength?: number | undefined;
                maxLength?: number | undefined;
                pattern?: string | undefined;
            };
            type: "TEXT";
            name: string;
            label: string;
            visibility: string;
            placeholder?: string | undefined;
            helperText?: string | undefined;
            required?: boolean | undefined;
        } | {
            options: {
                isMulti: boolean;
                optionList: string[];
                maxSelect: number | null;
                minSelect: number | null;
            };
            type: "SELECT";
            name: string;
            label: string;
            visibility: string;
            placeholder?: string | undefined;
            helperText?: string | undefined;
            required?: boolean | undefined;
        } | {
            options: {
                min?: string | undefined;
                max?: string | undefined;
            };
            type: "DATETIME";
            name: string;
            label: string;
            visibility: string;
            placeholder?: string | undefined;
            helperText?: string | undefined;
            required?: boolean | undefined;
        } | {
            options: {
                minLength?: number | undefined;
                maxLength?: number | undefined;
                disableImages?: boolean | undefined;
            };
            type: "RICHTEXT";
            name: string;
            label: string;
            visibility: string;
            placeholder?: string | undefined;
            helperText?: string | undefined;
            required?: boolean | undefined;
        } | {
            type: "SEPARATOR";
            name: string;
        })[];
        state: string;
        points: number;
        commentsCount: number;
        lastChangeAt: Date;
        project: {
            id: string;
            name: string;
            slug: string;
            displayName: string;
        };
        group: {
            id: string;
            name: string;
            slug: string;
            displayName: string;
        };
        isSuspend?: boolean | undefined;
    }, {
        id: string;
        authorId: string;
        createdAt: Date;
        updatedAt: Date;
        title: string;
        key: string;
        tags: {
            id: string;
            name: string;
            description: string;
            displayName: string;
            color: string;
        }[];
        author: {
            id: string;
            username: string;
            email: string;
            roleDisplayName: string;
            roleName: string;
        };
        visibility: string;
        projectId: string;
        schema: ({
            options: {
                min?: number | undefined;
                max?: number | undefined;
                noDecimal?: boolean | undefined;
            };
            type: "NUMBER";
            name: string;
            label: string;
            visibility: string;
            placeholder?: string | undefined;
            helperText?: string | undefined;
            required?: boolean | undefined;
        } | {
            options: {
                minLength?: number | undefined;
                maxLength?: number | undefined;
                pattern?: string | undefined;
            };
            type: "TEXT";
            name: string;
            label: string;
            visibility: string;
            placeholder?: string | undefined;
            helperText?: string | undefined;
            required?: boolean | undefined;
        } | {
            options: {
                isMulti: boolean;
                optionList: string[];
                maxSelect: number | null;
                minSelect: number | null;
            };
            type: "SELECT";
            name: string;
            label: string;
            visibility: string;
            placeholder?: string | undefined;
            helperText?: string | undefined;
            required?: boolean | undefined;
        } | {
            options: {
                min?: string | undefined;
                max?: string | undefined;
            };
            type: "DATETIME";
            name: string;
            label: string;
            visibility: string;
            placeholder?: string | undefined;
            helperText?: string | undefined;
            required?: boolean | undefined;
        } | {
            options: {
                minLength?: number | undefined;
                maxLength?: number | undefined;
                disableImages?: boolean | undefined;
            };
            type: "RICHTEXT";
            name: string;
            label: string;
            visibility: string;
            placeholder?: string | undefined;
            helperText?: string | undefined;
            required?: boolean | undefined;
        } | {
            type: "SEPARATOR";
            name: string;
        })[];
        state: string;
        points: number;
        commentsCount: number;
        lastChangeAt: Date;
        project: {
            id: string;
            name: string;
            slug: string;
            displayName: string;
        };
        group: {
            id: string;
            name: string;
            slug: string;
            displayName: string;
        };
        isSuspend?: boolean | undefined;
    }>;
};

declare const commentContract: {
    replyToComment: {
        metadata: {
            readonly permissions: "create:comment";
        };
        summary: "Reply to comment";
        method: "POST";
        body: z.ZodObject<{
            content: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            content: string;
        }, {
            content: string;
        }>;
        path: "/api/comments/:commentId/reply";
        headers: z.ZodObject<{
            authorization: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            authorization: string;
        }, {
            authorization: string;
        }>;
        responses: {
            200: z.ZodObject<{
                data: z.ZodType<{
                    id: string;
                    authorId: string;
                    issueId: string;
                    content: string;
                    createdAt?: Date | undefined;
                    updatedAt?: Date | undefined;
                    parentCommentId?: string | undefined;
                }, z.ZodTypeDef, {
                    id: string;
                    authorId: string;
                    issueId: string;
                    content: string;
                    createdAt?: Date | undefined;
                    updatedAt?: Date | undefined;
                    parentCommentId?: string | undefined;
                }> | z.ZodObject<{}, "strip", z.ZodTypeAny, {}, {}>;
            }, "strip", z.ZodTypeAny, {
                data: {
                    id: string;
                    authorId: string;
                    issueId: string;
                    content: string;
                    createdAt?: Date | undefined;
                    updatedAt?: Date | undefined;
                    parentCommentId?: string | undefined;
                } | {};
            }, {
                data: {
                    id: string;
                    authorId: string;
                    issueId: string;
                    content: string;
                    createdAt?: Date | undefined;
                    updatedAt?: Date | undefined;
                    parentCommentId?: string | undefined;
                } | {};
            }>;
            403: z.ZodObject<{
                title: z.ZodString;
                status: z.ZodNumber;
                detail: z.ZodOptional<z.ZodString>;
                errors: z.ZodOptional<z.ZodArray<z.ZodType<ErrorObject, z.ZodTypeDef, ErrorObject>, "many">>;
            }, "strip", z.ZodTypeAny, {
                status: number;
                title: string;
                errors?: ErrorObject[] | undefined;
                detail?: string | undefined;
            }, {
                status: number;
                title: string;
                errors?: ErrorObject[] | undefined;
                detail?: string | undefined;
            }>;
            404: z.ZodObject<{
                title: z.ZodString;
                status: z.ZodNumber;
                detail: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                status: number;
                title: string;
                detail?: string | undefined;
            }, {
                status: number;
                title: string;
                detail?: string | undefined;
            }>;
            500: z.ZodObject<{
                title: z.ZodString;
                status: z.ZodNumber;
                detail: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                status: number;
                title: string;
                detail?: string | undefined;
            }, {
                status: number;
                title: string;
                detail?: string | undefined;
            }>;
        };
    };
    replyToIssue: {
        metadata: {
            readonly permissions: "create:comment";
        };
        summary: "Reply to issue";
        method: "POST";
        body: z.ZodObject<{
            content: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            content: string;
        }, {
            content: string;
        }>;
        path: "/api/issues/:issueId/reply";
        headers: z.ZodObject<{
            authorization: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            authorization: string;
        }, {
            authorization: string;
        }>;
        responses: {
            200: z.ZodObject<{
                data: z.ZodType<{
                    id: string;
                    authorId: string;
                    issueId: string;
                    content: string;
                    createdAt?: Date | undefined;
                    updatedAt?: Date | undefined;
                    parentCommentId?: string | undefined;
                }, z.ZodTypeDef, {
                    id: string;
                    authorId: string;
                    issueId: string;
                    content: string;
                    createdAt?: Date | undefined;
                    updatedAt?: Date | undefined;
                    parentCommentId?: string | undefined;
                }> | z.ZodObject<{}, "strip", z.ZodTypeAny, {}, {}>;
            }, "strip", z.ZodTypeAny, {
                data: {
                    id: string;
                    authorId: string;
                    issueId: string;
                    content: string;
                    createdAt?: Date | undefined;
                    updatedAt?: Date | undefined;
                    parentCommentId?: string | undefined;
                } | {};
            }, {
                data: {
                    id: string;
                    authorId: string;
                    issueId: string;
                    content: string;
                    createdAt?: Date | undefined;
                    updatedAt?: Date | undefined;
                    parentCommentId?: string | undefined;
                } | {};
            }>;
            403: z.ZodObject<{
                title: z.ZodString;
                status: z.ZodNumber;
                detail: z.ZodOptional<z.ZodString>;
                errors: z.ZodOptional<z.ZodArray<z.ZodType<ErrorObject, z.ZodTypeDef, ErrorObject>, "many">>;
            }, "strip", z.ZodTypeAny, {
                status: number;
                title: string;
                errors?: ErrorObject[] | undefined;
                detail?: string | undefined;
            }, {
                status: number;
                title: string;
                errors?: ErrorObject[] | undefined;
                detail?: string | undefined;
            }>;
            404: z.ZodObject<{
                title: z.ZodString;
                status: z.ZodNumber;
                detail: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                status: number;
                title: string;
                detail?: string | undefined;
            }, {
                status: number;
                title: string;
                detail?: string | undefined;
            }>;
            500: z.ZodObject<{
                title: z.ZodString;
                status: z.ZodNumber;
                detail: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                status: number;
                title: string;
                detail?: string | undefined;
            }, {
                status: number;
                title: string;
                detail?: string | undefined;
            }>;
        };
    };
    getIssueComments: {
        metadata: {
            readonly isPublic: true;
            readonly permissions: {};
        };
        summary: "Get all issue comments";
        method: "GET";
        path: "/api/issues/:issueId/comments";
        headers: z.ZodObject<{
            authorization: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            authorization?: string | undefined;
        }, {
            authorization?: string | undefined;
        }>;
        responses: {
            200: z.ZodObject<{
                data: z.ZodType<({
                    id: string;
                    issueId: string;
                    author: {
                        id: string;
                        username: string;
                        reputation: number;
                        avatar: string | null;
                        roleDisplayName: string;
                    };
                    content: string;
                    createdAt?: Date | undefined;
                    updatedAt?: Date | undefined;
                    parentCommentId?: string | undefined;
                    moderator?: {
                        id: string;
                        displayRole: string;
                        displayRoleColor: string;
                    } | undefined;
                } | {
                    id: string;
                    issueId: string;
                    author: {
                        id: string;
                        username: string;
                        reputation: number;
                        avatar: string | null;
                        roleDisplayName: string;
                    };
                    suspend: {
                        type: string;
                        reason: string;
                        by: string;
                        suspendedAt: Date;
                    };
                    createdAt?: Date | undefined;
                    updatedAt?: Date | undefined;
                    parentCommentId?: string | undefined;
                    moderator?: {
                        id: string;
                        displayRole: string;
                        displayRoleColor: string;
                    } | undefined;
                } | {
                    id: string;
                    issueId: string;
                    author: {
                        id: string;
                        username: string;
                        reputation: number;
                        avatar: string | null;
                        roleDisplayName: string;
                    };
                    content: string;
                    createdAt?: Date | undefined;
                    updatedAt?: Date | undefined;
                    parentCommentId?: string | undefined;
                    suspend?: {
                        type: string;
                        reason: string;
                        by: string;
                        suspendedAt: Date;
                    } | undefined;
                    reports?: string[] | undefined;
                    moderator?: {
                        id: string;
                        displayRole: string;
                        displayRoleColor: string;
                    } | undefined;
                })[], z.ZodTypeDef, ({
                    id: string;
                    issueId: string;
                    author: {
                        id: string;
                        username: string;
                        reputation: number;
                        avatar: string | null;
                        roleDisplayName: string;
                    };
                    content: string;
                    createdAt?: Date | undefined;
                    updatedAt?: Date | undefined;
                    parentCommentId?: string | undefined;
                    moderator?: {
                        id: string;
                        displayRole: string;
                        displayRoleColor: string;
                    } | undefined;
                } | {
                    id: string;
                    issueId: string;
                    author: {
                        id: string;
                        username: string;
                        reputation: number;
                        avatar: string | null;
                        roleDisplayName: string;
                    };
                    suspend: {
                        type: string;
                        reason: string;
                        by: string;
                        suspendedAt: Date;
                    };
                    createdAt?: Date | undefined;
                    updatedAt?: Date | undefined;
                    parentCommentId?: string | undefined;
                    moderator?: {
                        id: string;
                        displayRole: string;
                        displayRoleColor: string;
                    } | undefined;
                } | {
                    id: string;
                    issueId: string;
                    author: {
                        id: string;
                        username: string;
                        reputation: number;
                        avatar: string | null;
                        roleDisplayName: string;
                    };
                    content: string;
                    createdAt?: Date | undefined;
                    updatedAt?: Date | undefined;
                    parentCommentId?: string | undefined;
                    suspend?: {
                        type: string;
                        reason: string;
                        by: string;
                        suspendedAt: Date;
                    } | undefined;
                    reports?: string[] | undefined;
                    moderator?: {
                        id: string;
                        displayRole: string;
                        displayRoleColor: string;
                    } | undefined;
                })[]> | z.ZodObject<{}, "strip", z.ZodTypeAny, {}, {}>;
            }, "strip", z.ZodTypeAny, {
                data: ({
                    id: string;
                    issueId: string;
                    author: {
                        id: string;
                        username: string;
                        reputation: number;
                        avatar: string | null;
                        roleDisplayName: string;
                    };
                    content: string;
                    createdAt?: Date | undefined;
                    updatedAt?: Date | undefined;
                    parentCommentId?: string | undefined;
                    moderator?: {
                        id: string;
                        displayRole: string;
                        displayRoleColor: string;
                    } | undefined;
                } | {
                    id: string;
                    issueId: string;
                    author: {
                        id: string;
                        username: string;
                        reputation: number;
                        avatar: string | null;
                        roleDisplayName: string;
                    };
                    suspend: {
                        type: string;
                        reason: string;
                        by: string;
                        suspendedAt: Date;
                    };
                    createdAt?: Date | undefined;
                    updatedAt?: Date | undefined;
                    parentCommentId?: string | undefined;
                    moderator?: {
                        id: string;
                        displayRole: string;
                        displayRoleColor: string;
                    } | undefined;
                } | {
                    id: string;
                    issueId: string;
                    author: {
                        id: string;
                        username: string;
                        reputation: number;
                        avatar: string | null;
                        roleDisplayName: string;
                    };
                    content: string;
                    createdAt?: Date | undefined;
                    updatedAt?: Date | undefined;
                    parentCommentId?: string | undefined;
                    suspend?: {
                        type: string;
                        reason: string;
                        by: string;
                        suspendedAt: Date;
                    } | undefined;
                    reports?: string[] | undefined;
                    moderator?: {
                        id: string;
                        displayRole: string;
                        displayRoleColor: string;
                    } | undefined;
                })[] | {};
            }, {
                data: ({
                    id: string;
                    issueId: string;
                    author: {
                        id: string;
                        username: string;
                        reputation: number;
                        avatar: string | null;
                        roleDisplayName: string;
                    };
                    content: string;
                    createdAt?: Date | undefined;
                    updatedAt?: Date | undefined;
                    parentCommentId?: string | undefined;
                    moderator?: {
                        id: string;
                        displayRole: string;
                        displayRoleColor: string;
                    } | undefined;
                } | {
                    id: string;
                    issueId: string;
                    author: {
                        id: string;
                        username: string;
                        reputation: number;
                        avatar: string | null;
                        roleDisplayName: string;
                    };
                    suspend: {
                        type: string;
                        reason: string;
                        by: string;
                        suspendedAt: Date;
                    };
                    createdAt?: Date | undefined;
                    updatedAt?: Date | undefined;
                    parentCommentId?: string | undefined;
                    moderator?: {
                        id: string;
                        displayRole: string;
                        displayRoleColor: string;
                    } | undefined;
                } | {
                    id: string;
                    issueId: string;
                    author: {
                        id: string;
                        username: string;
                        reputation: number;
                        avatar: string | null;
                        roleDisplayName: string;
                    };
                    content: string;
                    createdAt?: Date | undefined;
                    updatedAt?: Date | undefined;
                    parentCommentId?: string | undefined;
                    suspend?: {
                        type: string;
                        reason: string;
                        by: string;
                        suspendedAt: Date;
                    } | undefined;
                    reports?: string[] | undefined;
                    moderator?: {
                        id: string;
                        displayRole: string;
                        displayRoleColor: string;
                    } | undefined;
                })[] | {};
            }>;
            404: z.ZodObject<{
                title: z.ZodString;
                status: z.ZodNumber;
                detail: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                status: number;
                title: string;
                detail?: string | undefined;
            }, {
                status: number;
                title: string;
                detail?: string | undefined;
            }>;
            500: z.ZodObject<{
                title: z.ZodString;
                status: z.ZodNumber;
                detail: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                status: number;
                title: string;
                detail?: string | undefined;
            }, {
                status: number;
                title: string;
                detail?: string | undefined;
            }>;
        };
    };
};

declare const commentSchema: {
    RegularDTO: z.ZodObject<{
        id: z.ZodString;
        content: z.ZodString;
        authorId: z.ZodString;
        issueId: z.ZodString;
        parentCommentId: z.ZodOptional<z.ZodString>;
        createdAt: z.ZodOptional<z.ZodDate>;
        updatedAt: z.ZodOptional<z.ZodDate>;
    }, "strip", z.ZodTypeAny, {
        id: string;
        authorId: string;
        issueId: string;
        content: string;
        createdAt?: Date | undefined;
        updatedAt?: Date | undefined;
        parentCommentId?: string | undefined;
    }, {
        id: string;
        authorId: string;
        issueId: string;
        content: string;
        createdAt?: Date | undefined;
        updatedAt?: Date | undefined;
        parentCommentId?: string | undefined;
    }>;
    SuspendDTO: z.ZodObject<z.objectUtil.extendShape<Omit<{
        id: z.ZodString;
        content: z.ZodString;
        authorId: z.ZodString;
        issueId: z.ZodString;
        parentCommentId: z.ZodOptional<z.ZodString>;
        createdAt: z.ZodOptional<z.ZodDate>;
        updatedAt: z.ZodOptional<z.ZodDate>;
    }, "content">, {
        suspend: z.ZodObject<{
            reason: z.ZodString;
            date: z.ZodDate;
            suspendedBy: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            date: Date;
            reason: string;
            suspendedBy: string;
        }, {
            date: Date;
            reason: string;
            suspendedBy: string;
        }>;
    }>, "strip", z.ZodTypeAny, {
        id: string;
        authorId: string;
        issueId: string;
        suspend: {
            date: Date;
            reason: string;
            suspendedBy: string;
        };
        createdAt?: Date | undefined;
        updatedAt?: Date | undefined;
        parentCommentId?: string | undefined;
    }, {
        id: string;
        authorId: string;
        issueId: string;
        suspend: {
            date: Date;
            reason: string;
            suspendedBy: string;
        };
        createdAt?: Date | undefined;
        updatedAt?: Date | undefined;
        parentCommentId?: string | undefined;
    }>;
    ConfidentialDTO: z.ZodObject<z.objectUtil.extendShape<{
        id: z.ZodString;
        content: z.ZodString;
        authorId: z.ZodString;
        issueId: z.ZodString;
        parentCommentId: z.ZodOptional<z.ZodString>;
        createdAt: z.ZodOptional<z.ZodDate>;
        updatedAt: z.ZodOptional<z.ZodDate>;
    }, {
        suspend: z.ZodOptional<z.ZodObject<{
            reason: z.ZodString;
            date: z.ZodDate;
            suspendedBy: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            date: Date;
            reason: string;
            suspendedBy: string;
        }, {
            date: Date;
            reason: string;
            suspendedBy: string;
        }>>;
        reports: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    }>, "strip", z.ZodTypeAny, {
        id: string;
        authorId: string;
        issueId: string;
        content: string;
        createdAt?: Date | undefined;
        updatedAt?: Date | undefined;
        parentCommentId?: string | undefined;
        suspend?: {
            date: Date;
            reason: string;
            suspendedBy: string;
        } | undefined;
        reports?: string[] | undefined;
    }, {
        id: string;
        authorId: string;
        issueId: string;
        content: string;
        createdAt?: Date | undefined;
        updatedAt?: Date | undefined;
        parentCommentId?: string | undefined;
        suspend?: {
            date: Date;
            reason: string;
            suspendedBy: string;
        } | undefined;
        reports?: string[] | undefined;
    }>;
    RegularDetailsDTO: z.ZodObject<{
        id: z.ZodString;
        author: z.ZodObject<{
            id: z.ZodString;
            avatar: z.ZodNullable<z.ZodString>;
            username: z.ZodString;
            roleDisplayName: z.ZodString;
            reputation: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            id: string;
            username: string;
            reputation: number;
            avatar: string | null;
            roleDisplayName: string;
        }, {
            id: string;
            username: string;
            reputation: number;
            avatar: string | null;
            roleDisplayName: string;
        }>;
        moderator: z.ZodOptional<z.ZodObject<{
            id: z.ZodString;
            displayRole: z.ZodString;
            displayRoleColor: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            id: string;
            displayRole: string;
            displayRoleColor: string;
        }, {
            id: string;
            displayRole: string;
            displayRoleColor: string;
        }>>;
        content: z.ZodString;
        issueId: z.ZodString;
        parentCommentId: z.ZodOptional<z.ZodString>;
        createdAt: z.ZodOptional<z.ZodDate>;
        updatedAt: z.ZodOptional<z.ZodDate>;
    }, "strip", z.ZodTypeAny, {
        id: string;
        issueId: string;
        author: {
            id: string;
            username: string;
            reputation: number;
            avatar: string | null;
            roleDisplayName: string;
        };
        content: string;
        createdAt?: Date | undefined;
        updatedAt?: Date | undefined;
        parentCommentId?: string | undefined;
        moderator?: {
            id: string;
            displayRole: string;
            displayRoleColor: string;
        } | undefined;
    }, {
        id: string;
        issueId: string;
        author: {
            id: string;
            username: string;
            reputation: number;
            avatar: string | null;
            roleDisplayName: string;
        };
        content: string;
        createdAt?: Date | undefined;
        updatedAt?: Date | undefined;
        parentCommentId?: string | undefined;
        moderator?: {
            id: string;
            displayRole: string;
            displayRoleColor: string;
        } | undefined;
    }>;
    SuspendDetailsDTO: z.ZodObject<z.objectUtil.extendShape<Omit<{
        id: z.ZodString;
        author: z.ZodObject<{
            id: z.ZodString;
            avatar: z.ZodNullable<z.ZodString>;
            username: z.ZodString;
            roleDisplayName: z.ZodString;
            reputation: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            id: string;
            username: string;
            reputation: number;
            avatar: string | null;
            roleDisplayName: string;
        }, {
            id: string;
            username: string;
            reputation: number;
            avatar: string | null;
            roleDisplayName: string;
        }>;
        moderator: z.ZodOptional<z.ZodObject<{
            id: z.ZodString;
            displayRole: z.ZodString;
            displayRoleColor: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            id: string;
            displayRole: string;
            displayRoleColor: string;
        }, {
            id: string;
            displayRole: string;
            displayRoleColor: string;
        }>>;
        content: z.ZodString;
        issueId: z.ZodString;
        parentCommentId: z.ZodOptional<z.ZodString>;
        createdAt: z.ZodOptional<z.ZodDate>;
        updatedAt: z.ZodOptional<z.ZodDate>;
    }, "content">, {
        suspend: z.ZodObject<{
            reason: z.ZodString;
            type: z.ZodString;
            by: z.ZodString;
            suspendedAt: z.ZodDate;
        }, "strip", z.ZodTypeAny, {
            type: string;
            reason: string;
            by: string;
            suspendedAt: Date;
        }, {
            type: string;
            reason: string;
            by: string;
            suspendedAt: Date;
        }>;
    }>, "strip", z.ZodTypeAny, {
        id: string;
        issueId: string;
        author: {
            id: string;
            username: string;
            reputation: number;
            avatar: string | null;
            roleDisplayName: string;
        };
        suspend: {
            type: string;
            reason: string;
            by: string;
            suspendedAt: Date;
        };
        createdAt?: Date | undefined;
        updatedAt?: Date | undefined;
        parentCommentId?: string | undefined;
        moderator?: {
            id: string;
            displayRole: string;
            displayRoleColor: string;
        } | undefined;
    }, {
        id: string;
        issueId: string;
        author: {
            id: string;
            username: string;
            reputation: number;
            avatar: string | null;
            roleDisplayName: string;
        };
        suspend: {
            type: string;
            reason: string;
            by: string;
            suspendedAt: Date;
        };
        createdAt?: Date | undefined;
        updatedAt?: Date | undefined;
        parentCommentId?: string | undefined;
        moderator?: {
            id: string;
            displayRole: string;
            displayRoleColor: string;
        } | undefined;
    }>;
    ConfidentialDetailsDTO: z.ZodObject<z.objectUtil.extendShape<{
        id: z.ZodString;
        author: z.ZodObject<{
            id: z.ZodString;
            avatar: z.ZodNullable<z.ZodString>;
            username: z.ZodString;
            roleDisplayName: z.ZodString;
            reputation: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            id: string;
            username: string;
            reputation: number;
            avatar: string | null;
            roleDisplayName: string;
        }, {
            id: string;
            username: string;
            reputation: number;
            avatar: string | null;
            roleDisplayName: string;
        }>;
        moderator: z.ZodOptional<z.ZodObject<{
            id: z.ZodString;
            displayRole: z.ZodString;
            displayRoleColor: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            id: string;
            displayRole: string;
            displayRoleColor: string;
        }, {
            id: string;
            displayRole: string;
            displayRoleColor: string;
        }>>;
        content: z.ZodString;
        issueId: z.ZodString;
        parentCommentId: z.ZodOptional<z.ZodString>;
        createdAt: z.ZodOptional<z.ZodDate>;
        updatedAt: z.ZodOptional<z.ZodDate>;
    }, {
        suspend: z.ZodOptional<z.ZodObject<{
            reason: z.ZodString;
            type: z.ZodString;
            by: z.ZodString;
            suspendedAt: z.ZodDate;
        }, "strip", z.ZodTypeAny, {
            type: string;
            reason: string;
            by: string;
            suspendedAt: Date;
        }, {
            type: string;
            reason: string;
            by: string;
            suspendedAt: Date;
        }>>;
        reports: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    }>, "strip", z.ZodTypeAny, {
        id: string;
        issueId: string;
        author: {
            id: string;
            username: string;
            reputation: number;
            avatar: string | null;
            roleDisplayName: string;
        };
        content: string;
        createdAt?: Date | undefined;
        updatedAt?: Date | undefined;
        parentCommentId?: string | undefined;
        suspend?: {
            type: string;
            reason: string;
            by: string;
            suspendedAt: Date;
        } | undefined;
        reports?: string[] | undefined;
        moderator?: {
            id: string;
            displayRole: string;
            displayRoleColor: string;
        } | undefined;
    }, {
        id: string;
        issueId: string;
        author: {
            id: string;
            username: string;
            reputation: number;
            avatar: string | null;
            roleDisplayName: string;
        };
        content: string;
        createdAt?: Date | undefined;
        updatedAt?: Date | undefined;
        parentCommentId?: string | undefined;
        suspend?: {
            type: string;
            reason: string;
            by: string;
            suspendedAt: Date;
        } | undefined;
        reports?: string[] | undefined;
        moderator?: {
            id: string;
            displayRole: string;
            displayRoleColor: string;
        } | undefined;
    }>;
};

declare const issueSubscribeSchema: {
    subscribe: {
        metadata: {
            readonly permissions: "subscribe:issue";
        };
        summary: "Susbcribe notification to the issue";
        method: "POST";
        body: z.ZodObject<{
            issueId: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            issueId: string;
        }, {
            issueId: string;
        }>;
        path: "/api/issues/:issueId/subscribe";
        headers: z.ZodObject<{
            authorization: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            authorization: string;
        }, {
            authorization: string;
        }>;
        responses: {
            201: z.ZodObject<{
                data: z.ZodType<{
                    id: string;
                    memberId: string;
                    issueId: string;
                    createdAt: string;
                    updatedAt: string;
                }, z.ZodTypeDef, {
                    id: string;
                    memberId: string;
                    issueId: string;
                    createdAt: string;
                    updatedAt: string;
                }> | z.ZodObject<{}, "strip", z.ZodTypeAny, {}, {}>;
            }, "strip", z.ZodTypeAny, {
                data: {
                    id: string;
                    memberId: string;
                    issueId: string;
                    createdAt: string;
                    updatedAt: string;
                } | {};
            }, {
                data: {
                    id: string;
                    memberId: string;
                    issueId: string;
                    createdAt: string;
                    updatedAt: string;
                } | {};
            }>;
            404: z.ZodObject<{
                title: z.ZodString;
                status: z.ZodNumber;
                detail: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                status: number;
                title: string;
                detail?: string | undefined;
            }, {
                status: number;
                title: string;
                detail?: string | undefined;
            }>;
            409: z.ZodObject<{
                title: z.ZodString;
                status: z.ZodNumber;
                detail: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                status: number;
                title: string;
                detail?: string | undefined;
            }, {
                status: number;
                title: string;
                detail?: string | undefined;
            }>;
            500: z.ZodObject<{
                title: z.ZodString;
                status: z.ZodNumber;
                detail: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                status: number;
                title: string;
                detail?: string | undefined;
            }, {
                status: number;
                title: string;
                detail?: string | undefined;
            }>;
        };
    };
    unsubscribe: {
        metadata: {
            readonly permissions: "subscribe:issue";
        };
        summary: "Unusubscribe issue notification to the issue";
        method: "POST";
        body: z.ZodObject<{
            issueId: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            issueId: string;
        }, {
            issueId: string;
        }>;
        path: "/api/issues/:issueId/unsubscribe";
        headers: z.ZodObject<{
            authorization: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            authorization: string;
        }, {
            authorization: string;
        }>;
        responses: {
            204: z.ZodNullable<z.ZodObject<{}, "strip", z.ZodTypeAny, {}, {}>>;
            404: z.ZodObject<{
                title: z.ZodString;
                status: z.ZodNumber;
                detail: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                status: number;
                title: string;
                detail?: string | undefined;
            }, {
                status: number;
                title: string;
                detail?: string | undefined;
            }>;
            500: z.ZodObject<{
                title: z.ZodString;
                status: z.ZodNumber;
                detail: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                status: number;
                title: string;
                detail?: string | undefined;
            }, {
                status: number;
                title: string;
                detail?: string | undefined;
            }>;
        };
    };
    getMySubscribedIssues: {
        metadata: {
            readonly permissions: "subscribe:issue";
        };
        query: z.ZodObject<{
            page: z.ZodOptional<z.ZodString>;
            limit: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            limit?: string | undefined;
            page?: string | undefined;
        }, {
            limit?: string | undefined;
            page?: string | undefined;
        }>;
        summary: "Get my subscribed issues";
        method: "GET";
        path: "/api/issues/subscribed";
        headers: z.ZodObject<{
            authorization: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            authorization: string;
        }, {
            authorization: string;
        }>;
        responses: {
            200: z.ZodObject<{
                data: z.ZodType<{
                    id: string;
                    authorId: string;
                    memberId: string;
                    issueId: string;
                    createdAt: string;
                    updatedAt: string;
                }[], z.ZodTypeDef, {
                    id: string;
                    authorId: string;
                    memberId: string;
                    issueId: string;
                    createdAt: string;
                    updatedAt: string;
                }[]> | z.ZodObject<{}, "strip", z.ZodTypeAny, {}, {}>;
            }, "strip", z.ZodTypeAny, {
                data: {
                    id: string;
                    authorId: string;
                    memberId: string;
                    issueId: string;
                    createdAt: string;
                    updatedAt: string;
                }[] | {};
            }, {
                data: {
                    id: string;
                    authorId: string;
                    memberId: string;
                    issueId: string;
                    createdAt: string;
                    updatedAt: string;
                }[] | {};
            }>;
            500: z.ZodObject<{
                title: z.ZodString;
                status: z.ZodNumber;
                detail: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                status: number;
                title: string;
                detail?: string | undefined;
            }, {
                status: number;
                title: string;
                detail?: string | undefined;
            }>;
        };
    };
};

declare const issueConfidenceSchema: {
    ConfidentialDTO: z.ZodObject<{
        id: z.ZodString;
        memberId: z.ZodString;
        issueId: z.ZodString;
        createdAt: z.ZodString;
        updatedAt: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        id: string;
        memberId: string;
        issueId: string;
        createdAt: string;
        updatedAt: string;
    }, {
        id: string;
        memberId: string;
        issueId: string;
        createdAt: string;
        updatedAt: string;
    }>;
    ConfidentialDetailsDTO: z.ZodObject<z.objectUtil.extendShape<Omit<{
        id: z.ZodString;
        memberId: z.ZodString;
        issueId: z.ZodString;
        createdAt: z.ZodString;
        updatedAt: z.ZodString;
    }, "issueId">, {
        issue: z.ZodObject<z.objectUtil.extendShape<Omit<z.objectUtil.extendShape<{
            id: z.ZodString;
            title: z.ZodString;
            tags: z.ZodArray<z.ZodString, "many">;
            state: z.ZodString;
            key: z.ZodString;
            schema: z.ZodArray<z.ZodDiscriminatedUnion<"type", [z.ZodObject<z.objectUtil.extendShape<{
                name: z.ZodString;
                label: z.ZodString;
                placeholder: z.ZodOptional<z.ZodString>;
                helperText: z.ZodOptional<z.ZodString>;
                visibility: z.ZodString;
                required: z.ZodOptional<z.ZodBoolean>;
            }, {
                type: z.ZodLiteral<"NUMBER">;
                options: z.ZodObject<{
                    min: z.ZodOptional<z.ZodNumber>;
                    max: z.ZodOptional<z.ZodNumber>;
                    noDecimal: z.ZodOptional<z.ZodBoolean>;
                }, "strip", z.ZodTypeAny, {
                    min?: number | undefined;
                    max?: number | undefined;
                    noDecimal?: boolean | undefined;
                }, {
                    min?: number | undefined;
                    max?: number | undefined;
                    noDecimal?: boolean | undefined;
                }>;
            }>, "strip", z.ZodTypeAny, {
                options: {
                    min?: number | undefined;
                    max?: number | undefined;
                    noDecimal?: boolean | undefined;
                };
                type: "NUMBER";
                name: string;
                label: string;
                visibility: string;
                placeholder?: string | undefined;
                helperText?: string | undefined;
                required?: boolean | undefined;
            }, {
                options: {
                    min?: number | undefined;
                    max?: number | undefined;
                    noDecimal?: boolean | undefined;
                };
                type: "NUMBER";
                name: string;
                label: string;
                visibility: string;
                placeholder?: string | undefined;
                helperText?: string | undefined;
                required?: boolean | undefined;
            }>, z.ZodObject<z.objectUtil.extendShape<{
                name: z.ZodString;
                label: z.ZodString;
                placeholder: z.ZodOptional<z.ZodString>;
                helperText: z.ZodOptional<z.ZodString>;
                visibility: z.ZodString;
                required: z.ZodOptional<z.ZodBoolean>;
            }, {
                type: z.ZodLiteral<"TEXT">;
                options: z.ZodObject<{
                    minLength: z.ZodOptional<z.ZodNumber>;
                    maxLength: z.ZodOptional<z.ZodNumber>;
                    pattern: z.ZodOptional<z.ZodString>;
                }, "strip", z.ZodTypeAny, {
                    minLength?: number | undefined;
                    maxLength?: number | undefined;
                    pattern?: string | undefined;
                }, {
                    minLength?: number | undefined;
                    maxLength?: number | undefined;
                    pattern?: string | undefined;
                }>;
            }>, "strip", z.ZodTypeAny, {
                options: {
                    minLength?: number | undefined;
                    maxLength?: number | undefined;
                    pattern?: string | undefined;
                };
                type: "TEXT";
                name: string;
                label: string;
                visibility: string;
                placeholder?: string | undefined;
                helperText?: string | undefined;
                required?: boolean | undefined;
            }, {
                options: {
                    minLength?: number | undefined;
                    maxLength?: number | undefined;
                    pattern?: string | undefined;
                };
                type: "TEXT";
                name: string;
                label: string;
                visibility: string;
                placeholder?: string | undefined;
                helperText?: string | undefined;
                required?: boolean | undefined;
            }>, z.ZodObject<z.objectUtil.extendShape<{
                name: z.ZodString;
                label: z.ZodString;
                placeholder: z.ZodOptional<z.ZodString>;
                helperText: z.ZodOptional<z.ZodString>;
                visibility: z.ZodString;
                required: z.ZodOptional<z.ZodBoolean>;
            }, {
                type: z.ZodLiteral<"SELECT">;
                options: z.ZodObject<{
                    isMulti: z.ZodBoolean;
                    optionList: z.ZodArray<z.ZodString, "many">;
                    maxSelect: z.ZodNullable<z.ZodNumber>;
                    minSelect: z.ZodNullable<z.ZodNumber>;
                }, "strip", z.ZodTypeAny, {
                    isMulti: boolean;
                    optionList: string[];
                    maxSelect: number | null;
                    minSelect: number | null;
                }, {
                    isMulti: boolean;
                    optionList: string[];
                    maxSelect: number | null;
                    minSelect: number | null;
                }>;
            }>, "strip", z.ZodTypeAny, {
                options: {
                    isMulti: boolean;
                    optionList: string[];
                    maxSelect: number | null;
                    minSelect: number | null;
                };
                type: "SELECT";
                name: string;
                label: string;
                visibility: string;
                placeholder?: string | undefined;
                helperText?: string | undefined;
                required?: boolean | undefined;
            }, {
                options: {
                    isMulti: boolean;
                    optionList: string[];
                    maxSelect: number | null;
                    minSelect: number | null;
                };
                type: "SELECT";
                name: string;
                label: string;
                visibility: string;
                placeholder?: string | undefined;
                helperText?: string | undefined;
                required?: boolean | undefined;
            }>, z.ZodObject<z.objectUtil.extendShape<{
                name: z.ZodString;
                label: z.ZodString;
                placeholder: z.ZodOptional<z.ZodString>;
                helperText: z.ZodOptional<z.ZodString>;
                visibility: z.ZodString;
                required: z.ZodOptional<z.ZodBoolean>;
            }, {
                type: z.ZodLiteral<"DATETIME">;
                options: z.ZodObject<{
                    min: z.ZodOptional<z.ZodString>;
                    max: z.ZodOptional<z.ZodString>;
                }, "strip", z.ZodTypeAny, {
                    min?: string | undefined;
                    max?: string | undefined;
                }, {
                    min?: string | undefined;
                    max?: string | undefined;
                }>;
            }>, "strip", z.ZodTypeAny, {
                options: {
                    min?: string | undefined;
                    max?: string | undefined;
                };
                type: "DATETIME";
                name: string;
                label: string;
                visibility: string;
                placeholder?: string | undefined;
                helperText?: string | undefined;
                required?: boolean | undefined;
            }, {
                options: {
                    min?: string | undefined;
                    max?: string | undefined;
                };
                type: "DATETIME";
                name: string;
                label: string;
                visibility: string;
                placeholder?: string | undefined;
                helperText?: string | undefined;
                required?: boolean | undefined;
            }>, z.ZodObject<z.objectUtil.extendShape<{
                name: z.ZodString;
                label: z.ZodString;
                placeholder: z.ZodOptional<z.ZodString>;
                helperText: z.ZodOptional<z.ZodString>;
                visibility: z.ZodString;
                required: z.ZodOptional<z.ZodBoolean>;
            }, {
                type: z.ZodLiteral<"RICHTEXT">;
                options: z.ZodObject<{
                    minLength: z.ZodOptional<z.ZodNumber>;
                    maxLength: z.ZodOptional<z.ZodNumber>;
                    disableImages: z.ZodOptional<z.ZodBoolean>;
                }, "strip", z.ZodTypeAny, {
                    minLength?: number | undefined;
                    maxLength?: number | undefined;
                    disableImages?: boolean | undefined;
                }, {
                    minLength?: number | undefined;
                    maxLength?: number | undefined;
                    disableImages?: boolean | undefined;
                }>;
            }>, "strip", z.ZodTypeAny, {
                options: {
                    minLength?: number | undefined;
                    maxLength?: number | undefined;
                    disableImages?: boolean | undefined;
                };
                type: "RICHTEXT";
                name: string;
                label: string;
                visibility: string;
                placeholder?: string | undefined;
                helperText?: string | undefined;
                required?: boolean | undefined;
            }, {
                options: {
                    minLength?: number | undefined;
                    maxLength?: number | undefined;
                    disableImages?: boolean | undefined;
                };
                type: "RICHTEXT";
                name: string;
                label: string;
                visibility: string;
                placeholder?: string | undefined;
                helperText?: string | undefined;
                required?: boolean | undefined;
            }>, z.ZodObject<z.objectUtil.extendShape<{
                name: z.ZodString;
                type: z.ZodString;
            }, {
                type: z.ZodLiteral<"SEPARATOR">;
            }>, "strip", z.ZodTypeAny, {
                type: "SEPARATOR";
                name: string;
            }, {
                type: "SEPARATOR";
                name: string;
            }>]>, "many">;
            fields: z.ZodArray<z.ZodObject<{
                name: z.ZodString;
                type: z.ZodString;
                value: z.ZodAny;
            }, "strip", z.ZodTypeAny, {
                type: string;
                name: string;
                value?: any;
            }, {
                type: string;
                name: string;
                value?: any;
            }>, "many">;
            points: z.ZodNumber;
            commentsCount: z.ZodNumber;
            authorId: z.ZodString;
            projectId: z.ZodString;
            isSuspend: z.ZodOptional<z.ZodBoolean>;
            visibility: z.ZodString;
            lastChangeAt: z.ZodDate;
            createdAt: z.ZodDate;
        }, {
            id: z.ZodString;
            title: z.ZodString;
            tags: z.ZodArray<z.ZodObject<{
                id: z.ZodString;
                displayName: z.ZodString;
                name: z.ZodString;
                color: z.ZodString;
                description: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                id: string;
                name: string;
                description: string;
                displayName: string;
                color: string;
            }, {
                id: string;
                name: string;
                description: string;
                displayName: string;
                color: string;
            }>, "many">;
            state: z.ZodString;
            key: z.ZodString;
            points: z.ZodNumber;
            commentsCount: z.ZodNumber;
            fields: z.ZodArray<z.ZodObject<{
                name: z.ZodString;
                type: z.ZodString;
                value: z.ZodAny;
            }, "strip", z.ZodTypeAny, {
                type: string;
                name: string;
                value?: any;
            }, {
                type: string;
                name: string;
                value?: any;
            }>, "many">;
            author: z.ZodObject<{
                id: z.ZodString;
                username: z.ZodString;
                email: z.ZodString;
                roleName: z.ZodString;
                roleDisplayName: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                id: string;
                username: string;
                email: string;
                roleDisplayName: string;
                roleName: string;
            }, {
                id: string;
                username: string;
                email: string;
                roleDisplayName: string;
                roleName: string;
            }>;
            project: z.ZodObject<{
                id: z.ZodString;
                slug: z.ZodString;
                name: z.ZodString;
                displayName: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                id: string;
                name: string;
                slug: string;
                displayName: string;
            }, {
                id: string;
                name: string;
                slug: string;
                displayName: string;
            }>;
            group: z.ZodObject<{
                id: z.ZodString;
                slug: z.ZodString;
                name: z.ZodString;
                displayName: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                id: string;
                name: string;
                slug: string;
                displayName: string;
            }, {
                id: string;
                name: string;
                slug: string;
                displayName: string;
            }>;
            isSuspend: z.ZodOptional<z.ZodBoolean>;
            visibility: z.ZodString;
            lastChangeAt: z.ZodDate;
            createdAt: z.ZodDate;
        }>, "fields">, {
            updatedAt: z.ZodDate;
        }>, "strip", z.ZodTypeAny, {
            id: string;
            authorId: string;
            createdAt: Date;
            updatedAt: Date;
            title: string;
            key: string;
            tags: {
                id: string;
                name: string;
                description: string;
                displayName: string;
                color: string;
            }[];
            author: {
                id: string;
                username: string;
                email: string;
                roleDisplayName: string;
                roleName: string;
            };
            visibility: string;
            projectId: string;
            schema: ({
                options: {
                    min?: number | undefined;
                    max?: number | undefined;
                    noDecimal?: boolean | undefined;
                };
                type: "NUMBER";
                name: string;
                label: string;
                visibility: string;
                placeholder?: string | undefined;
                helperText?: string | undefined;
                required?: boolean | undefined;
            } | {
                options: {
                    minLength?: number | undefined;
                    maxLength?: number | undefined;
                    pattern?: string | undefined;
                };
                type: "TEXT";
                name: string;
                label: string;
                visibility: string;
                placeholder?: string | undefined;
                helperText?: string | undefined;
                required?: boolean | undefined;
            } | {
                options: {
                    isMulti: boolean;
                    optionList: string[];
                    maxSelect: number | null;
                    minSelect: number | null;
                };
                type: "SELECT";
                name: string;
                label: string;
                visibility: string;
                placeholder?: string | undefined;
                helperText?: string | undefined;
                required?: boolean | undefined;
            } | {
                options: {
                    min?: string | undefined;
                    max?: string | undefined;
                };
                type: "DATETIME";
                name: string;
                label: string;
                visibility: string;
                placeholder?: string | undefined;
                helperText?: string | undefined;
                required?: boolean | undefined;
            } | {
                options: {
                    minLength?: number | undefined;
                    maxLength?: number | undefined;
                    disableImages?: boolean | undefined;
                };
                type: "RICHTEXT";
                name: string;
                label: string;
                visibility: string;
                placeholder?: string | undefined;
                helperText?: string | undefined;
                required?: boolean | undefined;
            } | {
                type: "SEPARATOR";
                name: string;
            })[];
            state: string;
            points: number;
            commentsCount: number;
            lastChangeAt: Date;
            project: {
                id: string;
                name: string;
                slug: string;
                displayName: string;
            };
            group: {
                id: string;
                name: string;
                slug: string;
                displayName: string;
            };
            isSuspend?: boolean | undefined;
        }, {
            id: string;
            authorId: string;
            createdAt: Date;
            updatedAt: Date;
            title: string;
            key: string;
            tags: {
                id: string;
                name: string;
                description: string;
                displayName: string;
                color: string;
            }[];
            author: {
                id: string;
                username: string;
                email: string;
                roleDisplayName: string;
                roleName: string;
            };
            visibility: string;
            projectId: string;
            schema: ({
                options: {
                    min?: number | undefined;
                    max?: number | undefined;
                    noDecimal?: boolean | undefined;
                };
                type: "NUMBER";
                name: string;
                label: string;
                visibility: string;
                placeholder?: string | undefined;
                helperText?: string | undefined;
                required?: boolean | undefined;
            } | {
                options: {
                    minLength?: number | undefined;
                    maxLength?: number | undefined;
                    pattern?: string | undefined;
                };
                type: "TEXT";
                name: string;
                label: string;
                visibility: string;
                placeholder?: string | undefined;
                helperText?: string | undefined;
                required?: boolean | undefined;
            } | {
                options: {
                    isMulti: boolean;
                    optionList: string[];
                    maxSelect: number | null;
                    minSelect: number | null;
                };
                type: "SELECT";
                name: string;
                label: string;
                visibility: string;
                placeholder?: string | undefined;
                helperText?: string | undefined;
                required?: boolean | undefined;
            } | {
                options: {
                    min?: string | undefined;
                    max?: string | undefined;
                };
                type: "DATETIME";
                name: string;
                label: string;
                visibility: string;
                placeholder?: string | undefined;
                helperText?: string | undefined;
                required?: boolean | undefined;
            } | {
                options: {
                    minLength?: number | undefined;
                    maxLength?: number | undefined;
                    disableImages?: boolean | undefined;
                };
                type: "RICHTEXT";
                name: string;
                label: string;
                visibility: string;
                placeholder?: string | undefined;
                helperText?: string | undefined;
                required?: boolean | undefined;
            } | {
                type: "SEPARATOR";
                name: string;
            })[];
            state: string;
            points: number;
            commentsCount: number;
            lastChangeAt: Date;
            project: {
                id: string;
                name: string;
                slug: string;
                displayName: string;
            };
            group: {
                id: string;
                name: string;
                slug: string;
                displayName: string;
            };
            isSuspend?: boolean | undefined;
        }>;
    }>, "strip", z.ZodTypeAny, {
        id: string;
        memberId: string;
        createdAt: string;
        updatedAt: string;
        issue: {
            id: string;
            authorId: string;
            createdAt: Date;
            updatedAt: Date;
            title: string;
            key: string;
            tags: {
                id: string;
                name: string;
                description: string;
                displayName: string;
                color: string;
            }[];
            author: {
                id: string;
                username: string;
                email: string;
                roleDisplayName: string;
                roleName: string;
            };
            visibility: string;
            projectId: string;
            schema: ({
                options: {
                    min?: number | undefined;
                    max?: number | undefined;
                    noDecimal?: boolean | undefined;
                };
                type: "NUMBER";
                name: string;
                label: string;
                visibility: string;
                placeholder?: string | undefined;
                helperText?: string | undefined;
                required?: boolean | undefined;
            } | {
                options: {
                    minLength?: number | undefined;
                    maxLength?: number | undefined;
                    pattern?: string | undefined;
                };
                type: "TEXT";
                name: string;
                label: string;
                visibility: string;
                placeholder?: string | undefined;
                helperText?: string | undefined;
                required?: boolean | undefined;
            } | {
                options: {
                    isMulti: boolean;
                    optionList: string[];
                    maxSelect: number | null;
                    minSelect: number | null;
                };
                type: "SELECT";
                name: string;
                label: string;
                visibility: string;
                placeholder?: string | undefined;
                helperText?: string | undefined;
                required?: boolean | undefined;
            } | {
                options: {
                    min?: string | undefined;
                    max?: string | undefined;
                };
                type: "DATETIME";
                name: string;
                label: string;
                visibility: string;
                placeholder?: string | undefined;
                helperText?: string | undefined;
                required?: boolean | undefined;
            } | {
                options: {
                    minLength?: number | undefined;
                    maxLength?: number | undefined;
                    disableImages?: boolean | undefined;
                };
                type: "RICHTEXT";
                name: string;
                label: string;
                visibility: string;
                placeholder?: string | undefined;
                helperText?: string | undefined;
                required?: boolean | undefined;
            } | {
                type: "SEPARATOR";
                name: string;
            })[];
            state: string;
            points: number;
            commentsCount: number;
            lastChangeAt: Date;
            project: {
                id: string;
                name: string;
                slug: string;
                displayName: string;
            };
            group: {
                id: string;
                name: string;
                slug: string;
                displayName: string;
            };
            isSuspend?: boolean | undefined;
        };
    }, {
        id: string;
        memberId: string;
        createdAt: string;
        updatedAt: string;
        issue: {
            id: string;
            authorId: string;
            createdAt: Date;
            updatedAt: Date;
            title: string;
            key: string;
            tags: {
                id: string;
                name: string;
                description: string;
                displayName: string;
                color: string;
            }[];
            author: {
                id: string;
                username: string;
                email: string;
                roleDisplayName: string;
                roleName: string;
            };
            visibility: string;
            projectId: string;
            schema: ({
                options: {
                    min?: number | undefined;
                    max?: number | undefined;
                    noDecimal?: boolean | undefined;
                };
                type: "NUMBER";
                name: string;
                label: string;
                visibility: string;
                placeholder?: string | undefined;
                helperText?: string | undefined;
                required?: boolean | undefined;
            } | {
                options: {
                    minLength?: number | undefined;
                    maxLength?: number | undefined;
                    pattern?: string | undefined;
                };
                type: "TEXT";
                name: string;
                label: string;
                visibility: string;
                placeholder?: string | undefined;
                helperText?: string | undefined;
                required?: boolean | undefined;
            } | {
                options: {
                    isMulti: boolean;
                    optionList: string[];
                    maxSelect: number | null;
                    minSelect: number | null;
                };
                type: "SELECT";
                name: string;
                label: string;
                visibility: string;
                placeholder?: string | undefined;
                helperText?: string | undefined;
                required?: boolean | undefined;
            } | {
                options: {
                    min?: string | undefined;
                    max?: string | undefined;
                };
                type: "DATETIME";
                name: string;
                label: string;
                visibility: string;
                placeholder?: string | undefined;
                helperText?: string | undefined;
                required?: boolean | undefined;
            } | {
                options: {
                    minLength?: number | undefined;
                    maxLength?: number | undefined;
                    disableImages?: boolean | undefined;
                };
                type: "RICHTEXT";
                name: string;
                label: string;
                visibility: string;
                placeholder?: string | undefined;
                helperText?: string | undefined;
                required?: boolean | undefined;
            } | {
                type: "SEPARATOR";
                name: string;
            })[];
            state: string;
            points: number;
            commentsCount: number;
            lastChangeAt: Date;
            project: {
                id: string;
                name: string;
                slug: string;
                displayName: string;
            };
            group: {
                id: string;
                name: string;
                slug: string;
                displayName: string;
            };
            isSuspend?: boolean | undefined;
        };
    }>;
};

declare const notificationContract: {
    getCurrentMemberNotifications: {
        metadata: {
            readonly permissions: {};
        };
        summary: "Create issue confidence record by logged member";
        method: "GET";
        path: "/api/members/me/notifications";
        headers: z.ZodObject<{
            authorization: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            authorization: string;
        }, {
            authorization: string;
        }>;
        responses: {
            200: z.ZodObject<{
                data: z.ZodType<{
                    id: string;
                    memberId: string;
                    type: string;
                    createdAt: string;
                    updatedAt: string;
                    template: string;
                    isRead: boolean;
                }, z.ZodTypeDef, {
                    id: string;
                    memberId: string;
                    type: string;
                    createdAt: string;
                    updatedAt: string;
                    template: string;
                    isRead: boolean;
                }> | z.ZodObject<{}, "strip", z.ZodTypeAny, {}, {}>;
            }, "strip", z.ZodTypeAny, {
                data: {
                    id: string;
                    memberId: string;
                    type: string;
                    createdAt: string;
                    updatedAt: string;
                    template: string;
                    isRead: boolean;
                } | {};
            }, {
                data: {
                    id: string;
                    memberId: string;
                    type: string;
                    createdAt: string;
                    updatedAt: string;
                    template: string;
                    isRead: boolean;
                } | {};
            }>;
            404: z.ZodObject<{
                title: z.ZodString;
                status: z.ZodNumber;
                detail: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                status: number;
                title: string;
                detail?: string | undefined;
            }, {
                status: number;
                title: string;
                detail?: string | undefined;
            }>;
            403: z.ZodObject<{
                title: z.ZodString;
                status: z.ZodNumber;
                detail: z.ZodOptional<z.ZodString>;
                errors: z.ZodOptional<z.ZodArray<z.ZodType<ErrorObject, z.ZodTypeDef, ErrorObject>, "many">>;
            }, "strip", z.ZodTypeAny, {
                status: number;
                title: string;
                errors?: ErrorObject[] | undefined;
                detail?: string | undefined;
            }, {
                status: number;
                title: string;
                errors?: ErrorObject[] | undefined;
                detail?: string | undefined;
            }>;
            500: z.ZodObject<{
                title: z.ZodString;
                status: z.ZodNumber;
                detail: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                status: number;
                title: string;
                detail?: string | undefined;
            }, {
                status: number;
                title: string;
                detail?: string | undefined;
            }>;
        };
    };
    readCurrentMemberNotification: {
        metadata: {
            readonly permissions: {};
        };
        summary: "Read current member notification";
        method: "POST";
        body: z.ZodOptional<z.ZodNullable<z.ZodObject<{}, "strip", z.ZodTypeAny, {}, {}>>>;
        path: "/api/members/me/notifications/:notificationId/read";
        headers: z.ZodObject<{
            authorization: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            authorization: string;
        }, {
            authorization: string;
        }>;
        responses: {
            200: z.ZodObject<{
                data: z.ZodType<{
                    id: string;
                    memberId: string;
                    type: string;
                    createdAt: string;
                    updatedAt: string;
                    template: string;
                    isRead: boolean;
                }, z.ZodTypeDef, {
                    id: string;
                    memberId: string;
                    type: string;
                    createdAt: string;
                    updatedAt: string;
                    template: string;
                    isRead: boolean;
                }> | z.ZodObject<{}, "strip", z.ZodTypeAny, {}, {}>;
            }, "strip", z.ZodTypeAny, {
                data: {
                    id: string;
                    memberId: string;
                    type: string;
                    createdAt: string;
                    updatedAt: string;
                    template: string;
                    isRead: boolean;
                } | {};
            }, {
                data: {
                    id: string;
                    memberId: string;
                    type: string;
                    createdAt: string;
                    updatedAt: string;
                    template: string;
                    isRead: boolean;
                } | {};
            }>;
            400: z.ZodObject<{
                title: z.ZodString;
                status: z.ZodNumber;
                detail: z.ZodOptional<z.ZodString>;
                errors: z.ZodOptional<z.ZodArray<z.ZodType<ErrorObject, z.ZodTypeDef, ErrorObject>, "many">>;
            }, "strip", z.ZodTypeAny, {
                status: number;
                title: string;
                errors?: ErrorObject[] | undefined;
                detail?: string | undefined;
            }, {
                status: number;
                title: string;
                errors?: ErrorObject[] | undefined;
                detail?: string | undefined;
            }>;
            500: z.ZodObject<{
                title: z.ZodString;
                status: z.ZodNumber;
                detail: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                status: number;
                title: string;
                detail?: string | undefined;
            }, {
                status: number;
                title: string;
                detail?: string | undefined;
            }>;
        };
    };
    readCurrentMemberAllNotifications: {
        metadata: {
            readonly permissions: {};
        };
        summary: "Read all current member notifications";
        method: "POST";
        body: z.ZodOptional<z.ZodNullable<z.ZodObject<{}, "strip", z.ZodTypeAny, {}, {}>>>;
        path: "/api/members/me/notifications/read-all";
        headers: z.ZodObject<{
            authorization: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            authorization: string;
        }, {
            authorization: string;
        }>;
        responses: {
            200: z.ZodObject<{
                data: z.ZodType<{
                    id: string;
                    memberId: string;
                    type: string;
                    createdAt: string;
                    updatedAt: string;
                    template: string;
                    isRead: boolean;
                }[], z.ZodTypeDef, {
                    id: string;
                    memberId: string;
                    type: string;
                    createdAt: string;
                    updatedAt: string;
                    template: string;
                    isRead: boolean;
                }[]> | z.ZodObject<{}, "strip", z.ZodTypeAny, {}, {}>;
            }, "strip", z.ZodTypeAny, {
                data: {
                    id: string;
                    memberId: string;
                    type: string;
                    createdAt: string;
                    updatedAt: string;
                    template: string;
                    isRead: boolean;
                }[] | {};
            }, {
                data: {
                    id: string;
                    memberId: string;
                    type: string;
                    createdAt: string;
                    updatedAt: string;
                    template: string;
                    isRead: boolean;
                }[] | {};
            }>;
            400: z.ZodObject<{
                title: z.ZodString;
                status: z.ZodNumber;
                detail: z.ZodOptional<z.ZodString>;
                errors: z.ZodOptional<z.ZodArray<z.ZodType<ErrorObject, z.ZodTypeDef, ErrorObject>, "many">>;
            }, "strip", z.ZodTypeAny, {
                status: number;
                title: string;
                errors?: ErrorObject[] | undefined;
                detail?: string | undefined;
            }, {
                status: number;
                title: string;
                errors?: ErrorObject[] | undefined;
                detail?: string | undefined;
            }>;
            500: z.ZodObject<{
                title: z.ZodString;
                status: z.ZodNumber;
                detail: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                status: number;
                title: string;
                detail?: string | undefined;
            }, {
                status: number;
                title: string;
                detail?: string | undefined;
            }>;
        };
    };
};

declare const notificationSchema: {
    ConfidentialDTO: z.ZodObject<{
        id: z.ZodString;
        template: z.ZodString;
        memberId: z.ZodString;
        type: z.ZodString;
        isRead: z.ZodBoolean;
        createdAt: z.ZodString;
        updatedAt: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        id: string;
        memberId: string;
        type: string;
        createdAt: string;
        updatedAt: string;
        template: string;
        isRead: boolean;
    }, {
        id: string;
        memberId: string;
        type: string;
        createdAt: string;
        updatedAt: string;
        template: string;
        isRead: boolean;
    }>;
};

declare const apiTokenContract: {
    generateNewApiToken: {
        metadata: {
            readonly permissions: "create:apiToken";
        };
        summary: "Generate new api token";
        method: "POST";
        body: z.ZodObject<{
            displayName: z.ZodString;
            issueResourceAccess: z.ZodArray<z.ZodObject<{
                projectId: z.ZodString;
                scopes: z.ZodArray<z.ZodString, "many">;
            }, "strip", z.ZodTypeAny, {
                projectId: string;
                scopes: string[];
            }, {
                projectId: string;
                scopes: string[];
            }>, "many">;
            expiration: z.ZodOptional<z.ZodNullable<z.ZodString>>;
        }, "strip", z.ZodTypeAny, {
            displayName: string;
            issueResourceAccess: {
                projectId: string;
                scopes: string[];
            }[];
            expiration?: string | null | undefined;
        }, {
            displayName: string;
            issueResourceAccess: {
                projectId: string;
                scopes: string[];
            }[];
            expiration?: string | null | undefined;
        }>;
        path: "/api/api-tokens";
        headers: z.ZodObject<{
            authorization: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            authorization: string;
        }, {
            authorization: string;
        }>;
        responses: {
            200: z.ZodObject<{
                data: z.ZodType<{
                    id: string;
                    createdAt: Date;
                    updatedAt: Date;
                    displayName: string;
                    expiration: Date | null;
                    resourceAccess: {
                        issue: {
                            projectId: string;
                            scopes: string[];
                        }[];
                    };
                    hash?: string | undefined;
                    token?: string | undefined;
                }, z.ZodTypeDef, {
                    id: string;
                    createdAt: Date;
                    updatedAt: Date;
                    displayName: string;
                    expiration: Date | null;
                    resourceAccess: {
                        issue: {
                            projectId: string;
                            scopes: string[];
                        }[];
                    };
                    hash?: string | undefined;
                    token?: string | undefined;
                }> | z.ZodObject<{}, "strip", z.ZodTypeAny, {}, {}>;
            }, "strip", z.ZodTypeAny, {
                data: {
                    id: string;
                    createdAt: Date;
                    updatedAt: Date;
                    displayName: string;
                    expiration: Date | null;
                    resourceAccess: {
                        issue: {
                            projectId: string;
                            scopes: string[];
                        }[];
                    };
                    hash?: string | undefined;
                    token?: string | undefined;
                } | {};
            }, {
                data: {
                    id: string;
                    createdAt: Date;
                    updatedAt: Date;
                    displayName: string;
                    expiration: Date | null;
                    resourceAccess: {
                        issue: {
                            projectId: string;
                            scopes: string[];
                        }[];
                    };
                    hash?: string | undefined;
                    token?: string | undefined;
                } | {};
            }>;
            409: z.ZodObject<{
                title: z.ZodString;
                status: z.ZodNumber;
                detail: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                status: number;
                title: string;
                detail?: string | undefined;
            }, {
                status: number;
                title: string;
                detail?: string | undefined;
            }>;
            403: z.ZodObject<{
                title: z.ZodString;
                status: z.ZodNumber;
                detail: z.ZodOptional<z.ZodString>;
                errors: z.ZodOptional<z.ZodArray<z.ZodType<ErrorObject, z.ZodTypeDef, ErrorObject>, "many">>;
            }, "strip", z.ZodTypeAny, {
                status: number;
                title: string;
                errors?: ErrorObject[] | undefined;
                detail?: string | undefined;
            }, {
                status: number;
                title: string;
                errors?: ErrorObject[] | undefined;
                detail?: string | undefined;
            }>;
            500: z.ZodObject<{
                title: z.ZodString;
                status: z.ZodNumber;
                detail: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                status: number;
                title: string;
                detail?: string | undefined;
            }, {
                status: number;
                title: string;
                detail?: string | undefined;
            }>;
        };
    };
    regenerateApiToken: {
        metadata: {
            readonly permissions: "create:apiToken";
        };
        summary: "Regenerate api token";
        method: "POST";
        body: z.ZodOptional<z.ZodNullable<z.ZodObject<{}, "strip", z.ZodTypeAny, {}, {}>>>;
        path: "/api/api-tokens/:id/regenerate";
        headers: z.ZodObject<{
            authorization: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            authorization: string;
        }, {
            authorization: string;
        }>;
        responses: {
            200: z.ZodObject<{
                data: z.ZodType<{
                    id: string;
                    createdAt: Date;
                    updatedAt: Date;
                    displayName: string;
                    expiration: Date | null;
                    resourceAccess: {
                        issue: {
                            projectId: string;
                            scopes: string[];
                        }[];
                    };
                    hash?: string | undefined;
                    token?: string | undefined;
                }, z.ZodTypeDef, {
                    id: string;
                    createdAt: Date;
                    updatedAt: Date;
                    displayName: string;
                    expiration: Date | null;
                    resourceAccess: {
                        issue: {
                            projectId: string;
                            scopes: string[];
                        }[];
                    };
                    hash?: string | undefined;
                    token?: string | undefined;
                }> | z.ZodObject<{}, "strip", z.ZodTypeAny, {}, {}>;
            }, "strip", z.ZodTypeAny, {
                data: {
                    id: string;
                    createdAt: Date;
                    updatedAt: Date;
                    displayName: string;
                    expiration: Date | null;
                    resourceAccess: {
                        issue: {
                            projectId: string;
                            scopes: string[];
                        }[];
                    };
                    hash?: string | undefined;
                    token?: string | undefined;
                } | {};
            }, {
                data: {
                    id: string;
                    createdAt: Date;
                    updatedAt: Date;
                    displayName: string;
                    expiration: Date | null;
                    resourceAccess: {
                        issue: {
                            projectId: string;
                            scopes: string[];
                        }[];
                    };
                    hash?: string | undefined;
                    token?: string | undefined;
                } | {};
            }>;
            404: z.ZodObject<{
                title: z.ZodString;
                status: z.ZodNumber;
                detail: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                status: number;
                title: string;
                detail?: string | undefined;
            }, {
                status: number;
                title: string;
                detail?: string | undefined;
            }>;
            403: z.ZodObject<{
                title: z.ZodString;
                status: z.ZodNumber;
                detail: z.ZodOptional<z.ZodString>;
                errors: z.ZodOptional<z.ZodArray<z.ZodType<ErrorObject, z.ZodTypeDef, ErrorObject>, "many">>;
            }, "strip", z.ZodTypeAny, {
                status: number;
                title: string;
                errors?: ErrorObject[] | undefined;
                detail?: string | undefined;
            }, {
                status: number;
                title: string;
                errors?: ErrorObject[] | undefined;
                detail?: string | undefined;
            }>;
            500: z.ZodObject<{
                title: z.ZodString;
                status: z.ZodNumber;
                detail: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                status: number;
                title: string;
                detail?: string | undefined;
            }, {
                status: number;
                title: string;
                detail?: string | undefined;
            }>;
        };
    };
    editApiToken: {
        metadata: {
            permissions: "update:apiToken";
        };
        summary: "Edit api token";
        method: "POST";
        body: z.ZodObject<{
            displayName: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            displayName: string;
        }, {
            displayName: string;
        }>;
        path: "/api/api-tokens/:id/edit";
        headers: z.ZodObject<{
            authorization: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            authorization: string;
        }, {
            authorization: string;
        }>;
        responses: {
            200: z.ZodObject<{
                data: z.ZodType<{
                    id: string;
                    createdAt: Date;
                    updatedAt: Date;
                    displayName: string;
                    expiration: Date | null;
                    resourceAccess: {
                        issue: {
                            projectId: string;
                            scopes: string[];
                        }[];
                    };
                    hash?: string | undefined;
                    token?: string | undefined;
                }, z.ZodTypeDef, {
                    id: string;
                    createdAt: Date;
                    updatedAt: Date;
                    displayName: string;
                    expiration: Date | null;
                    resourceAccess: {
                        issue: {
                            projectId: string;
                            scopes: string[];
                        }[];
                    };
                    hash?: string | undefined;
                    token?: string | undefined;
                }> | z.ZodObject<{}, "strip", z.ZodTypeAny, {}, {}>;
            }, "strip", z.ZodTypeAny, {
                data: {
                    id: string;
                    createdAt: Date;
                    updatedAt: Date;
                    displayName: string;
                    expiration: Date | null;
                    resourceAccess: {
                        issue: {
                            projectId: string;
                            scopes: string[];
                        }[];
                    };
                    hash?: string | undefined;
                    token?: string | undefined;
                } | {};
            }, {
                data: {
                    id: string;
                    createdAt: Date;
                    updatedAt: Date;
                    displayName: string;
                    expiration: Date | null;
                    resourceAccess: {
                        issue: {
                            projectId: string;
                            scopes: string[];
                        }[];
                    };
                    hash?: string | undefined;
                    token?: string | undefined;
                } | {};
            }>;
            403: z.ZodObject<{
                title: z.ZodString;
                status: z.ZodNumber;
                detail: z.ZodOptional<z.ZodString>;
                errors: z.ZodOptional<z.ZodArray<z.ZodType<ErrorObject, z.ZodTypeDef, ErrorObject>, "many">>;
            }, "strip", z.ZodTypeAny, {
                status: number;
                title: string;
                errors?: ErrorObject[] | undefined;
                detail?: string | undefined;
            }, {
                status: number;
                title: string;
                errors?: ErrorObject[] | undefined;
                detail?: string | undefined;
            }>;
            404: z.ZodObject<{
                title: z.ZodString;
                status: z.ZodNumber;
                detail: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                status: number;
                title: string;
                detail?: string | undefined;
            }, {
                status: number;
                title: string;
                detail?: string | undefined;
            }>;
            409: z.ZodObject<{
                title: z.ZodString;
                status: z.ZodNumber;
                detail: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                status: number;
                title: string;
                detail?: string | undefined;
            }, {
                status: number;
                title: string;
                detail?: string | undefined;
            }>;
            500: z.ZodObject<{
                title: z.ZodString;
                status: z.ZodNumber;
                detail: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                status: number;
                title: string;
                detail?: string | undefined;
            }, {
                status: number;
                title: string;
                detail?: string | undefined;
            }>;
        };
    };
    deleteApiToken: {
        metadata: {
            permissions: "delete:apiToken";
        };
        summary: "Delete apiToken by id";
        method: "DELETE";
        body: z.ZodOptional<z.ZodNullable<z.ZodObject<{}, "strip", z.ZodTypeAny, {}, {}>>>;
        path: "/api/api-tokens/:id";
        headers: z.ZodObject<{
            authorization: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            authorization: string;
        }, {
            authorization: string;
        }>;
        responses: {
            204: z.ZodNullable<z.ZodObject<{}, "strip", z.ZodTypeAny, {}, {}>>;
            404: z.ZodObject<{
                title: z.ZodString;
                status: z.ZodNumber;
                detail: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                status: number;
                title: string;
                detail?: string | undefined;
            }, {
                status: number;
                title: string;
                detail?: string | undefined;
            }>;
            403: z.ZodObject<{
                title: z.ZodString;
                status: z.ZodNumber;
                detail: z.ZodOptional<z.ZodString>;
                errors: z.ZodOptional<z.ZodArray<z.ZodType<ErrorObject, z.ZodTypeDef, ErrorObject>, "many">>;
            }, "strip", z.ZodTypeAny, {
                status: number;
                title: string;
                errors?: ErrorObject[] | undefined;
                detail?: string | undefined;
            }, {
                status: number;
                title: string;
                errors?: ErrorObject[] | undefined;
                detail?: string | undefined;
            }>;
            500: z.ZodObject<{
                title: z.ZodString;
                status: z.ZodNumber;
                detail: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                status: number;
                title: string;
                detail?: string | undefined;
            }, {
                status: number;
                title: string;
                detail?: string | undefined;
            }>;
        };
    };
    getApiTokens: {
        metadata: {
            permissions: "read:apiToken";
        };
        query: z.ZodObject<{
            page: z.ZodOptional<z.ZodString>;
            limit: z.ZodOptional<z.ZodString>;
            search: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            search?: string | undefined;
            limit?: string | undefined;
            page?: string | undefined;
        }, {
            search?: string | undefined;
            limit?: string | undefined;
            page?: string | undefined;
        }>;
        summary: "Get all api tokens";
        method: "GET";
        path: "/api/api-tokens";
        headers: z.ZodObject<{
            authorization: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            authorization: string;
        }, {
            authorization: string;
        }>;
        responses: {
            200: z.ZodObject<{
                data: z.ZodType<{
                    data: {
                        id: string;
                        createdAt: Date;
                        updatedAt: Date;
                        displayName: string;
                        expiration: Date | null;
                        resourceAccess: {
                            issue: {
                                projectId: string;
                                scopes: string[];
                            }[];
                        };
                        hash?: string | undefined;
                        token?: string | undefined;
                    }[];
                    count: number;
                }, z.ZodTypeDef, {
                    data: {
                        id: string;
                        createdAt: Date;
                        updatedAt: Date;
                        displayName: string;
                        expiration: Date | null;
                        resourceAccess: {
                            issue: {
                                projectId: string;
                                scopes: string[];
                            }[];
                        };
                        hash?: string | undefined;
                        token?: string | undefined;
                    }[];
                    count: number;
                }> | z.ZodObject<{}, "strip", z.ZodTypeAny, {}, {}>;
            }, "strip", z.ZodTypeAny, {
                data: {
                    data: {
                        id: string;
                        createdAt: Date;
                        updatedAt: Date;
                        displayName: string;
                        expiration: Date | null;
                        resourceAccess: {
                            issue: {
                                projectId: string;
                                scopes: string[];
                            }[];
                        };
                        hash?: string | undefined;
                        token?: string | undefined;
                    }[];
                    count: number;
                } | {};
            }, {
                data: {
                    data: {
                        id: string;
                        createdAt: Date;
                        updatedAt: Date;
                        displayName: string;
                        expiration: Date | null;
                        resourceAccess: {
                            issue: {
                                projectId: string;
                                scopes: string[];
                            }[];
                        };
                        hash?: string | undefined;
                        token?: string | undefined;
                    }[];
                    count: number;
                } | {};
            }>;
            401: z.ZodObject<{
                title: z.ZodString;
                status: z.ZodNumber;
                detail: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                status: number;
                title: string;
                detail?: string | undefined;
            }, {
                status: number;
                title: string;
                detail?: string | undefined;
            }>;
            500: z.ZodObject<{
                title: z.ZodString;
                status: z.ZodNumber;
                detail: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                status: number;
                title: string;
                detail?: string | undefined;
            }, {
                status: number;
                title: string;
                detail?: string | undefined;
            }>;
        };
    };
};

declare const apiTokenSchema: {
    dto: z.ZodObject<{
        id: z.ZodString;
        displayName: z.ZodString;
        hash: z.ZodOptional<z.ZodString>;
        token: z.ZodOptional<z.ZodString>;
        expiration: z.ZodNullable<z.ZodDate>;
        resourceAccess: z.ZodObject<{
            issue: z.ZodArray<z.ZodObject<{
                projectId: z.ZodString;
                scopes: z.ZodArray<z.ZodString, "many">;
            }, "strip", z.ZodTypeAny, {
                projectId: string;
                scopes: string[];
            }, {
                projectId: string;
                scopes: string[];
            }>, "many">;
        }, "strip", z.ZodTypeAny, {
            issue: {
                projectId: string;
                scopes: string[];
            }[];
        }, {
            issue: {
                projectId: string;
                scopes: string[];
            }[];
        }>;
        createdAt: z.ZodDate;
        updatedAt: z.ZodDate;
    }, "strip", z.ZodTypeAny, {
        id: string;
        createdAt: Date;
        updatedAt: Date;
        displayName: string;
        expiration: Date | null;
        resourceAccess: {
            issue: {
                projectId: string;
                scopes: string[];
            }[];
        };
        hash?: string | undefined;
        token?: string | undefined;
    }, {
        id: string;
        createdAt: Date;
        updatedAt: Date;
        displayName: string;
        expiration: Date | null;
        resourceAccess: {
            issue: {
                projectId: string;
                scopes: string[];
            }[];
        };
        hash?: string | undefined;
        token?: string | undefined;
    }>;
};

declare const issueTagRouterSchema: {
    getIssueTags: {
        metadata: {
            readonly permissions: {};
        };
        query: z.ZodObject<{
            page: z.ZodOptional<z.ZodString>;
            limit: z.ZodOptional<z.ZodString>;
            search: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            search?: string | undefined;
            limit?: string | undefined;
            page?: string | undefined;
        }, {
            search?: string | undefined;
            limit?: string | undefined;
            page?: string | undefined;
        }>;
        summary: "Get issue tags";
        method: "GET";
        path: "/api/issue-tags";
        headers: z.ZodObject<{
            authorization: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            authorization: string;
        }, {
            authorization: string;
        }>;
        responses: {
            200: z.ZodObject<{
                data: z.ZodType<{
                    id: string;
                    createdAt: string;
                    updatedAt: string;
                    name: string;
                    description: string;
                    displayName: string;
                    color: string;
                    count: number;
                }[], z.ZodTypeDef, {
                    id: string;
                    createdAt: string;
                    updatedAt: string;
                    name: string;
                    description: string;
                    displayName: string;
                    color: string;
                    count: number;
                }[]> | z.ZodObject<{}, "strip", z.ZodTypeAny, {}, {}>;
            }, "strip", z.ZodTypeAny, {
                data: {
                    id: string;
                    createdAt: string;
                    updatedAt: string;
                    name: string;
                    description: string;
                    displayName: string;
                    color: string;
                    count: number;
                }[] | {};
            }, {
                data: {
                    id: string;
                    createdAt: string;
                    updatedAt: string;
                    name: string;
                    description: string;
                    displayName: string;
                    color: string;
                    count: number;
                }[] | {};
            }>;
            500: z.ZodObject<{
                title: z.ZodString;
                status: z.ZodNumber;
                detail: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                status: number;
                title: string;
                detail?: string | undefined;
            }, {
                status: number;
                title: string;
                detail?: string | undefined;
            }>;
        };
    };
    getIssueTagByName: {
        metadata: {
            readonly permissions: {};
        };
        query: z.ZodOptional<z.ZodNullable<z.ZodObject<{}, "strip", z.ZodTypeAny, {}, {}>>>;
        summary: "Get issue tag by name";
        method: "GET";
        path: "/api/issue-tags/by/name/:name";
        headers: z.ZodObject<{
            authorization: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            authorization: string;
        }, {
            authorization: string;
        }>;
        responses: {
            200: z.ZodObject<{
                data: z.ZodType<{
                    id: string;
                    createdAt: string;
                    updatedAt: string;
                    name: string;
                    description: string;
                    displayName: string;
                    color: string;
                    count: number;
                }, z.ZodTypeDef, {
                    id: string;
                    createdAt: string;
                    updatedAt: string;
                    name: string;
                    description: string;
                    displayName: string;
                    color: string;
                    count: number;
                }> | z.ZodObject<{}, "strip", z.ZodTypeAny, {}, {}>;
            }, "strip", z.ZodTypeAny, {
                data: {
                    id: string;
                    createdAt: string;
                    updatedAt: string;
                    name: string;
                    description: string;
                    displayName: string;
                    color: string;
                    count: number;
                } | {};
            }, {
                data: {
                    id: string;
                    createdAt: string;
                    updatedAt: string;
                    name: string;
                    description: string;
                    displayName: string;
                    color: string;
                    count: number;
                } | {};
            }>;
            404: z.ZodObject<{
                title: z.ZodString;
                status: z.ZodNumber;
                detail: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                status: number;
                title: string;
                detail?: string | undefined;
            }, {
                status: number;
                title: string;
                detail?: string | undefined;
            }>;
            500: z.ZodObject<{
                title: z.ZodString;
                status: z.ZodNumber;
                detail: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                status: number;
                title: string;
                detail?: string | undefined;
            }, {
                status: number;
                title: string;
                detail?: string | undefined;
            }>;
        };
    };
    createIssueTag: {
        metadata: {
            readonly permissions: "create:issueTag";
        };
        method: "POST";
        body: z.ZodObject<{
            displayName: z.ZodString;
            color: z.ZodString;
            description: z.ZodNullable<z.ZodOptional<z.ZodString>>;
        }, "strip", z.ZodTypeAny, {
            displayName: string;
            color: string;
            description?: string | null | undefined;
        }, {
            displayName: string;
            color: string;
            description?: string | null | undefined;
        }>;
        path: "/api/issue-tags";
        headers: z.ZodObject<{
            authorization: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            authorization: string;
        }, {
            authorization: string;
        }>;
        responses: {
            200: z.ZodObject<{
                data: z.ZodType<{
                    id: string;
                    name: string;
                    description: string;
                    displayName: string;
                    color: string;
                }, z.ZodTypeDef, {
                    id: string;
                    name: string;
                    description: string;
                    displayName: string;
                    color: string;
                }> | z.ZodObject<{}, "strip", z.ZodTypeAny, {}, {}>;
            }, "strip", z.ZodTypeAny, {
                data: {
                    id: string;
                    name: string;
                    description: string;
                    displayName: string;
                    color: string;
                } | {};
            }, {
                data: {
                    id: string;
                    name: string;
                    description: string;
                    displayName: string;
                    color: string;
                } | {};
            }>;
            403: z.ZodObject<{
                title: z.ZodString;
                status: z.ZodNumber;
                detail: z.ZodOptional<z.ZodString>;
                errors: z.ZodOptional<z.ZodArray<z.ZodType<ErrorObject, z.ZodTypeDef, ErrorObject>, "many">>;
            }, "strip", z.ZodTypeAny, {
                status: number;
                title: string;
                errors?: ErrorObject[] | undefined;
                detail?: string | undefined;
            }, {
                status: number;
                title: string;
                errors?: ErrorObject[] | undefined;
                detail?: string | undefined;
            }>;
            409: z.ZodObject<{
                title: z.ZodString;
                status: z.ZodNumber;
                detail: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                status: number;
                title: string;
                detail?: string | undefined;
            }, {
                status: number;
                title: string;
                detail?: string | undefined;
            }>;
            500: z.ZodObject<{
                title: z.ZodString;
                status: z.ZodNumber;
                detail: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                status: number;
                title: string;
                detail?: string | undefined;
            }, {
                status: number;
                title: string;
                detail?: string | undefined;
            }>;
        };
    };
    editIssueTag: {
        metadata: {
            readonly permissions: "update:issueTag";
        };
        method: "POST";
        body: z.ZodObject<{
            displayName: z.ZodString;
            color: z.ZodString;
            description: z.ZodNullable<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            description: string | null;
            displayName: string;
            color: string;
        }, {
            description: string | null;
            displayName: string;
            color: string;
        }>;
        path: "/api/issue-tags/:id/edit";
        headers: z.ZodObject<{
            authorization: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            authorization: string;
        }, {
            authorization: string;
        }>;
        responses: {
            200: z.ZodObject<{
                data: z.ZodType<{
                    id: string;
                    name: string;
                    description: string;
                    displayName: string;
                    color: string;
                }, z.ZodTypeDef, {
                    id: string;
                    name: string;
                    description: string;
                    displayName: string;
                    color: string;
                }> | z.ZodObject<{}, "strip", z.ZodTypeAny, {}, {}>;
            }, "strip", z.ZodTypeAny, {
                data: {
                    id: string;
                    name: string;
                    description: string;
                    displayName: string;
                    color: string;
                } | {};
            }, {
                data: {
                    id: string;
                    name: string;
                    description: string;
                    displayName: string;
                    color: string;
                } | {};
            }>;
            403: z.ZodObject<{
                title: z.ZodString;
                status: z.ZodNumber;
                detail: z.ZodOptional<z.ZodString>;
                errors: z.ZodOptional<z.ZodArray<z.ZodType<ErrorObject, z.ZodTypeDef, ErrorObject>, "many">>;
            }, "strip", z.ZodTypeAny, {
                status: number;
                title: string;
                errors?: ErrorObject[] | undefined;
                detail?: string | undefined;
            }, {
                status: number;
                title: string;
                errors?: ErrorObject[] | undefined;
                detail?: string | undefined;
            }>;
            404: z.ZodObject<{
                title: z.ZodString;
                status: z.ZodNumber;
                detail: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                status: number;
                title: string;
                detail?: string | undefined;
            }, {
                status: number;
                title: string;
                detail?: string | undefined;
            }>;
            409: z.ZodObject<{
                title: z.ZodString;
                status: z.ZodNumber;
                detail: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                status: number;
                title: string;
                detail?: string | undefined;
            }, {
                status: number;
                title: string;
                detail?: string | undefined;
            }>;
            500: z.ZodObject<{
                title: z.ZodString;
                status: z.ZodNumber;
                detail: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                status: number;
                title: string;
                detail?: string | undefined;
            }, {
                status: number;
                title: string;
                detail?: string | undefined;
            }>;
        };
    };
    deleteIssueTag: {
        metadata: {
            readonly permissions: "delete:issueTag";
        };
        method: "DELETE";
        body: z.ZodOptional<z.ZodNullable<z.ZodObject<{}, "strip", z.ZodTypeAny, {}, {}>>>;
        path: "/api/issue-tags/:id";
        headers: z.ZodObject<{
            authorization: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            authorization: string;
        }, {
            authorization: string;
        }>;
        responses: {
            204: z.ZodNullable<z.ZodObject<{}, "strip", z.ZodTypeAny, {}, {}>>;
            404: z.ZodObject<{
                title: z.ZodString;
                status: z.ZodNumber;
                detail: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                status: number;
                title: string;
                detail?: string | undefined;
            }, {
                status: number;
                title: string;
                detail?: string | undefined;
            }>;
            403: z.ZodObject<{
                title: z.ZodString;
                status: z.ZodNumber;
                detail: z.ZodOptional<z.ZodString>;
                errors: z.ZodOptional<z.ZodArray<z.ZodType<ErrorObject, z.ZodTypeDef, ErrorObject>, "many">>;
            }, "strip", z.ZodTypeAny, {
                status: number;
                title: string;
                errors?: ErrorObject[] | undefined;
                detail?: string | undefined;
            }, {
                status: number;
                title: string;
                errors?: ErrorObject[] | undefined;
                detail?: string | undefined;
            }>;
            500: z.ZodObject<{
                title: z.ZodString;
                status: z.ZodNumber;
                detail: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                status: number;
                title: string;
                detail?: string | undefined;
            }, {
                status: number;
                title: string;
                detail?: string | undefined;
            }>;
        };
    };
};

declare const issueTagSchema: {
    IssueTagDTO: z.ZodObject<{
        id: z.ZodString;
        displayName: z.ZodString;
        name: z.ZodString;
        color: z.ZodString;
        description: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        id: string;
        name: string;
        description: string;
        displayName: string;
        color: string;
    }, {
        id: string;
        name: string;
        description: string;
        displayName: string;
        color: string;
    }>;
    IssueTagDetailsDTO: z.ZodObject<z.objectUtil.extendShape<{
        id: z.ZodString;
        displayName: z.ZodString;
        name: z.ZodString;
        color: z.ZodString;
        description: z.ZodString;
    }, {
        count: z.ZodNumber;
        createdAt: z.ZodString;
        updatedAt: z.ZodString;
    }>, "strip", z.ZodTypeAny, {
        id: string;
        createdAt: string;
        updatedAt: string;
        name: string;
        description: string;
        displayName: string;
        color: string;
        count: number;
    }, {
        id: string;
        createdAt: string;
        updatedAt: string;
        name: string;
        description: string;
        displayName: string;
        color: string;
        count: number;
    }>;
};

declare const issueActivitySchema: {
    IssueActivityDTO: z.ZodObject<{
        id: z.ZodString;
        memberId: z.ZodString;
        projectId: z.ZodString;
        issueId: z.ZodString;
        assignMemberId: z.ZodOptional<z.ZodString>;
        commentId: z.ZodOptional<z.ZodString>;
        type: z.ZodEnum<["ISSUE_CREATE", "ISSUE_FIELDS_CHANGE", "ISSUE_STATE_CHANGE", "ISSUE_ASSIGN", "ISSUE_TAGS_UPDATE", "ISSUE_COMMENT_REPLY", "ISSUE_TITLE_UPDATE"]>;
        context: z.ZodRecord<z.ZodString, z.ZodUnknown>;
        createdAt: z.ZodString;
        updatedAt: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        id: string;
        memberId: string;
        issueId: string;
        type: "ISSUE_CREATE" | "ISSUE_FIELDS_CHANGE" | "ISSUE_STATE_CHANGE" | "ISSUE_ASSIGN" | "ISSUE_TAGS_UPDATE" | "ISSUE_COMMENT_REPLY" | "ISSUE_TITLE_UPDATE";
        createdAt: string;
        updatedAt: string;
        projectId: string;
        context: Record<string, unknown>;
        assignMemberId?: string | undefined;
        commentId?: string | undefined;
    }, {
        id: string;
        memberId: string;
        issueId: string;
        type: "ISSUE_CREATE" | "ISSUE_FIELDS_CHANGE" | "ISSUE_STATE_CHANGE" | "ISSUE_ASSIGN" | "ISSUE_TAGS_UPDATE" | "ISSUE_COMMENT_REPLY" | "ISSUE_TITLE_UPDATE";
        createdAt: string;
        updatedAt: string;
        projectId: string;
        context: Record<string, unknown>;
        assignMemberId?: string | undefined;
        commentId?: string | undefined;
    }>;
    IssueActivityDetailsDTO: z.ZodObject<z.objectUtil.extendShape<{
        id: z.ZodString;
        memberId: z.ZodString;
        projectId: z.ZodString;
        issueId: z.ZodString;
        assignMemberId: z.ZodOptional<z.ZodString>;
        commentId: z.ZodOptional<z.ZodString>;
        type: z.ZodEnum<["ISSUE_CREATE", "ISSUE_FIELDS_CHANGE", "ISSUE_STATE_CHANGE", "ISSUE_ASSIGN", "ISSUE_TAGS_UPDATE", "ISSUE_COMMENT_REPLY", "ISSUE_TITLE_UPDATE"]>;
        context: z.ZodRecord<z.ZodString, z.ZodUnknown>;
        createdAt: z.ZodString;
        updatedAt: z.ZodString;
    }, {
        member: z.ZodObject<{
            id: z.ZodString;
            avatar: z.ZodNullable<z.ZodString>;
            username: z.ZodString;
            roleDisplayName: z.ZodString;
            reputation: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            id: string;
            username: string;
            reputation: number;
            avatar: string | null;
            roleDisplayName: string;
        }, {
            id: string;
            username: string;
            reputation: number;
            avatar: string | null;
            roleDisplayName: string;
        }>;
        project: z.ZodObject<{
            id: z.ZodString;
            name: z.ZodString;
            key: z.ZodString;
            displayName: z.ZodString;
            slug: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            id: string;
            name: string;
            slug: string;
            key: string;
            displayName: string;
        }, {
            id: string;
            name: string;
            slug: string;
            key: string;
            displayName: string;
        }>;
        issue: z.ZodObject<{
            id: z.ZodString;
            title: z.ZodString;
            tags: z.ZodArray<z.ZodString, "many">;
            state: z.ZodString;
            key: z.ZodString;
            points: z.ZodNumber;
            commentsCount: z.ZodNumber;
            attachmentsCount: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            id: string;
            title: string;
            key: string;
            tags: string[];
            state: string;
            points: number;
            commentsCount: number;
            attachmentsCount: number;
        }, {
            id: string;
            title: string;
            key: string;
            tags: string[];
            state: string;
            points: number;
            commentsCount: number;
            attachmentsCount: number;
        }>;
        comment: z.ZodOptional<z.ZodObject<{
            id: z.ZodString;
            content: z.ZodString;
            authorId: z.ZodString;
            issueId: z.ZodString;
            parentCommentId: z.ZodOptional<z.ZodString>;
            createdAt: z.ZodOptional<z.ZodDate>;
            updatedAt: z.ZodOptional<z.ZodDate>;
        }, "strip", z.ZodTypeAny, {
            id: string;
            authorId: string;
            issueId: string;
            content: string;
            createdAt?: Date | undefined;
            updatedAt?: Date | undefined;
            parentCommentId?: string | undefined;
        }, {
            id: string;
            authorId: string;
            issueId: string;
            content: string;
            createdAt?: Date | undefined;
            updatedAt?: Date | undefined;
            parentCommentId?: string | undefined;
        }>>;
        type: z.ZodEnum<["ISSUE_CREATE", "ISSUE_FIELDS_CHANGE", "ISSUE_STATE_CHANGE", "ISSUE_ASSIGN", "ISSUE_TAGS_UPDATE", "ISSUE_COMMENT_REPLY", "ISSUE_TITLE_UPDATE"]>;
        context: z.ZodRecord<z.ZodString, z.ZodUnknown>;
        createdAt: z.ZodString;
        updatedAt: z.ZodString;
    }>, "strip", z.ZodTypeAny, {
        id: string;
        memberId: string;
        issueId: string;
        type: "ISSUE_CREATE" | "ISSUE_FIELDS_CHANGE" | "ISSUE_STATE_CHANGE" | "ISSUE_ASSIGN" | "ISSUE_TAGS_UPDATE" | "ISSUE_COMMENT_REPLY" | "ISSUE_TITLE_UPDATE";
        createdAt: string;
        updatedAt: string;
        projectId: string;
        project: {
            id: string;
            name: string;
            slug: string;
            key: string;
            displayName: string;
        };
        issue: {
            id: string;
            title: string;
            key: string;
            tags: string[];
            state: string;
            points: number;
            commentsCount: number;
            attachmentsCount: number;
        };
        context: Record<string, unknown>;
        member: {
            id: string;
            username: string;
            reputation: number;
            avatar: string | null;
            roleDisplayName: string;
        };
        assignMemberId?: string | undefined;
        commentId?: string | undefined;
        comment?: {
            id: string;
            authorId: string;
            issueId: string;
            content: string;
            createdAt?: Date | undefined;
            updatedAt?: Date | undefined;
            parentCommentId?: string | undefined;
        } | undefined;
    }, {
        id: string;
        memberId: string;
        issueId: string;
        type: "ISSUE_CREATE" | "ISSUE_FIELDS_CHANGE" | "ISSUE_STATE_CHANGE" | "ISSUE_ASSIGN" | "ISSUE_TAGS_UPDATE" | "ISSUE_COMMENT_REPLY" | "ISSUE_TITLE_UPDATE";
        createdAt: string;
        updatedAt: string;
        projectId: string;
        project: {
            id: string;
            name: string;
            slug: string;
            key: string;
            displayName: string;
        };
        issue: {
            id: string;
            title: string;
            key: string;
            tags: string[];
            state: string;
            points: number;
            commentsCount: number;
            attachmentsCount: number;
        };
        context: Record<string, unknown>;
        member: {
            id: string;
            username: string;
            reputation: number;
            avatar: string | null;
            roleDisplayName: string;
        };
        assignMemberId?: string | undefined;
        commentId?: string | undefined;
        comment?: {
            id: string;
            authorId: string;
            issueId: string;
            content: string;
            createdAt?: Date | undefined;
            updatedAt?: Date | undefined;
            parentCommentId?: string | undefined;
        } | undefined;
    }>;
};

declare const issueActivityContract: {
    getIssueActivitiesByIssueId: {
        metadata: {
            readonly isPublic: true;
        };
        query: z.ZodObject<{
            page: z.ZodOptional<z.ZodString>;
            limit: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            limit?: string | undefined;
            page?: string | undefined;
        }, {
            limit?: string | undefined;
            page?: string | undefined;
        }>;
        summary: "Get issue activities by issue Id";
        method: "GET";
        path: "/api/issues/:issueId/activities";
        headers: z.ZodObject<{
            authorization: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            authorization: string;
        }, {
            authorization: string;
        }>;
        responses: {
            200: z.ZodObject<{
                data: z.ZodType<{
                    id: string;
                    memberId: string;
                    issueId: string;
                    type: "ISSUE_CREATE" | "ISSUE_FIELDS_CHANGE" | "ISSUE_STATE_CHANGE" | "ISSUE_ASSIGN" | "ISSUE_TAGS_UPDATE" | "ISSUE_COMMENT_REPLY" | "ISSUE_TITLE_UPDATE";
                    createdAt: string;
                    updatedAt: string;
                    projectId: string;
                    project: {
                        id: string;
                        name: string;
                        slug: string;
                        key: string;
                        displayName: string;
                    };
                    issue: {
                        id: string;
                        title: string;
                        key: string;
                        tags: string[];
                        state: string;
                        points: number;
                        commentsCount: number;
                        attachmentsCount: number;
                    };
                    context: Record<string, unknown>;
                    member: {
                        id: string;
                        username: string;
                        reputation: number;
                        avatar: string | null;
                        roleDisplayName: string;
                    };
                    assignMemberId?: string | undefined;
                    commentId?: string | undefined;
                    comment?: {
                        id: string;
                        authorId: string;
                        issueId: string;
                        content: string;
                        createdAt?: Date | undefined;
                        updatedAt?: Date | undefined;
                        parentCommentId?: string | undefined;
                    } | undefined;
                }[], z.ZodTypeDef, {
                    id: string;
                    memberId: string;
                    issueId: string;
                    type: "ISSUE_CREATE" | "ISSUE_FIELDS_CHANGE" | "ISSUE_STATE_CHANGE" | "ISSUE_ASSIGN" | "ISSUE_TAGS_UPDATE" | "ISSUE_COMMENT_REPLY" | "ISSUE_TITLE_UPDATE";
                    createdAt: string;
                    updatedAt: string;
                    projectId: string;
                    project: {
                        id: string;
                        name: string;
                        slug: string;
                        key: string;
                        displayName: string;
                    };
                    issue: {
                        id: string;
                        title: string;
                        key: string;
                        tags: string[];
                        state: string;
                        points: number;
                        commentsCount: number;
                        attachmentsCount: number;
                    };
                    context: Record<string, unknown>;
                    member: {
                        id: string;
                        username: string;
                        reputation: number;
                        avatar: string | null;
                        roleDisplayName: string;
                    };
                    assignMemberId?: string | undefined;
                    commentId?: string | undefined;
                    comment?: {
                        id: string;
                        authorId: string;
                        issueId: string;
                        content: string;
                        createdAt?: Date | undefined;
                        updatedAt?: Date | undefined;
                        parentCommentId?: string | undefined;
                    } | undefined;
                }[]> | z.ZodObject<{}, "strip", z.ZodTypeAny, {}, {}>;
            }, "strip", z.ZodTypeAny, {
                data: {
                    id: string;
                    memberId: string;
                    issueId: string;
                    type: "ISSUE_CREATE" | "ISSUE_FIELDS_CHANGE" | "ISSUE_STATE_CHANGE" | "ISSUE_ASSIGN" | "ISSUE_TAGS_UPDATE" | "ISSUE_COMMENT_REPLY" | "ISSUE_TITLE_UPDATE";
                    createdAt: string;
                    updatedAt: string;
                    projectId: string;
                    project: {
                        id: string;
                        name: string;
                        slug: string;
                        key: string;
                        displayName: string;
                    };
                    issue: {
                        id: string;
                        title: string;
                        key: string;
                        tags: string[];
                        state: string;
                        points: number;
                        commentsCount: number;
                        attachmentsCount: number;
                    };
                    context: Record<string, unknown>;
                    member: {
                        id: string;
                        username: string;
                        reputation: number;
                        avatar: string | null;
                        roleDisplayName: string;
                    };
                    assignMemberId?: string | undefined;
                    commentId?: string | undefined;
                    comment?: {
                        id: string;
                        authorId: string;
                        issueId: string;
                        content: string;
                        createdAt?: Date | undefined;
                        updatedAt?: Date | undefined;
                        parentCommentId?: string | undefined;
                    } | undefined;
                }[] | {};
            }, {
                data: {
                    id: string;
                    memberId: string;
                    issueId: string;
                    type: "ISSUE_CREATE" | "ISSUE_FIELDS_CHANGE" | "ISSUE_STATE_CHANGE" | "ISSUE_ASSIGN" | "ISSUE_TAGS_UPDATE" | "ISSUE_COMMENT_REPLY" | "ISSUE_TITLE_UPDATE";
                    createdAt: string;
                    updatedAt: string;
                    projectId: string;
                    project: {
                        id: string;
                        name: string;
                        slug: string;
                        key: string;
                        displayName: string;
                    };
                    issue: {
                        id: string;
                        title: string;
                        key: string;
                        tags: string[];
                        state: string;
                        points: number;
                        commentsCount: number;
                        attachmentsCount: number;
                    };
                    context: Record<string, unknown>;
                    member: {
                        id: string;
                        username: string;
                        reputation: number;
                        avatar: string | null;
                        roleDisplayName: string;
                    };
                    assignMemberId?: string | undefined;
                    commentId?: string | undefined;
                    comment?: {
                        id: string;
                        authorId: string;
                        issueId: string;
                        content: string;
                        createdAt?: Date | undefined;
                        updatedAt?: Date | undefined;
                        parentCommentId?: string | undefined;
                    } | undefined;
                }[] | {};
            }>;
            500: z.ZodObject<{
                title: z.ZodString;
                status: z.ZodNumber;
                detail: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                status: number;
                title: string;
                detail?: string | undefined;
            }, {
                status: number;
                title: string;
                detail?: string | undefined;
            }>;
        };
    };
};

export { apiContract, apiTokenContract, apiTokenSchema, commentContract, commentSchema, fileContract, fileSchema, formContract, formSchema, issueActivityContract, issueActivitySchema, issueConfidenceContract, issueConfidenceSchema$1 as issueConfidenceSchema, issueContract, issueSchema, issueSubscribeSchema as issueSubscribeContract, issueConfidenceSchema as issueSubscribeSchema, issueTagRouterSchema, issueTagSchema, memberContract, memberSchema, notificationContract, notificationSchema, projectConfidenceContract, projectConfidenceSchema, projectContract, projectGroupContract, projectGroupSchema, projectSchema, roleContract, roleSchema, userContract, userSchema };
